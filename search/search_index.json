{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"\ud83d\udcbc Career Notes <ul> <li>\ud83d\udee1 90 Day Cybersecurity </li> <li>\ud83c\udf10 90 Day WordPress</li> </ul> \ud83e\udde0 Cyber Notes <ul> <li>\ud83d\udcc4 Sample Note</li> </ul> \ud83d\udcbb Dev Notes <ul> <li>\u2699\ufe0f LAMP Setup </li> <li>\ud83d\uddc3 phpMyAdmin </li> <li>\ud83d\udd01 WP Backup (Auto) </li> <li>\ud83d\udce6 WP Backup (Compressed) </li> <li>\ud83d\udcbe WP Backup (Manual) </li> <li>\ud83e\uddf0 WP Database CLI </li> <li>\ud83e\uddee WP Database GUI </li> <li>\ud83d\udd04 WP Restore</li> </ul> \ud83d\udd0d Hunter Notes <ul> <li>\ud83d\udcc4 Sample Note</li> </ul> \ud83d\udc27 Linux Notes <ul> <li>\ud83d\udcdc paclist</li> </ul> \ud83d\udee0 Tech Notes <ul> <li>\ud83d\udca1 GitHub</li> </ul> \ud83c\udf10 Web Notes <ul> <li>\ud83d\udd17 Markdown Links </li> <li>\ud83d\udd8b Markdown Styling </li> <li>\ud83d\udd04 Share Button </li> <li>\ud83d\uddc2 Site Structure (Noted) </li> <li>\ud83c\udfd7 Site Structure</li> </ul> \ud83d\udd0d SSG Notes <ul> <li>\ud83d\ude80 Astro </li> <li>\ud83d\udcd8 Docsify </li> <li>\ud83e\udd95 Docusaurus </li> <li>\ud83c\udfd7 Eleventy (11ty) </li> <li>\u269b\ufe0f Gatsby </li> <li>\ud83c\udf32 Gridsome </li> <li>\ud83d\udc09 Hexo </li> <li>\u26a1 Hugo </li> <li>\ud83d\udc8e Jekyll </li> <li>\ud83d\udcd6 Lektor </li> <li>\ud83e\udded MkDocs </li> <li>\ud83d\udea2 MkDocs (GitHub Deploy) </li> <li>\ud83e\udded Next.js </li> <li>\ud83c\udf0c Nuxt.js </li> <li>\ud83e\udeb6 Pelican </li> <li>\u2699\ufe0f Vite </li> <li>\ud83d\udcd7 VuePress</li> </ul> \ud83d\udce6 Other Notes <ul> <li>\ud83d\udcc4 Sample Note</li> </ul>"},{"location":"#visit-the-github-repo-rwxloggithubiomynotes","title":"\ud83c\udf1f Visit the GitHub Repo  \ud83d\udc49 rwxlog.github.io/mynotes","text":""},{"location":"CareerNotes/90-day-cybersecurity/","title":"90 Day Cybersecurity","text":"<p>That's an excellent goal! Combining your technical background (especially with Linux) and your renewed focus on WordPress development with cybersecurity knowledge will make you a formidable and highly sought-after freelancer. You're strategically positioning yourself for success.</p> <p>Here is a comprehensive 90-Day Cyber Security Learning Plan structured in a day-by-day format, specifically tailored to strengthen your WordPress freelancing career by focusing on fundamental web security concepts and practical application.</p> <p>This plan integrates foundational knowledge, networking essentials, operating system security (Linux/WordPress-focused), web application security (OWASP Top 10), and practical tools.</p>"},{"location":"CareerNotes/90-day-cybersecurity/#90-day-cyber-security-learning-plan-for-wordpress-freelancing","title":"90-Day Cyber Security Learning Plan for WordPress Freelancing \ud83d\udee1\ufe0f\ud83d\udcbb","text":""},{"location":"CareerNotes/90-day-cybersecurity/#phase-1-foundations-and-networking-days-130","title":"Phase 1: Foundations and Networking (Days 1\u201330)","text":"Day Topic Activity &amp; Focus Area Day 1 Introduction to Cyber Security Learn the CIA Triad (Confidentiality, Integrity, Availability). Understand the basic threat landscape (Malware, Phishing, DoS). Day 2 Key Concepts &amp; Terminology Define: Vulnerability, Exploit, Threat, Risk, Patching, Encryption. Research CompTIA Security+ objectives. Day 3 Network Basics: TCP/IP Understand the TCP/IP Model (4 Layers) and what each layer does. Research IP addressing (IPv4 &amp; IPv6 basics). Day 4 Network Basics: Ports &amp; Protocols Learn the purpose of common ports: 21 (FTP), 22 (SSH), 25 (SMTP), 80 (HTTP), 443 (HTTPS). Research DNS and how it works. Day 5 Network Devices &amp; Security Learn about Routers, Switches, Firewalls, and WAFs (Web Application Firewalls). Focus on the Firewall's role. Day 6 Introduction to Cryptography Understand Hashing, Symmetric, and Asymmetric Encryption. Relate this to secure passwords and SSL/TLS. Day 7 Secure Communication: SSL/TLS Deep dive into SSL/TLS (HTTPS). Understand certificates and why every WordPress site must use HTTPS. Day 8 Linux Security Focus (Review) Review Linux basics: User accounts, File permissions (rwx), and the concept of Principle of Least Privilege (PoLP). Day 9 Linux Hardening Learn about SSH hardening: disabling root login, key-based authentication, changing the default port. Day 10 Linux Tools: Logs Practice navigating and reviewing system logs (e.g., <code>/var/log/auth.log</code>, <code>/var/log/apache2/error.log</code>). Day 11 Virtualization and Lab Setup Set up a Virtual Machine (VM) environment (VirtualBox or VMware). Install a basic Linux distro (e.g., Ubuntu). Day 12 Introduction to Kali Linux Install and explore the interface of Kali Linux within your VM. Understand its purpose (Penetration Testing). Day 13 Introduction to Scanning: Nmap Learn basic Nmap commands: <code>-sT</code> (TCP connect scan), <code>-sV</code> (version detection), <code>-p-</code> (port range). Day 14 Nmap Practice Practice scanning your own local network or your newly set up VM with Nmap. Day 15 Review &amp; Catch-Up Review all topics from Days 1-14. Revisit weaker areas. Watch a summary video on basic network security. Day 16 Authentication vs. Authorization Understand the difference between Authentication (Who you are) and Authorization (What you can do). Day 17 Strong Passwords &amp; MFA Learn about Password Managers and the critical need for Multi-Factor Authentication (MFA) on all platforms (hosting, WordPress admin). Day 18 Physical Security Basics Understand the physical risks to servers and devices. Focus on data center security principles. Day 19 Malware Types Study different types: Viruses, Worms, Trojans, Ransomware, Spyware. Focus on how they infect systems. Day 20 Social Engineering Learn about Phishing, Spear Phishing, Vishing, and Baiting. Understand the human factor in security. Day 21 SQL (Structured Query Language) Review basic SQL commands (<code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>) as a foundation for understanding SQL Injection. Day 22 Web Basics: HTTP/HTTPS Deep dive into HTTP Methods (GET, POST, PUT, DELETE) and how data is transmitted in a web environment. Day 23 Web Basics: Cookies &amp; Sessions Understand how web servers track state using Cookies and Session Management. Learn about common session hijacking risks. Day 24 Backup Strategy Focus on the 3-2-1 Backup Rule (3 copies, 2 different media, 1 offsite). This is crucial for WordPress freelancing. Day 25 Incident Response Basics Learn the 6 steps of Incident Response: Preparation, Identification, Containment, Eradication, Recovery, Lessons Learned. Day 26 Cloud Security Concepts Introduction to Cloud Computing (IaaS, PaaS, SaaS) and the Shared Responsibility Model (important for hosting). Day 27 Domain Name Security Learn about DNS Records (A, CNAME, MX, TXT) and defense mechanisms like DNSSEC. Day 28 Cyber Laws &amp; Ethics Research basic concepts of Cyber Law in a freelancing context and the Ethical Hacker's Code of Conduct. Day 29 Basic Security Policy Draft a personal \"Freelancer Security Policy\" for your clients (e.g., requirements for password strength, update frequency). Day 30 Final Review &amp; Self-Assessment Test your knowledge on Phase 1 concepts (CIA Triad, Nmap basics, Linux permissions, MFA)."},{"location":"CareerNotes/90-day-cybersecurity/#phase-2-wordpress-web-application-security-days-3160","title":"Phase 2: WordPress &amp; Web Application Security (Days 31\u201360)","text":"Day Topic Activity &amp; Focus Area Day 31 The OWASP Top 10 Introduce the OWASP Top 10 project. Focus on A01: Broken Access Control. Day 32 OWASP A01: Broken Access Control Understand how poor user roles/permissions can be exploited in web apps, specifically in WordPress. Day 33 WordPress Roles &amp; Permissions Deep dive into WordPress user roles (Subscriber, Contributor, Author, Editor, Admin) and securing them. Day 34 OWASP A03: SQL Injection (SQLi) Learn the concept of SQLi and how it exploits data input. Understand Prepared Statements as a defense. Day 35 OWASP A07: Cross-Site Scripting (XSS) Learn about Stored, Reflected, and DOM-based XSS. Focus on input validation and output encoding as defense. Day 36 OWASP A04: Insecure Design Focus on security as a design requirement, not an afterthought. Research secure development principles. Day 37 OWASP A02: Cryptographic Failures Understand the risks of plain text data and improper encryption. Review SSL/TLS from Day 7. Day 38 WordPress Hardening Basics Learn to secure <code>wp-config.php</code>, disable file editing, and change the default login URL. Day 39 The <code>robots.txt</code> File Understand how <code>robots.txt</code> and directory indexing work. Ensure sensitive directories are protected/hidden. Day 40 Web Application Firewalls (WAFs) Research popular WAF solutions (like Cloudflare and Sucuri) and their role in blocking attacks before they hit WordPress. Day 41 Brute-Force Attack Mitigation Learn how to protect the WordPress login page using CAPTCHA, rate limiting, and blocking specific IPs. Day 42 Vulnerability Scanners (WordPress) Research plugins like Wordfence or Solid Security. Understand the function of a vulnerability scanner. Day 43 Practical: Set up a Security Plugin Install and configure a major WordPress security plugin (like Wordfence) on a test/staging site. Day 44 WordPress Plugin/Theme Security Learn the risk of using null/pirated themes and the importance of regular updates. Day 45 Review &amp; Catch-Up Review all Phase 2 topics. Focus on the practical implementation of OWASP defenses in a WordPress context. Day 46 Burp Suite Community Edition Download and set up Burp Suite (a tool for web app testing). Learn how to use the Proxy to intercept your traffic. Day 47 Burp Suite: Practice Interception Practice intercepting a form submission on a test WordPress site using Burp Suite. Day 48 OWASP A05: Security Misconfiguration Learn how default credentials, unused services, and lack of hardening contribute to this vulnerability. Day 49 File Integrity Monitoring (FIM) Understand FIM (File Integrity Monitoring) and its importance in detecting changes in core WordPress files. Day 50 Database Security Learn how to secure the WordPress database (e.g., using a non-default prefix, securing credentials in <code>wp-config.php</code>). Day 51 OWASP A08: Software and Data Integrity Failures Focus on unverified updates/libraries. Relate this to supply chain risks with WordPress plugins/themes. Day 52 Input Validation &amp; Sanitization Study the key defense mechanisms against XSS and SQLi by validating and sanitizing all user input. Day 53 Introduction to Python for Security Review basic Python syntax and understand its role in creating small security scripts (e.g., log parsing). Day 54 Basic Python Scripting Practice Write a simple Python script to read a log file and search for \"404\" errors or failed login attempts. Day 55 Vulnerability Disclosure Learn the process of responsible vulnerability disclosure if you find a flaw in a client's site or a plugin. Day 56 TryHackMe/HackTheBox Introduction Sign up for a beginner-friendly platform (TryHackMe recommended). Complete the \"Start Here\" room. Day 57 Practical: TryHackMe Walkthrough Complete an easy introductory room on TryHackMe focused on web security fundamentals. Day 58 WordPress Malware Cleanup Process Learn the steps for cleaning a compromised WordPress site (backup, identify infection, clean, harden, monitor). Day 59 The .htaccess File (Security) Master security directives in <code>.htaccess</code>: blocking access to sensitive files (e.g., <code>wp-config.php</code>) and IP whitelisting. Day 60 Final Review &amp; Prepare for Pen Testing Review Phase 2, focusing on the OWASP Top 10 and practical WordPress defenses."},{"location":"CareerNotes/90-day-cybersecurity/#phase-3-risk-pen-testing-professionalization-days-6190","title":"Phase 3: Risk, Pen Testing &amp; Professionalization (Days 61\u201390)","text":"Day Topic Activity &amp; Focus Area Day 61 Introduction to Risk Management Learn the basic formula: Risk = Threat x Vulnerability. Understand how to quantify and communicate risk to clients. Day 62 Penetration Testing Phases Learn the five phases: Reconnaissance, Scanning, Gaining Access, Maintaining Access, Covering Tracks. Day 63 Reconnaissance Tools (Basic) Learn and practice with tools like Whois, NSLookup, and Google Dorks to gather info on a target. Day 64 Reconnaissance Tools (Web) Use the browser Developer Tools (Inspect Element) for basic web reconnaissance. Day 65 Exploitation Frameworks (Concept) Introduce Metasploit (conceptually) as a tool for packaging exploits. Understand its modules. Day 66 Cross-Site Request Forgery (CSRF) Learn how CSRF works and its defense: Anti-CSRF Tokens (nonces in WordPress). Day 67 Denial of Service (DoS/DDoS) Attacks Understand the effect and common mitigation strategies (rate limiting, CDN/WAF). Day 68 Vulnerability Scanning Practice Use an open-source scanner like OpenVAS or a simple online tool against your test environment. Day 69 Security Auditing Learn to perform a basic security audit of a WordPress site (checking updates, user accounts, security headers). Day 70 Review &amp; Catch-Up Revisit weaker areas in Phases 1-3. Focus on a practical TryHackMe or HackTheBox exercise. Day 71 Security Headers Learn about critical HTTP security headers like Content Security Policy (CSP), HSTS, and X-Frame-Options. Day 72 Reporting Vulnerabilities Practice writing a basic vulnerability report with Risk, Vulnerability, Impact, and Remediation. Day 73 Web Service Security (FTP/SFTP/SSH) Focus on SFTP/SSH as the secure alternative to FTP. Ensure all client access is secure. Day 74 Choosing Secure Hosting Understand the security features to look for in a web host (Firewall, DDoS protection, automatic backups). Day 75 Cloudflare Security Features Deep dive into Cloudflare's Free/Pro WAF and DDoS Protection features for a client site. Day 76 WordPress Theme/Plugin Development Security If you code, focus on Nonces and sanitizing/validating all data used in your custom code. Day 77 Data Privacy Regulations Research basic concepts of GDPR and CCPA related to website data collection. Day 78 Cyber Security Certifications Research entry-level certifications: CompTIA Security+ and eJPT (Junior Penetration Tester). Day 79 Project: Set up a Secure Staging Site Create a local or cloud staging environment for a WordPress site and secure it using all learned principles. Day 80 Review &amp; Catch-Up Final review of all core concepts. Solidify understanding of security headers and reporting. Day 81 Freelancing: Security as a Service Define a new service offering: \"WordPress Security Audit\" or \"Hardening Service\" based on your skills. Day 82 Freelancing: Scope of Work &amp; Contracts Learn to clearly define your security services' scope and liability in client contracts. Day 83 Practical: Security Plugin Review Review the logs and reports generated by the security plugin you installed on Day 43. Day 84 Advanced Log Analysis (Web Server) Practice identifying suspicious requests (e.g., attempts to access sensitive files) in web server logs (Apache/Nginx). Day 85 Web Shells and Backdoors Learn how an attacker maintains access via a web shell and how FIM (Day 49) helps detect them. Day 86 Honeypots and Decoy Techniques Introduction to using simple techniques to detect attackers, like a \"fake\" admin page. Day 87 Final CTF/Practical Challenge Dedicate the day to an intermediate challenge on TryHackMe or HackTheBox. Day 88 Document &amp; Create a Checklist Consolidate all learned best practices into a \"WordPress Freelancer Security Checklist\" for future client work. Day 89 Continuous Learning Plan Create a plan for continuous learning (e.g., following security blogs, subscribing to vulnerability feeds, next steps for certification). Day 90 Integrate &amp; Market Your New Skills Update your freelance profile/CV to highlight your cybersecurity expertise and the specific hardening services you now offer. Congratulations! \ud83c\udf89"},{"location":"CareerNotes/90-day-wordpress/","title":"90 Day WordPress","text":"<p>Of course. It's great that you're planning to re-enter the web development field. Your background as an English teacher and a technically-inclined Arch Linux user gives you a unique and powerful combination of skills: excellent communication and a solid problem-solving mindset. This plan is designed to be intensive and practical, focusing on getting you client-ready and earning money within the 90-day timeframe.</p> <p>Here is your 90-day learning and action plan to build a WordPress freelancing career.</p>"},{"location":"CareerNotes/90-day-wordpress/#guiding-philosophy-for-your-90-days","title":"Guiding Philosophy for Your 90 Days","text":"<ol> <li>Embrace Modern WordPress: Forget everything you knew from 2019. The game has changed with the Block Editor (Gutenberg) and Full Site Editing (FSE). We will focus on the modern workflow.</li> <li>Portfolio is Everything: You will not just learn; you will build. Your goal is to have 3 solid portfolio pieces by the end of Month 2.</li> <li>Action Over Perfection: Don't get stuck trying to learn every single thing. Learn what's needed to build a professional site and start applying for jobs. You'll learn the rest on the job.</li> <li>Leverage Your Strengths: Your English skills are your superpower in writing proposals and communicating with clients. Your Linux background means you're not afraid of technical challenges.</li> </ol>"},{"location":"CareerNotes/90-day-wordpress/#month-1-days-1-30-the-modern-wordpress-foundation","title":"Month 1 (Days 1-30): The Modern WordPress Foundation","text":"<p>Goal: Relearn the fundamentals of modern WordPress, build your first project, and understand the core tools of the trade.</p> <p>Week 1: Setup &amp; Core Concepts Refresh</p> <ul> <li>Day 1: Set up your local development environment. As a Linux user, you can use <code>LocalWP</code> (the easiest), or set up a native <code>LAMP</code> stack. Install the latest version of WordPress.</li> <li>Day 2: A deep dive into the WordPress Dashboard. Re-familiarize yourself with Posts, Pages, Media, and Settings. Pay close attention to what has changed.</li> <li>Day 3: Master the Block Editor (Gutenberg). Spend the entire day creating a complex page layout using only core blocks: Columns, Groups, Cover Images, Buttons, etc.</li> <li>Day 4: Understanding Modern Themes. Install a highly-rated block theme like <code>Kadence</code>, <code>Blocksy</code>, or the default <code>Twenty Twenty-Four</code>. Explore the Global Styles and the Site Editor (Full Site Editing).</li> <li>Day 5: Learn the difference between a Classic Theme (with the Customizer) and a Block Theme (with the Site Editor). Install a popular classic theme like <code>Astra</code> to feel the difference.</li> <li>Day 6-7: Build a simple, 5-page personal blog website for yourself on your local machine using a block theme. Create a Home, About, Blog, Contact page, and one sample blog post.</li> </ul> <p>Week 2: Essential Plugins &amp; Page Builders</p> <ul> <li>Day 8: Forms &amp; SEO. Install <code>WPForms</code> (or <code>Contact Form 7</code>) and create a functional contact form. Install <code>Rank Math</code> (or <code>Yoast SEO</code>) and learn the basics of on-page SEO.</li> <li>Day 9: Security &amp; Backups. Install <code>Wordfence</code> for security and <code>UpdraftPlus</code> for backups. Learn how to run a scan and schedule a backup.</li> <li>Day 10: Performance. Learn why website speed is critical. Install a caching plugin like <code>LiteSpeed Cache</code> (if your future server supports it) or <code>W3 Total Cache</code>. Use Google PageSpeed Insights to test your site.</li> <li>Day 11: Introduction to Page Builders. While the Block Editor is powerful, many clients still use page builders. Install the free version of <code>Elementor</code>.</li> <li>Day 12-13: Rebuild the homepage of a popular Bangladeshi company (e.g., Pathao, bKash) using Elementor. This will force you to learn its interface and widgets.</li> <li>Day 14: Review and solidify. Make a list of the top 10 most essential plugins every WordPress site needs.</li> </ul> <p>Week 3 &amp; 4: Your First Portfolio Project &amp; E-commerce</p> <ul> <li>Day 15: Plan Your First Portfolio Project. This will be a complete website for a fictional local business. Example: \"Sirajganj Modern Cafe,\" \"Dhaka Fitness Coach,\" or \"Rajshahi Digital Marketing Agency.\"</li> <li>Day 16: Outline the site structure: Homepage, About Us, Services (3 sub-pages), Blog, Contact. Write the content for the homepage and about page. Your English skills are key here!</li> <li>Day 17-21: Build the website. Use the theme and builder you feel most comfortable with (<code>Kadence</code> + Blocks, or <code>Astra</code> + <code>Elementor</code>). Focus on creating a clean, professional, and responsive design. Use free stock photos from <code>Pexels</code> or <code>Unsplash</code>.</li> <li>Day 22: Introduction to <code>WooCommerce</code>. Install and run the setup wizard on a fresh WordPress installation.</li> <li>Day 23: Add 5 simple, fictional products to your WooCommerce store. Configure shipping zones and a payment gateway in test mode (e.g., Cash on Delivery, Stripe Test Mode).</li> <li>Day 24: Learn how to customize the WooCommerce Shop and Product pages.</li> <li>Day 25-28: Finalize your first portfolio project. Add all content, test all links and forms, and ensure it's fully responsive. Take high-quality screenshots.</li> <li>Day 29-30: Rest, review, and write a \"case study\" for your project. Document the client's (fictional) problem and how your website solved it.</li> </ul>"},{"location":"CareerNotes/90-day-wordpress/#month-2-days-31-60-the-freelancing-machine","title":"Month 2 (Days 31-60): The Freelancing Machine","text":"<p>Goal: Build your brand, create your freelance profiles, and land your first paying client.</p> <p>Week 5 &amp; 6: Your Brand &amp; Second Portfolio Project</p> <ul> <li>Day 31-35: Build your own portfolio website. This is Project #2. It must be extremely professional. It should have a Homepage, About Me, Portfolio (with your first project), Services, and Contact page.</li> <li>Day 36: Buy a domain and a basic hosting plan. Deploy your portfolio site to the live server. Your Linux skills will be helpful here (understanding file permissions, SSH, etc.).</li> <li>Day 37: Start your Project #3. This time, build a one-page WooCommerce site for a single product. This is a very common client request.</li> <li>Day 38-42: Complete and polish Project #3. Make it look fantastic.</li> <li>Day 43: Add Project #2 (your portfolio site itself) and Project #3 to your portfolio page with detailed case studies. You now have three solid projects.</li> <li>Day 44: Create a professional email address with your domain (e.g., <code>contact@yourname.com</code>).</li> </ul> <p>Week 7 &amp; 8: Entering the Marketplace &amp; Finding Clients</p> <ul> <li>Day 45: Set up your Upwork profile. Spend the entire day on this. Use a professional photo, write a compelling title and bio highlighting your communication skills and technical background.</li> <li>Day 46: Add your portfolio items to Upwork. Make them look impressive with great thumbnails and detailed descriptions.</li> <li>Day 47: Set up your Fiverr profile. Create your first \"Gig\" - something simple like \"I will install WordPress and a premium theme\" or \"I will fix a small WordPress CSS issue.\"</li> <li>Day 48: The Art of the Proposal. Learn how to write winning proposals on Upwork. The key is to read the job post carefully and write a custom response, not a template. Address the client's problem directly.</li> <li>Day 49: Search for your first job. Look for small, simple, fixed-price jobs. Keywords: \"WordPress help,\" \"CSS fix,\" \"content update,\" \"plugin setup.\" Your goal is not money, it's a 5-star review.</li> <li>Day 50-60: Dedicate 2-3 hours every single day to finding and applying for jobs. Send 3-5 highly customized proposals daily. It's a numbers game. Be patient and persistent.</li> </ul>"},{"location":"CareerNotes/90-day-wordpress/#month-3-days-61-90-execution-income-growth","title":"Month 3 (Days 61-90): Execution, Income &amp; Growth","text":"<p>Goal: Successfully complete your first few jobs, build your reputation, and start earning consistent income.</p> <p>Week 9: Your First Paid Project</p> <ul> <li>Day 61: You landed your first job! Celebrate, then immediately communicate professionally with the client. Clarify all requirements and set a deadline.</li> <li>Day 62-65: Execute the project. Over-deliver. If they asked for one thing, do it perfectly and maybe fix a small related issue you notice. Keep the client updated on your progress.</li> <li>Day 66: Deliver the work, explain what you did, and politely request a review after they have confirmed everything is working.</li> <li>Day 67: You got your first 5-star review! Add the testimonial to your portfolio website.</li> <li>Day 68-70: Immediately start applying for slightly bigger jobs, mentioning your recent successful project in your proposals.</li> </ul> <p>Week 10 &amp; 11: Building Momentum</p> <ul> <li>Day 71-77: Continue applying for jobs daily. Your goal is to have your second paid project secured by now. Focus on jobs similar to the one you just completed.</li> <li>Day 78: Learn about WordPress Maintenance Plans. This is the key to recurring revenue. Create three tiers of service (e.g., Basic, Pro, Business) that include backups, updates, security scans, and a monthly report.</li> <li>Day 79: When you complete your second project, offer your client a monthly maintenance plan at a discount for the first month.</li> <li>Day 80-84: Keep working and applying. Aim to complete 3-5 small-to-medium projects by the end of the month. Your speed and confidence will increase with each one.</li> </ul> <p>Week 12: Review &amp; Plan for 2026</p> <ul> <li>Day 85-87: Deepen your knowledge. Learn about a more advanced topic you encountered in a project. Examples: Custom Post Types, Advanced Custom Fields (ACF), basic PHP snippets for <code>functions.php</code>.</li> <li>Day 88: Review your 90 days. Calculate your earnings. Analyze which types of jobs you enjoyed most and were most profitable.</li> <li>Day 89: Set clear goals for the first quarter of 2026. How much do you want to earn per month? What new skill do you want to learn (e.g., basic JavaScript, advanced Elementor techniques)?</li> <li>Day 90: Join Bangladeshi WordPress and freelancer communities on Facebook. Start networking. Share what you've learned and ask questions. This is crucial for long-term growth.</li> </ul> <p>This plan is intense, but your unique background makes it achievable. Stay disciplined, focus on building tangible assets, and communicate professionally. Your new career awaits. Good luck!</p>"},{"location":"CyberNotes/samplenote/","title":"Sample Note","text":""},{"location":"CyberNotes/samplenote/#welcome","title":"Welcome","text":""},{"location":"DevNotes/LAMP/","title":"LAMP Setup","text":"<p>Setting up the LAMP stack (Linux, Apache, MariaDB/MySQL, PHP) on Arch Linux involves installing each component separately using <code>pacman</code> and then configuring them to work together.</p>"},{"location":"DevNotes/LAMP/#1-update-the-system","title":"1. Update the System","text":"<p>Always start by ensuring your system is fully updated.</p> <pre><code>sudo pacman -Syu\n</code></pre>"},{"location":"DevNotes/LAMP/#2-install-and-start-apache-web-server","title":"2. Install and Start Apache (Web Server)","text":"<p>Install the Apache web server package, which is named <code>apache</code> on Arch.</p> <ol> <li> <p>Install Apache:</p> <pre><code>sudo pacman -S apache\n</code></pre> </li> <li> <p>Enable and Start the Service:</p> <pre><code>sudo systemctl enable --now httpd\n</code></pre> <ul> <li><code>enable</code>: Configures the service to start automatically on boot.</li> <li><code>--now</code>: Starts the service immediately.</li> <li>The Apache service on Arch is named <code>httpd</code>.</li> </ul> </li> <li> <p>Verify Apache:</p> <ul> <li>Open your web browser and navigate to <code>http://localhost</code>. You should see the default Apache \"It works!\" page. The default web root directory is typically <code>/srv/http</code>.</li> </ul> </li> </ol>"},{"location":"DevNotes/LAMP/#3-install-and-configure-mariadb-database","title":"3. Install and Configure MariaDB (Database)","text":"<p>MariaDB is the default MySQL implementation in the Arch repositories.</p> <ol> <li> <p>Install MariaDB:</p> <pre><code>sudo pacman -S mariadb\n</code></pre> </li> <li> <p>Initialize the Data Directory:</p> <ul> <li>You must initialize the database directories before starting the service for the first time.</li> </ul> <pre><code>sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n</code></pre> </li> <li> <p>Enable and Start the Service:</p> <pre><code>sudo systemctl enable --now mariadb\n</code></pre> </li> <li> <p>Secure the Installation:</p> <ul> <li>Run the security script to set the root password and remove test users/databases. Note: The MariaDB root password is not your system root password.</li> </ul> <pre><code>sudo mariadb-secure-installation\n</code></pre> <ul> <li>Press Enter for the current root password (as it's the first time), then follow the prompts to set a new root password and answer 'Y' to the security questions.</li> </ul> </li> </ol>"},{"location":"DevNotes/LAMP/#4-install-and-configure-php","title":"4. Install and Configure PHP","text":"<p>Install PHP and the necessary Apache module (<code>php-apache</code>).</p> <ol> <li> <p>Install PHP and Module:</p> <pre><code>sudo pacman -S php php-apache\n</code></pre> </li> <li> <p>Configure Apache to Use PHP:</p> <ul> <li>Edit the main Apache configuration file:</li> </ul> <pre><code>sudo nano /etc/httpd/conf/httpd.conf\n</code></pre> <ul> <li>A. Change the Multi-Processing Module (MPM):<ul> <li>Comment out <code>mpm_event_module</code> (add <code>#</code> to the start of the line).</li> <li>Uncomment <code>mpm_prefork_module</code> (remove <code>#</code> from the start of the line).  <pre><code>#LoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n</code></pre></li> </ul> </li> <li>B. Load the PHP Module:<ul> <li>Add the following lines to the end of the file:  <pre><code>LoadModule php_module modules/libphp.so\nAddHandler php-script php\nInclude conf/extra/php_module.conf\n</code></pre></li> </ul> </li> <li>Save the file (<code>Ctrl+O</code>, then <code>Enter</code>) and exit (<code>Ctrl+X</code>).</li> </ul> </li> <li> <p>Enable Database Extensions (Optional but Recommended):</p> <ul> <li>For PHP to interact with MariaDB, edit the main PHP configuration file:</li> </ul> <pre><code>sudo nano /etc/php/php.ini\n</code></pre> <ul> <li>Search for the following lines and uncomment them (remove the <code>;</code> at the start of the line):</li> </ul> <pre><code>;extension=mysqli\n;extension=pdo_mysql\n</code></pre> </li> <li> <p>Restart Apache:</p> <ul> <li>The web server must be restarted for all changes to take effect.</li> </ul> <pre><code>sudo systemctl restart httpd\n</code></pre> </li> </ol>"},{"location":"DevNotes/LAMP/#5-test-php","title":"5. Test PHP","text":"<ol> <li>Create a Test File:<ul> <li>Create a file named <code>info.php</code> in the web root directory (<code>/srv/http</code>).  <pre><code>sudo nano /srv/http/info.php\n</code></pre></li> </ul> </li> <li>Add PHP Code:<ul> <li>Paste the following content:  <pre><code>&lt;?php\nphpinfo();\n?&gt;\n</code></pre></li> </ul> </li> <li>Verify Installation:<ul> <li>Open your web browser and navigate to <code>http://localhost/info.php</code>. If you see the detailed PHP configuration page, the LAMP stack is correctly installed and configured.</li> </ul> </li> </ol>"},{"location":"DevNotes/phpMyAdmin/","title":"phpMyAdmin","text":"<p>Setting up phpMyAdmin on Arch Linux involves installing the package, configuring the necessary PHP extensions, and correctly configuring the Apache web server to access the application.</p> <p>This guide assumes you have a functional LAMP stack (Apache, MariaDB/MySQL, and PHP) already installed on your Arch Linux system.</p>"},{"location":"DevNotes/phpMyAdmin/#1-install-phpmyadmin-and-required-php-modules","title":"1. Install phpMyAdmin and Required PHP Modules","text":"<p>Use the <code>pacman</code> package manager to install the phpMyAdmin package along with essential PHP extensions required for database connectivity and functionality.</p> <pre><code>sudo pacman -S phpmyadmin php-apache php-mysqli php-gd php-intl php-json php-mbstring\n</code></pre> <ul> <li><code>phpmyadmin</code>: The core application files.</li> <li><code>php-apache</code>: The PHP module for the Apache web server (<code>mod_php</code>).</li> <li><code>php-mysqli</code>: Essential for connecting PHP to MariaDB/MySQL.</li> <li>The other modules are required for various features like image manipulation (<code>php-gd</code>), internationalization (<code>php-intl</code>), and multi-byte string support (<code>php-mbstring</code>).</li> </ul>"},{"location":"DevNotes/phpMyAdmin/#2-configure-php-modules","title":"2. Configure PHP Modules","text":"<p>You need to ensure the required extensions are enabled in your main PHP configuration file.</p> <ol> <li>Open the PHP configuration file (usually located at <code>/etc/php/php.ini</code>):     <pre><code>sudo nano /etc/php/php.ini\n</code></pre></li> <li>Search for the following lines and uncomment them by removing the semicolon (<code>;</code>) at the beginning:     <pre><code>;extension=mysqli\n;extension=iconv\n;extension=mbstring\n;extension=gd\n</code></pre>     They should look like this after editing:     <pre><code>extension=mysqli\nextension=iconv\nextension=mbstring\nextension=gd\n</code></pre></li> <li>Save the file and exit the editor.</li> </ol>"},{"location":"DevNotes/phpMyAdmin/#3-configure-apache-for-phpmyadmin","title":"3. Configure Apache for phpMyAdmin","text":"<p>Apache needs an alias configuration to know where the phpMyAdmin files are located on the filesystem (<code>/usr/share/webapps/phpMyAdmin</code>) and what URL alias to use (e.g., <code>/phpmyadmin</code>).</p> <ol> <li>Create a new Apache configuration file for phpMyAdmin:     <pre><code>sudo nano /etc/httpd/conf/extra/phpmyadmin.conf\n</code></pre></li> <li>Add the following content to the new file:     <pre><code>Alias /phpmyadmin \"/usr/share/webapps/phpMyAdmin\"\n\n&lt;Directory \"/usr/share/webapps/phpMyAdmin\"&gt;\n    DirectoryIndex index.php\n    AllowOverride All\n    Options FollowSymlinks\n    Require all granted\n&lt;/Directory&gt;\n</code></pre></li> <li>Include this new configuration file in Apache's main configuration. Open <code>/etc/httpd/conf/httpd.conf</code>:     <pre><code>sudo nano /etc/httpd/conf/httpd.conf\n</code></pre></li> <li>Scroll to the very end of the file and add this line:     <pre><code># phpMyAdmin configuration\nInclude conf/extra/phpmyadmin.conf\n</code></pre></li> </ol>"},{"location":"DevNotes/phpMyAdmin/#4-finalize-configuration-and-restart-services","title":"4. Finalize Configuration and Restart Services","text":"<ol> <li>Restart Apache to load the new configuration:     <pre><code>sudo systemctl restart httpd\n</code></pre></li> <li>If the PHP-FPM service is running (instead of <code>mod_php</code>), restart it as well, although the <code>php-apache</code> package suggests you are using <code>mod_php</code>.     <pre><code># sudo systemctl restart php-fpm  # (Optional, only if using PHP-FPM)\n</code></pre></li> </ol>"},{"location":"DevNotes/phpMyAdmin/#5-access-phpmyadmin","title":"5. Access phpMyAdmin","text":"<p>Open your web browser and navigate to your server's address followed by the alias:</p> <p><code>http://localhost/phpmyadmin</code> (if on the same machine) or <code>http://your_server_ip/phpmyadmin</code></p> <p>You should see the phpMyAdmin login screen. Log in using your MariaDB/MySQL root user or another privileged database user.</p>"},{"location":"DevNotes/wp-backup-auto/","title":"WP Backup (Auto)","text":"<p>Yes, I'd be happy to show you how to automate your WordPress backups using a Bash script and Cron! \ud83e\udd16</p> <p>This setup runs silently in the background and saves your backups to the destination you already established (<code>~/wordpress-backups</code>).</p>"},{"location":"DevNotes/wp-backup-auto/#1-create-the-backup-script","title":"1. Create the Backup Script","text":"<p>First, we'll create a script file (e.g., <code>wp-backup.sh</code>) in your home directory or a dedicated scripts folder.</p>"},{"location":"DevNotes/wp-backup-auto/#the-script-wp-backupsh","title":"The Script (<code>~/wp-backup.sh</code>):","text":"<pre><code>#!/bin/bash\n\n# Configuration\nBACKUP_DIR=\"/home/YOUR_USER/wordpress-backups\" # &lt;-- Update 'YOUR_USER'\nWORDPRESS_DIR=\"/srv/http/wordpress\"\nDATABASE_NAME=\"wordpress\"                      # &lt;-- Update if needed\nDB_USER=\"root\"\nDATE=$(date +%F)\n\n# 1. Create the backup directory if it doesn't exist\nmkdir -p $BACKUP_DIR\n\n# 2. Export the Database\n# NOTE: This will prompt you for the DB root password when run manually.\n# For cron, we'll use a .my.cnf file (see Step 3)\nmysqldump -u $DB_USER -p $DATABASE_NAME &gt; $BACKUP_DIR/db-$DATE.sql\n\n# 3. Copy WordPress Files\ncp -r $WORDPRESS_DIR $BACKUP_DIR/site-$DATE\n\n# 4. Clean up old backups (optional but recommended)\n# This keeps the last 7 daily backups\nfind $BACKUP_DIR -type d -name \"site-*\" -mtime +7 -exec rm -rf {} \\;\nfind $BACKUP_DIR -type f -name \"db-*.sql\" -mtime +7 -delete\n\necho \"WordPress backup completed for $DATE.\"\n</code></pre>"},{"location":"DevNotes/wp-backup-auto/#make-it-executable","title":"Make it Executable:","text":"<p>Save the content above and make the script runnable:</p> <pre><code>chmod +x ~/wp-backup.sh\n</code></pre>"},{"location":"DevNotes/wp-backup-auto/#2-set-up-passwordless-database-access","title":"2. Set Up Passwordless Database Access","text":"<p>For the script to run automatically via Cron, it cannot prompt for the MySQL password. The safest way to handle this is using a MySQL configuration file (<code>.my.cnf</code>).</p> <ol> <li> <p>Create/Edit the file:</p> <pre><code>nano ~/.my.cnf\n</code></pre> </li> <li> <p>Add the credentials:</p> <pre><code>[mysqldump]\nuser=root\npassword=YOUR_MYSQL_ROOT_PASSWORD # &lt;-- Put your actual password here!\n\n[mysql]\nuser=root\npassword=YOUR_MYSQL_ROOT_PASSWORD # &lt;-- Put your actual password here!\n</code></pre> </li> <li> <p>Secure the file: This file contains a plain-text password, so restrict access immediately:</p> <pre><code>chmod 600 ~/.my.cnf\n</code></pre> </li> </ol>"},{"location":"DevNotes/wp-backup-auto/#3-schedule-the-backup-with-cron","title":"3. Schedule the Backup with Cron","text":"<p>Cron is a job scheduler that runs commands at specified times. We'll use it to run the script daily.</p> <ol> <li> <p>Open the crontab editor:</p> <pre><code>crontab -e\n</code></pre> </li> <li> <p>Add the job: Paste this line at the bottom. It schedules the script to run every day at 3:00 AM.</p> <pre><code># m h dom mon dow command\n0 3 * * * /home/YOUR_USER/wp-backup.sh # &lt;-- Update 'YOUR_USER'\n</code></pre> <ul> <li><code>0</code>: Minute (0)</li> <li><code>3</code>: Hour (3 AM)</li> <li><code>*</code>: Day of the month (Every day)</li> <li><code>*</code>: Month (Every month)</li> <li><code>*</code>: Day of the week (Every day)</li> </ul> </li> </ol> <p>The backups will now run automatically! You can check the <code>~/wordpress-backups/</code> directory the next morning.</p>"},{"location":"DevNotes/wp-backup-compressed/","title":"\ud83e\udde9 WordPress Local Backup Guide (For Arch Linux / LAMP Setup)","text":"<p>This guide helps you automatically back up your local WordPress site (files + database) to your home directory, using compression for efficiency.</p>"},{"location":"DevNotes/wp-backup-compressed/#step-1-create-the-backup-folder","title":"\ud83e\udea3 Step 1: Create the Backup Folder","text":"<pre><code>mkdir -p ~/wordpress-backups\n</code></pre>"},{"location":"DevNotes/wp-backup-compressed/#step-2-create-the-backup-script","title":"\u2699\ufe0f Step 2: Create the Backup Script","text":"<p>Create and open the script file. Note that this script uses <code>tar</code> compression by default.</p> <pre><code>nano ~/backup-wordpress.sh\n</code></pre> <p>Paste this content inside:</p> <pre><code>#!/bin/bash\n\n# === WordPress Local Backup Script (with compression) ===\n\n# Configuration\nWP_DIR=\"/srv/http/wordpress\"\nBACKUP_DIR=\"$HOME/wordpress-backups\"\nDB_NAME=\"wordpress\"           # Change if your database name is different\nDB_USER=\"root\"\nDB_PASS=\"your_mysql_password\" # Set your local MySQL password (if required)\n\n# === Timestamp and Destination ===\nDATE=$(date +%F_%H-%M-%S)\nDEST_DIR=\"$BACKUP_DIR/backup-$DATE\"\nCOMPRESSED_FILENAME=\"wordpress-files.tar.gz\"\n\n# === Create backup folder ===\necho \"Creating backup directory: $DEST_DIR\"\nmkdir -p \"$DEST_DIR\"\n\n# === Backup MySQL database ===\necho \"1/2 Backing up database ($DB_NAME)...\"\n# Note: For passwordless local MySQL, you can omit -p\"$DB_PASS\"\nmysqldump -u \"$DB_USER\" -p\"$DB_PASS\" \"$DB_NAME\" &gt; \"$DEST_DIR/db.sql\"\n\n# === Backup and compress WordPress files ===\necho \"2/2 Compressing and backing up WordPress files...\"\n# The -C flag changes the directory before creating the archive, ensuring the archive only contains the 'wordpress' folder.\ntar -czf \"$DEST_DIR/$COMPRESSED_FILENAME\" -C \"$(dirname \"$WP_DIR\")\" \"$(basename \"$WP_DIR\")\"\n\n# === Optional: Delete backups older than 7 days ===\necho \"Cleaning up backups older than 7 days...\"\nfind \"$BACKUP_DIR\" -type d -mtime +7 -exec rm -rf {} \\;\n\necho \"\u2705 Backup completed successfully to: $DEST_DIR\"\n</code></pre>"},{"location":"DevNotes/wp-backup-compressed/#step-3-make-it-executable","title":"\ud83d\udd10 Step 3: Make It Executable","text":"<pre><code>chmod +x ~/backup-wordpress.sh\n</code></pre>"},{"location":"DevNotes/wp-backup-compressed/#step-4-run-it-manually","title":"\ud83d\ude80 Step 4: Run It Manually","text":"<p>Run the script anytime:</p> <pre><code>~/backup-wordpress.sh\n</code></pre> <p>This creates a new folder like:</p> <pre><code>~/wordpress-backups/backup-2025-10-04_12-20-15/\n</code></pre> <p>Containing:</p> <ul> <li><code>wordpress-files.tar.gz</code> \u2192 Your full WordPress directory (compressed)</li> <li><code>db.sql</code> \u2192 Your MySQL database dump</li> </ul>"},{"location":"DevNotes/wp-backup-compressed/#step-5-optional-automate-with-cron","title":"\u23f0 Step 5 (Optional): Automate with Cron","text":"<p>To back up every day at 2 AM, edit your crontab:</p> <pre><code>crontab -e\n</code></pre> <p>Add this line (ensure you replace <code>yourusername</code> with your actual username):</p> <pre><code>0 2 * * * /home/yourusername/backup-wordpress.sh\n</code></pre> <p>\u2705 Done! You now have a reliable, compressed local backup system.</p>"},{"location":"DevNotes/wp-backup/","title":"WP Backup (Manual)","text":"<p>This is an excellent and thorough manual backup procedure! It covers the two essential components: files and database. \u2705</p> <p>Here is a regeneration of the response, maintaining the structure and content while offering the next logical step:</p>"},{"location":"DevNotes/wp-backup/#manually-backing-up-your-wordpress-site","title":"\ud83d\udcbe Manually Backing Up Your WordPress Site","text":"<p>This method is reliable, especially for local development and testing. It ensures you have copies of both your file system and your database.</p>"},{"location":"DevNotes/wp-backup/#1-copy-wordpress-files","title":"\ud83d\uddc2\ufe0f 1. Copy WordPress Files","text":"<p>Your WordPress files are typically located in the webroot directory: <code>/srv/http/wordpress</code>.</p> <p>These files include:</p> <ul> <li>Core WordPress files</li> <li><code>wp-content</code> folder (containing themes, plugins, and media uploads)</li> <li><code>wp-config.php</code> (containing crucial database connection information)</li> </ul> <p>To create a dated backup:</p> <pre><code>cp -r /srv/http/wordpress ~/wordpress-backups/site-$(date +%F)\n</code></pre> <p>This command creates a complete file backup in your home directory, named like <code>~/wordpress-backups/site-2025-10-04</code>.</p> <p>Or</p> <p><pre><code>tar -czvf wordpress-files-$(date +%F).tar.gz /srv/http/wordpress\n</code></pre> This command creates a compressed file backup in your home directory, named like <code>~/wordpress-backups/site-2025-10-04.tar.gz</code>.</p>"},{"location":"DevNotes/wp-backup/#2-export-the-database","title":"\ud83d\uddc4\ufe0f 2. Export the Database","text":"<p>Your site's dynamic content (posts, pages, settings, users, etc.) is stored in a MySQL database.</p> <p>To back up the database:</p> <pre><code>mysqldump -u root -p wordpress &gt; ~/wordpress-backups/db-$(date +%F).sql\n</code></pre> <p>(Note: Replace <code>wordpress</code> with your actual database name if it is different.)</p>"},{"location":"DevNotes/wp-backup/#3-to-restore-later","title":"\u267b\ufe0f 3. To Restore Later","text":"<p>If your site encounters issues or you need to migrate it, you can restore using these backups:</p> <pre><code># Restore files\ncp -r ~/wordpress-backups/site-YYYY-MM-DD /srv/http/wordpress\n\n# Restore database\nmysql -u root -p wordpress &lt; ~/wordpress-backups/db-YYYY-MM-DD.sql\n</code></pre> <p>(Remember to substitute <code>YYYY-MM-DD</code> with the actual date of the backup you wish to restore.)</p>"},{"location":"DevNotes/wp-backup/#tip-automation","title":"\ud83e\udde0 Tip: Automation","text":"<p>You can significantly improve this process by automating the file copying and database export with a simple bash script that runs daily or weekly via cron. This makes backups effortless and consistent.</p> <p>Would you like me to show you how to make that automatic backup script?</p>"},{"location":"DevNotes/wp-database-cli/","title":"WP Database CLI","text":"<p>Creating the WordPress database on an Arch Linux LAMP stack (using Apache, MariaDB, and PHP) is done through the MariaDB console. Here's a step-by-step guide:</p>"},{"location":"DevNotes/wp-database-cli/#1-ensure-mariadb-service-is-running","title":"1. Ensure MariaDB Service is Running","text":"<p>Before you can create a database, the MariaDB service must be running.</p> <pre><code>sudo systemctl start mariadb\n</code></pre> <p>If you haven't secured your MariaDB installation, it's highly recommended to run the security script:</p> <pre><code>sudo mysql_secure_installation\n</code></pre>"},{"location":"DevNotes/wp-database-cli/#2-access-the-mariadb-console","title":"2. Access the MariaDB Console","text":"<p>Log into the MariaDB console as the root user. If you set a root password during the security installation, use the first command; otherwise, you might be able to use the second.</p> <pre><code>mysql -u root -p\n# You will be prompted for the MariaDB root password.\n</code></pre> <p>OR</p> <pre><code>sudo mariadb\n# This might work if your root user is authenticated via Unix socket.\n</code></pre>"},{"location":"DevNotes/wp-database-cli/#3-create-the-database","title":"3. Create the Database","text":"<p>Once you see the <code>MariaDB [(none)]&gt;</code> prompt, run the following command to create your dedicated database. We'll name it <code>wordpress_db</code>.</p> <pre><code>CREATE DATABASE wordpress_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre> <p>Note: <code>utf8mb4_unicode_ci</code> is the recommended character set and collation for modern WordPress installations.</p>"},{"location":"DevNotes/wp-database-cli/#4-create-a-dedicated-database-user","title":"4. Create a Dedicated Database User","text":"<p>It's a security best practice to create a dedicated user for your WordPress site instead of using the MariaDB root user. Replace <code>'wpuser'</code> and <code>'your_strong_password'</code> with your desired username and a strong password.</p> <pre><code>CREATE USER 'wpuser'@'localhost' IDENTIFIED BY 'your_strong_password';\n</code></pre>"},{"location":"DevNotes/wp-database-cli/#5-grant-privileges","title":"5. Grant Privileges","text":"<p>Now, grant the newly created user full privileges (read, write, etc.) on the new database.</p> <pre><code>GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wpuser'@'localhost';\n</code></pre>"},{"location":"DevNotes/wp-database-cli/#6-apply-changes-and-exit","title":"6. Apply Changes and Exit","text":"<p>Flush the privileges to ensure MariaDB reloads the permission tables, and then exit the console.</p> <pre><code>FLUSH PRIVILEGES;\nEXIT;\n</code></pre>"},{"location":"DevNotes/wp-database-cli/#summary-of-credentials","title":"Summary of Credentials","text":"<p>Keep these credentials handy, as you will need to enter them into the <code>wp-config.php</code> file for your WordPress installation:</p> Setting Value (Example) Database Name (<code>DB_NAME</code>) <code>wordpress_db</code> Database User (<code>DB_USER</code>) <code>wpuser</code> Database Password (<code>DB_PASSWORD</code>) <code>your_strong_password</code> Database Host (<code>DB_HOST</code>) <code>localhost</code>"},{"location":"DevNotes/wp-database/","title":"WP Database GUI","text":"<p>It sounds like you want to continue the installation process by creating the database WordPress needs. Here's a guide to creating the necessary database and user, assuming you are using a standard local server environment like XAMPP, MAMP, or a manually installed LAMP/WAMP stack.</p>"},{"location":"DevNotes/wp-database/#step-by-step-creating-the-wordpress-database","title":"Step-by-Step: Creating the WordPress Database","text":"<p>You will use a web interface called phpMyAdmin, which is included with most pre-built local server packages, to create and manage your database.</p>"},{"location":"DevNotes/wp-database/#1-access-phpmyadmin","title":"1. Access phpMyAdmin","text":"<ul> <li>Start your local server (Apache/Nginx and MySQL/MariaDB services).</li> <li>Open your web browser and navigate to the phpMyAdmin interface. This is typically one of the following addresses:<ul> <li><code>http://localhost/phpmyadmin</code></li> <li><code>http://127.0.0.1/phpmyadmin</code></li> <li>If using MAMP, you'll usually find a \"Tools\" or \"phpMyAdmin\" link on the MAMP start page.</li> </ul> </li> </ul>"},{"location":"DevNotes/wp-database/#2-create-the-database","title":"2. Create the Database","text":"<p>Once inside phpMyAdmin:</p> <ol> <li>Click the \"New\" button in the left sidebar, or click the \"Databases\" tab at the top.</li> <li>In the \"Create database\" field, enter a name for your database. We'll use <code>local_wordpress</code> for this example.</li> <li>Select a collation (encoding) like <code>utf8mb4_unicode_ci</code> for best international support.</li> <li>Click the \"Create\" button.</li> </ol> <p>The database is now created, but WordPress also needs credentials (a username and password) to access it.</p>"},{"location":"DevNotes/wp-database/#3-create-a-database-user-optional-but-recommended","title":"3. Create a Database User (Optional but Recommended)","text":"<p>For development, you can often use the default <code>root</code> user. However, creating a dedicated user is better practice:</p> <ol> <li>While in phpMyAdmin, click on the <code>local_wordpress</code> database you just created in the left sidebar.</li> <li>Click the \"Privileges\" tab at the top.</li> <li>Click \"Add user account\".</li> <li>Fill in the details:<ul> <li>User name: Choose a name like <code>wpuser</code>.</li> <li>Host name: Select <code>Local</code> or type <code>localhost</code>.</li> <li>Password: Create a strong password and confirm it.</li> </ul> </li> <li>Under \"Database privileges,\" check the box that says \"GRANT ALL PRIVILEGES\" on the database named <code>local_wordpress</code>.</li> <li>Click \"Go\" at the bottom right.</li> </ol>"},{"location":"DevNotes/wp-database/#4-update-the-wordpress-configuration","title":"4. Update the WordPress Configuration","text":"<p>After creating the database and user, you need to tell WordPress how to connect.</p> <ol> <li>Navigate to the folder where you placed your WordPress files (e.g., <code>/srv/http/wordpress</code>).</li> <li>Rename the file <code>wp-config-sample.php</code> to <code>wp-config.php</code>.</li> <li>Open <code>wp-config.php</code> in a text editor (like VS Code, Notepad++, or Atom).</li> <li>Find the following lines and update the values with your database credentials:</li> </ol> <pre><code>// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'local_wordpress' );\n\n/** MySQL database username */\ndefine( 'DB_USER', 'wpuser' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'YourStrongPasswordHere' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n</code></pre> <ol> <li>Save and close the <code>wp-config.php</code> file.</li> </ol> <p>Now you can proceed to the final step: running the web installation wizard by visiting <code>http://localhost/your-wordpress-folder/</code> in your browser.</p>"},{"location":"DevNotes/wp-restore/","title":"WP Restore","text":"<p>I can certainly give you the content of the restore guide as a plain response!</p> <p>Here is the complete WordPress Local Restore Guide:</p>"},{"location":"DevNotes/wp-restore/#wordpress-local-restore-guide-for-arch-linux-lamp-setup","title":"\ud83d\udee0\ufe0f WordPress Local Restore Guide (For Arch Linux / LAMP Setup)","text":"<p>This guide walks you through restoring your local WordPress site (files + database) from a backup created by the <code>backup-wordpress.sh</code> script.</p>"},{"location":"DevNotes/wp-restore/#important-prerequisites","title":"\u26a0\ufe0f Important Prerequisites","text":"<ol> <li> <p>Stop Apache: Ensure Apache/httpd is stopped so no PHP processes are running, preventing file-in-use errors:</p> <pre><code>sudo systemctl stop httpd\n</code></pre> </li> <li> <p>Ensure MySQL is running:</p> <pre><code>sudo systemctl start mysqld\n</code></pre> </li> </ol>"},{"location":"DevNotes/wp-restore/#step-1-locate-your-backup","title":"\ud83c\udfaf Step 1: Locate Your Backup","text":"<p>Find the full path to the backup folder you wish to restore. (Example: <code>~/wordpress-backups/backup-2025-10-04_12-20-15</code>)</p> <pre><code>BACKUP_PATH=\"/home/yourusername/wordpress-backups/backup-2025-10-04_12-20-15\"\n# Change the path above to your actual backup directory!\n</code></pre>"},{"location":"DevNotes/wp-restore/#step-2-restore-the-database","title":"\u2699\ufe0f Step 2: Restore the Database","text":"<p>We will drop the existing database and import the <code>db.sql</code> file from the backup.</p>"},{"location":"DevNotes/wp-restore/#a-define-variables","title":"A. Define Variables","text":"<pre><code>DB_NAME=\"wordpress\"\nDB_USER=\"root\"\nDB_PASS=\"your_mysql_password\" # Use the same password as in your backup script\nSQL_FILE=\"$BACKUP_PATH/db.sql\"\n</code></pre>"},{"location":"DevNotes/wp-restore/#b-drop-and-recreate-database","title":"B. Drop and Recreate Database","text":"<p>Access the MySQL shell to ensure a clean slate for the import.</p> <pre><code># Log into MySQL/MariaDB\nmysql -u \"$DB_USER\" -p\"$DB_PASS\"\n\n# In the MySQL shell, run the following three lines:\nDROP DATABASE IF EXISTS $DB_NAME;\nCREATE DATABASE $DB_NAME;\nexit\n</code></pre>"},{"location":"DevNotes/wp-restore/#c-import-data","title":"C. Import Data","text":"<p>Load the backed-up data into the fresh database.</p> <pre><code>echo \"Importing database data...\"\nmysql -u \"$DB_USER\" -p\"$DB_PASS\" \"$DB_NAME\" &lt; \"$SQL_FILE\"\necho \"\u2705 Database restored successfully.\"\n</code></pre>"},{"location":"DevNotes/wp-restore/#step-3-restore-the-files","title":"\ud83d\udcc2 Step 3: Restore the Files","text":"<p>This step assumes your WordPress root directory is <code>/srv/http/wordpress</code>. We delete the existing files and extract the compressed backup.</p>"},{"location":"DevNotes/wp-restore/#a-clean-current-wordpress-directory","title":"A. Clean Current WordPress Directory","text":"<pre><code>WP_DIR=\"/srv/http/wordpress\"\n\n# WARNING: This deletes the contents of your current WordPress directory!\necho \"Deleting current WordPress files in $WP_DIR...\"\nsudo rm -rf \"$WP_DIR\"/*\nsudo rm -rf \"$WP_DIR\"/.* 2&gt;/dev/null\n</code></pre>"},{"location":"DevNotes/wp-restore/#b-extract-backup-files","title":"B. Extract Backup Files","text":"<pre><code># The compressed file created by the backup script\nTAR_FILE=\"$BACKUP_PATH/wordpress-files.tar.gz\"\n\necho \"Extracting backup files to $WP_DIR...\"\n\n# The --strip-components=1 removes the top-level 'wordpress/' folder name during extraction.\nsudo tar -xzf \"$TAR_FILE\" -C \"$WP_DIR\" --strip-components=1\n\n# Correct permissions for the http user (necessary for Arch LAMP stacks)\nsudo chown -R http:http \"$WP_DIR\"\necho \"\u2705 Files restored and permissions set.\"\n</code></pre>"},{"location":"DevNotes/wp-restore/#step-4-restart-apache","title":"\ud83d\ude80 Step 4: Restart Apache","text":"<p>Bring your local site back online and test the restoration.</p> <pre><code>sudo systemctl start httpd\n</code></pre> <p>Your WordPress site should now be fully restored to the state of the chosen backup!</p>"},{"location":"HunterNotes/samplenote/","title":"Sample Note","text":""},{"location":"HunterNotes/samplenote/#welcome","title":"Welcome","text":""},{"location":"LinuxNotes/paclist/","title":"paclist","text":"<p>Name: alacritty Description: A cross-platform, GPU-accelerated terminal emulator  </p> <p>Name: android-tools Description: Android platform tools  </p> <p>Name: apache Description: A high performance Unix-based HTTP server  </p> <p>Name: audacity Description: A program that lets you manipulate digital audio waveforms  </p> <p>Name: autoconf Description: A GNU tool for automatically configuring source code  </p> <p>Name: automake Description: A GNU tool for automatically creating Makefiles  </p> <p>Name: base Description: Minimal package set to define a basic Arch Linux installation  </p> <p>Name: base-devel Description: Basic tools to build Arch Linux packages  </p> <p>Name: bat Description: Cat clone with syntax highlighting and git integration  </p> <p>Name: bison Description: The GNU general-purpose parser generator  </p> <p>Name: brave-bin Description: Web browser that blocks ads and trackers by default (binary release)  </p> <p>Name: breeze-icons Description: Breeze icon theme  </p> <p>Name: bspwm Description: Tiling window manager based on binary space partitioning  </p> <p>Name: chromium Description: A web browser built for speed, simplicity, and security  </p> <p>Name: cmatrix Description: A curses-based scrolling 'Matrix'-like screen  </p> <p>Name: code Description: The Open Source build of Visual Studio Code (vscode) editor  </p> <p>Name: code-features Description: Unblock some features in Code OSS  </p> <p>Name: dash Description: POSIX compliant shell that aims to be as small as possible  </p> <p>Name: efibootmgr Description: Linux user-space application to modify the EFI Boot Manager  </p> <p>Name: exo Description: Application library for the Xfce desktop environment  </p> <p>Name: expac Description: alpm data (pacman database) extraction utility  </p> <p>Name: fakeroot Description: Tool for simulating superuser privileges  </p> <p>Name: firefox Description: Fast, Private &amp; Safe Web Browser  </p> <p>Name: flameshot Description: Powerful yet simple to use screenshot software  </p> <p>Name: flex Description: A tool for generating text-scanning programs  </p> <p>Name: garcon Description: Freedesktop.org compliant menu library  </p> <p>Name: gcc Description: The GNU Compiler Collection - C and C++ frontends  </p> <p>Name: ghostwriter Description: Aesthetic, distraction-free Markdown editor  </p> <p>Name: gimp Description: GNU Image Manipulation Program  </p> <p>Name: git Description: the fast distributed version control system  </p> <p>Name: glow Description: Command-line markdown renderer  </p> <p>Name: gnome-keyring Description: Stores passwords and encryption keys  </p> <p>Name: gparted Description: A Partition Magic clone, frontend to GNU Parted  </p> <p>Name: gptfdisk Description: A text-mode partitioning tool that works on GUID Partition Table (GPT) disks  </p> <p>Name: grub Description: GNU GRand Unified Bootloader (2)  </p> <p>Name: gtk-theme-arc-gruvbox-git Description: A flat, grey gruvboxed theme with transparent elements for GTK 3, GTK 2 and gnome-shell. Latest commit from the master branch on Github.  </p> <p>Name: gvfs Description: Virtual filesystem implementation for GIO  </p> <p>Name: gvfs-mtp Description: Virtual filesystem implementation for GIO - MTP backend (Android, media player)  </p> <p>Name: htop Description: Interactive process viewer  </p> <p>Name: hugo Description: Fast and Flexible Static Site Generator in Go  </p> <p>Name: ibus Description: Intelligent input bus for Linux/Unix  </p> <p>Name: ibus-avro-git Description: Avro Phonetic Bangla typing for Linux  </p> <p>Name: ibus-m17n Description: M17N engine for IBus  </p> <p>Name: inkscape Description: Professional vector graphics editor  </p> <p>Name: kdenlive Description: A non-linear video editor for Linux using the MLT video framework  </p> <p>Name: keepassxc Description: Cross-platform community-driven port of Keepass password manager  </p> <p>Name: kitty Description: A modern, hackable, featureful, OpenGL-based terminal emulator  </p> <p>Name: lf-git Description: lf is a terminal file manager written in Go  </p> <p>Name: libreoffice-still Description: LibreOffice maintenance branch  </p> <p>Name: linux-firmware Description: Firmware files for Linux - Default set  </p> <p>Name: linux-lts Description: The LTS Linux kernel and modules  </p> <p>Name: linux-lts-headers Description: Headers and scripts for building modules for the LTS Linux kernel  </p> <p>Name: m4 Description: The GNU macro processor  </p> <p>Name: make Description: GNU make utility to maintain groups of programs  </p> <p>Name: man-db Description: A utility for reading man pages  </p> <p>Name: man-pages Description: Linux man pages  </p> <p>Name: mariadb Description: Fast SQL database server, derived from MySQL  </p> <p>Name: mediainfo Description: Supplies technical and tag information about media files (CLI interface)  </p> <p>Name: moreutils Description: A growing collection of the unix tools that nobody thought to write thirty years ago  </p> <p>Name: mousepad Description: Simple text editor for Xfce  </p> <p>Name: mpc Description: Minimalist command line interface to MPD  </p> <p>Name: mpd Description: Flexible, powerful, server-side application for playing music  </p> <p>Name: mpv Description: a free, open source, and cross-platform media player  </p> <p>Name: mugshot Description: User Management Utility for Linux  </p> <p>Name: mupdf Description: Lightweight PDF and XPS viewer  </p> <p>Name: mupdf-tools Description: Tools for Lightweight PDF and XPS viewer  </p> <p>Name: ncmpcpp Description: Featureful ncurses based MPD client inspired by ncmpc  </p> <p>Name: neofetch Description: A CLI system information tool written in BASH that supports displaying images.  </p> <p>Name: neovim Description: Fork of Vim aiming to improve user experience, plugins, and GUIs  </p> <p>Name: network-manager-applet Description: Applet for managing network connections  </p> <p>Name: networkmanager Description: Network connection manager and user applications  </p> <p>Name: nm-connection-editor Description: NetworkManager GUI connection editor and widgets  </p> <p>Name: nmap Description: Utility for network discovery and security auditing  </p> <p>Name: noto-fonts-emoji Description: Google Noto Color Emoji font  </p> <p>Name: npm Description: JavaScript package manager  </p> <p>Name: nsxiv Description: Neo (or New or Not) Simple (or Small or Suckless) X Image Viewer  </p> <p>Name: obs-studio Description: Free, open source software for live streaming and recording  </p> <p>Name: ollama Description: Create, run and share large language models (LLMs)  </p> <p>Name: openshot Description: An award-winning free and open-source video editor  </p> <p>Name: pacman-contrib Description: Contributed scripts and tools for pacman systems  </p> <p>Name: parole Description: Modern media player based on the GStreamer framework  </p> <p>Name: patch Description: A utility to apply patch files to original sources  </p> <p>Name: pavucontrol Description: PulseAudio Volume Control  </p> <p>Name: php Description: A general-purpose scripting language that is especially suited to web development  </p> <p>Name: php-apache Description: Apache SAPI for PHP  </p> <p>Name: phpmyadmin Description: PHP web-based tool to administrate MySQL and MariaDB databases over the web  </p> <p>Name: pkgconf Description: Package compiler and linker metadata toolkit  </p> <p>Name: polybar Description: A fast and easy-to-use status bar  </p> <p>Name: pulseaudio Description: A featureful, general-purpose sound server  </p> <p>Name: pulsemixer Description: CLI and curses mixer for pulseaudio  </p> <p>Name: python-ipykernel Description: The ipython kernel for Jupyter  </p> <p>Name: python-pip Description: The PyPA recommended tool for installing Python packages  </p> <p>Name: reflector Description: A Python 3 module and script to retrieve and filter the latest Pacman mirror list.  </p> <p>Name: retext Description: A simple editor for Markdown and ReStructuredText markup languages  </p> <p>Name: ristretto Description: A fast and lightweight picture viewer for Xfce  </p> <p>Name: rsync Description: A fast and versatile file copying tool for remote and local files  </p> <p>Name: rxvt-unicode Description: Unicode enabled rxvt-clone terminal emulator (urxvt)  </p> <p>Name: sudo Description: Give certain users the ability to run some commands as root  </p> <p>Name: sxhkd Description: Simple X hotkey daemon  </p> <p>Name: sxiv Description: Simple X Image Viewer  </p> <p>Name: telegram-desktop Description: Official Telegram Desktop client  </p> <p>Name: terminus-font Description: Monospace bitmap font (for X11 and console)  </p> <p>Name: texinfo Description: GNU documentation system for on-line information and printed output  </p> <p>Name: thunar Description: Modern, fast and easy-to-use file manager for Xfce  </p> <p>Name: thunar-archive-plugin Description: Adds archive operations to the Thunar file context menus  </p> <p>Name: thunar-media-tags-plugin Description: Adds special features for media files to the Thunar File Manager  </p> <p>Name: thunar-volman Description: Automatic management of removable drives and media for Thunar  </p> <p>Name: tumbler Description: Thumbnail service implementing the thumbnail management D-Bus specification  </p> <p>Name: ueberzugpp Description: Command line utility which allows to display images in the terminal, written in C++  </p> <p>Name: unclutter Description: A small program for hiding the mouse cursor  </p> <p>Name: unrar Description: The RAR uncompression program  </p> <p>Name: unzip Description: For extracting and viewing files in .zip archives  </p> <p>Name: virtualbox Description: Powerful x86 virtualization for enterprise as well as home use  </p> <p>Name: wget Description: Network utility to retrieve files from the web  </p> <p>Name: xarchiver Description: GTK+ frontend to various command line archivers  </p> <p>Name: xbindkeys Description: Launch shell commands with your keyboard or your mouse under X  </p> <p>Name: xdotool Description: Command-line X11 automation tool  </p> <p>Name: xfburn Description: A simple CD/DVD burning tool based on libburnia libraries  </p> <p>Name: xfce4-appfinder Description: Application launcher and finder  </p> <p>Name: xfce4-artwork Description: Backdrops for the Xfce4 desktop  </p> <p>Name: xfce4-battery-plugin Description: A battery monitor plugin for the Xfce panel  </p> <p>Name: xfce4-clipman-plugin Description: A clipboard plugin for the Xfce4 panel  </p> <p>Name: xfce4-cpufreq-plugin Description: CPU frequency and governor plugin for the Xfce4 panel  </p> <p>Name: xfce4-cpugraph-plugin Description: Graphical representation of the CPU load  </p> <p>Name: xfce4-datetime-plugin Description: A date and time display plugin for the Xfce panel  </p> <p>Name: xfce4-dict Description: A dictionary plugin for the Xfce panel  </p> <p>Name: xfce4-diskperf-plugin Description: Displays instant disk/partition performance in the Xfce4 panel  </p> <p>Name: xfce4-eyes-plugin Description: A rolling eyes (following mouse pointer) plugin for the Xfce panel  </p> <p>Name: xfce4-fsguard-plugin Description: File system usage monitor plugin for the Xfce4 panel  </p> <p>Name: xfce4-genmon-plugin Description: plugin that monitors customizable programs stdout for the Xfce4 panel  </p> <p>Name: xfce4-mailwatch-plugin Description: Multi-protocol, multi-mailbox mail watcher for the Xfce4 panel  </p> <p>Name: xfce4-mount-plugin Description: Mount/umount utility for the Xfce4 panel  </p> <p>Name: xfce4-mpc-plugin Description: Control the Music Player Daemon from the Xfce4 panel  </p> <p>Name: xfce4-netload-plugin Description: A netload plugin for the Xfce panel  </p> <p>Name: xfce4-notes-plugin Description: Notes plugin for the Xfce panel  </p> <p>Name: xfce4-notifyd Description: Notification daemon for the Xfce desktop  </p> <p>Name: xfce4-panel Description: Panel for the Xfce desktop environment  </p> <p>Name: xfce4-power-manager Description: Power Manager for Xfce  </p> <p>Name: xfce4-pulseaudio-plugin Description: Pulseaudio plugin for the Xfce4 panel  </p> <p>Name: xfce4-screensaver Description: Xfce Screensaver  </p> <p>Name: xfce4-screenshooter Description: An application to take screenshots  </p> <p>Name: xfce4-sensors-plugin Description: Sensors plugin for the Xfce panel  </p> <p>Name: xfce4-session Description: Xfce's session manager  </p> <p>Name: xfce4-settings Description: Xfce's Configuration System  </p> <p>Name: xfce4-smartbookmark-plugin Description: Allows you to send requests directly to your browser and perform a custom search  </p> <p>Name: xfce4-systemload-plugin Description: System load plugin for the Xfce panel  </p> <p>Name: xfce4-taskmanager Description: Easy to use task manager  </p> <p>Name: xfce4-terminal Description: A modern terminal emulator primarily for the Xfce desktop environment  </p> <p>Name: xfce4-time-out-plugin Description: Take a break from your computer with this plugin for Xfce4  </p> <p>Name: xfce4-timer-plugin Description: Plugin to track time for the Xfce4 panel  </p> <p>Name: xfce4-verve-plugin Description: Command line plugin for the Xfce panel  </p> <p>Name: xfce4-wavelan-plugin Description: Plugin to monitor wifi connectivity for the Xfce4 panel  </p> <p>Name: xfce4-weather-plugin Description: A weather plugin for the Xfce4 panel  </p> <p>Name: xfce4-whiskermenu-plugin Description: Menu for Xfce4  </p> <p>Name: xfce4-xkb-plugin Description: Plugin to switch keyboard layouts for the Xfce4 panel  </p> <p>Name: xfconf Description: D-Bus-based configuration storage system  </p> <p>Name: xfdesktop Description: Xfce's desktop manager  </p> <p>Name: xfwm4 Description: Xfce's window manager  </p> <p>Name: xfwm4-themes Description: A set of additional themes for the Xfce window manager  </p> <p>Name: xorg-server Description: Xorg X server  </p> <p>Name: xorg-xkill Description: Kill a client by its X resource  </p> <p>Name: xorg-xwininfo Description: Command-line utility to print information about windows on an X server  </p> <p>Name: xwallpaper Description: Wallpaper setting utility for X  </p> <p>Name: yay Description: Yet another yogurt. Pacman wrapper and AUR helper written in go.  </p> <p>Name: youtube-dl Description: A command-line program to download videos from YouTube.com and a few more sites  </p> <p>Name: yt-dlg Description: A cross platform front-end GUI of the popular yt-dlp written in wxPython (maintained fork of youtube-dl-gui)  </p> <p>Name: yt-dlp Description: A youtube-dl fork with additional features and fixes  </p> <p>Name: zathura Description: Minimalistic document viewer  </p> <p>Name: zathura-pdf-mupdf Description: PDF support for Zathura (MuPDF backend) (Supports PDF, ePub, and OpenXPS)  </p> <p>Name: zip Description: Compressor/archiver for creating and modifying zipfiles  </p> <p>Name: zsh Description: A very advanced and programmable command interpreter (shell) for UNIX  </p> <p>Name: zsh-fast-syntax-highlighting-git Description: Optimized and extended zsh-syntax-highlighting  </p>"},{"location":"OtherNotes/samplenote/","title":"Sample Note","text":""},{"location":"OtherNotes/samplenote/#welcome","title":"Welcome","text":""},{"location":"SSGNotes/astro/","title":"Astro","text":"<p>Setting up an Astro site with Netlify provides a high-performance publishing workflow. Astro's default configuration is highly optimized for Netlify, making the deployment process simple.</p> <p>Here is a detailed, step-by-step guide covering installation, custom components, static assets, and deployment.</p>"},{"location":"SSGNotes/astro/#1-local-astro-setup-and-project-initialization","title":"1. Local Astro Setup and Project Initialization","text":"<p>Astro is a Node.js-based framework, so you'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/astro/#11-create-and-initialize-the-project","title":"1.1. Create and Initialize the Project","text":"<p>Astro provides a helpful command-line wizard (<code>create astro</code>) to set up a new project quickly.</p> <ol> <li> <p>Create the site using npm:</p> <pre><code>npm create astro@latest\n</code></pre> </li> <li> <p>Follow the setup wizard:</p> <ul> <li>Where should we create your new project? <code>my-astro-site</code> (or your preferred name)</li> <li>How would you like to start your new project? \"Just the basics (Recommended)\"</li> <li>Would you like to install npm dependencies? Yes</li> <li>Would you like to initialize a new Git repository? Yes</li> <li>How would you like to setup TypeScript? \"Strict\" (or your preference)</li> </ul> </li> <li> <p>Navigate into the new directory:</p> <pre><code>cd my-astro-site\n</code></pre> </li> </ol>"},{"location":"SSGNotes/astro/#12-local-test","title":"1.2. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>npm run dev\n</code></pre> <p>Your site will be running at <code>http://localhost:4321/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/astro/#2-custom-layouts-components-and-assets","title":"2. Custom Layouts, Components, and Assets","text":"<p>Astro uses a component-based structure where <code>.astro</code> files act as both templates and reusable partials.</p>"},{"location":"SSGNotes/astro/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-astro-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 public/                  # Static assets copied directly to the final output (dist/)\n\u2502   \u251c\u2500\u2500 favicon.svg\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u2514\u2500\u2500 style.css        # Custom, unbundled CSS\n\u2502   \u2514\u2500\u2500 images/\n\u251c\u2500\u2500 src/                     # All source code, components, layouts, and pages\n\u2502   \u251c\u2500\u2500 components/          # Reusable UI components (.astro, .jsx, .vue, etc.)\n\u2502   \u2502   \u251c\u2500\u2500 Footer.astro     # Site footer partial/component\n\u2502   \u2502   \u2514\u2500\u2500 Header.astro     # Site header/navigation partial/component\n\u2502   \u251c\u2500\u2500 layouts/             # The main page wrappers (Layouts)\n\u2502   \u2502   \u2514\u2500\u2500 BaseLayout.astro # Primary site shell, defines HTML structure\n\u2502   \u251c\u2500\u2500 pages/               # Top-level pages (generates final HTML files)\n\u2502   \u2502   \u251c\u2500\u2500 index.astro      # The site homepage (/)\n\u2502   \u2502   \u2514\u2500\u2500 blog/\n\u2502   \u2502       \u2514\u2500\u2500 [slug].astro # Dynamic page for blog posts\n\u2502   \u2514\u2500\u2500 env.d.ts             # TypeScript environment file\n\u251c\u2500\u2500 astro.config.mjs         # Astro framework configuration\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u251c\u2500\u2500 package-lock.json        # Exact dependency versions\n\u2514\u2500\u2500 tsconfig.json            # TypeScript configuration\n</code></pre>"},{"location":"SSGNotes/astro/#22-create-the-custom-layout","title":"2.2. Create the Custom Layout","text":"<p>Astro layouts are reusable wrappers that define the page's HTML structure. They accept content via a <code>&lt;slot /&gt;</code>.</p> <ol> <li> <p>Create the Base Layout:</p> <ul> <li>File: <code>src/layouts/BaseLayout.astro</code></li> </ul> <pre><code>---\n// Component Script (Frontmatter)\nconst { title = 'My Astro Site', description = 'A description for my awesome site' } = Astro.props;\nimport Header from '../components/Header.astro';\nimport Footer from '../components/Footer.astro';\n---\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"description\" content={description} /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;{title}&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"/assets/style.css\"&gt; \n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;Header /&gt; \n        &lt;main&gt;\n            &lt;slot /&gt; {/* Page content is injected here */}\n        &lt;/main&gt;\n        &lt;Footer /&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/astro/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<p>Components are reusable elements and are typically stored in the <code>src/components/</code> folder.</p> <ol> <li>Create Component Directory: <pre><code>mkdir src/components\n</code></pre></li> <li>Create Header Component:<ul> <li>File: <code>src/components/Header.astro</code> <pre><code>&lt;header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"/blog/\"&gt;Blog&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n&lt;style&gt;\n    header { padding: 1em 0; border-bottom: 1px solid #ccc; }\n    nav a { margin-right: 1em; text-decoration: none; }\n&lt;/style&gt;\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>src/components/Footer.astro</code> <pre><code>&lt;footer&gt;\n    &lt;p&gt;&amp;copy; {new Date().getFullYear()} {Astro.site?.hostname || 'My Site'}&lt;/p&gt;\n&lt;/footer&gt;\n&lt;style&gt;\n    footer { margin-top: 2em; padding-top: 1em; border-top: 1px solid #ccc; text-align: center; }\n&lt;/style&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/astro/#24-apply-the-layout","title":"2.4. Apply the Layout","text":"<p>Update your pages to use the new layout.</p> <ol> <li>Update the Homepage:<ul> <li>Open <code>src/pages/index.astro</code> and replace its contents with:  <pre><code>---\nimport BaseLayout from '../layouts/BaseLayout.astro';\n---\n&lt;BaseLayout title=\"Astro Home Page\" description=\"This is the main page content\"&gt;\n    &lt;section&gt;\n        &lt;h1&gt;Welcome to Astro!&lt;/h1&gt;\n        &lt;p&gt;This page uses the custom BaseLayout.&lt;/p&gt;\n    &lt;/section&gt;\n&lt;/BaseLayout&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/astro/#25-manage-static-assets","title":"2.5. Manage Static Assets","text":"<p>Assets that do not need processing go into the <code>public/</code> folder. They are copied directly to the final build output's root.</p> <ol> <li>Create Assets Directory: <pre><code>mkdir -p public/assets\n</code></pre></li> <li>Add a Custom CSS File:<ul> <li>File: <code>public/assets/style.css</code></li> <li>Add some basic styling:  <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 1200px;\n    padding: 0 1em;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/astro/#26-final-local-check","title":"2.6. Final Local Check","text":"<p>Run the server again:</p> <pre><code>npm run dev\n</code></pre> <p>Verify that the <code>Header</code> and <code>Footer</code> components are included and the custom CSS is applied.</p>"},{"location":"SSGNotes/astro/#3-github-setup","title":"3. GitHub Setup","text":"<p>Since the <code>create astro</code> wizard initialized Git for you (Step 1.1), you just need to commit the changes and push to a remote repository.</p>"},{"location":"SSGNotes/astro/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The generated <code>.gitignore</code> file should already ignore the build output (<code>/dist/</code>) and Node modules (<code>/node_modules/</code>).</p>"},{"location":"SSGNotes/astro/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Astro site with custom components and layout\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-astro-netlify-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/astro/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Netlify will monitor your GitHub repository to automatically build and deploy your Astro site.</p>"},{"location":"SSGNotes/astro/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and authorize Netlify.</li> <li>Find and select your repository (<code>my-astro-netlify-site</code>).</li> </ol>"},{"location":"SSGNotes/astro/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is pre-configured for Astro and will usually auto-detect the following settings correctly.</p> Setting Value (Default for Astro) Note Branch to deploy <code>main</code> The main branch of your repository. Build command <code>npm run build</code> Runs the script defined in your <code>package.json</code>. Publish directory <code>dist</code> The default output folder defined by Astro."},{"location":"SSGNotes/astro/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies.</li> <li>Run the build command (<code>npm run build</code>).</li> <li>Publish the contents of the <code>dist</code> directory to the live web.</li> </ol> <p>Once deployed, your high-performance Astro site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/astro/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now fully automated:</p> <ol> <li>Make changes locally (edit <code>.astro</code> files, add content).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated homepage content and footer date\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, rebuilds the site, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/docsify/","title":"Docsify","text":"<p>Setting up a Docsify site with Netlify provides an extremely fast and simple way to publish documentation. Docsify generates your documentation on the fly from Markdown files, requiring almost no static build step, which simplifies deployment significantly.</p> <p>Here is a detailed, step-by-step guide for installation, customization, and continuous deployment.</p>"},{"location":"SSGNotes/docsify/#1-local-docsify-setup-and-project-initialization","title":"1. Local Docsify Setup and Project Initialization","text":"<p>Docsify is a Node.js-based tool. You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/docsify/#11-install-prerequisites-and-docsify-cli","title":"1.1. Install Prerequisites and Docsify CLI","text":"<ol> <li>Install Node.js (LTS version recommended).</li> <li>Install the Docsify CLI globally: <pre><code>npm install -g docsify-cli\n# OR: yarn global add docsify-cli\n</code></pre></li> </ol>"},{"location":"SSGNotes/docsify/#12-create-a-new-docsify-site","title":"1.2. Create a New Docsify Site","text":"<p>Use the Docsify CLI to quickly initialize a basic project.</p> <ol> <li>Initialize the project: <pre><code>docsify init ./my-docsify-site\n</code></pre></li> <li>Navigate into the new directory: <pre><code>cd my-docsify-site\n</code></pre> This command creates the core files: <code>index.html</code> (the main entry point), <code>README.md</code> (the homepage content), and <code>.nojekyll</code> (prevents GitHub Pages processing).</li> </ol>"},{"location":"SSGNotes/docsify/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>docsify serve\n</code></pre> <p>Your site will be running at <code>http://localhost:3000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/docsify/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Docsify's structure is minimal. Customization is handled primarily within the <code>index.html</code> file (the main layout) and through Markdown includes (Partials).</p>"},{"location":"SSGNotes/docsify/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-docsify-site/\n\u251c\u2500\u2500 docs/                    # (Optional) Subdirectory for Markdown content\n\u251c\u2500\u2500 .nojekyll                # Stops GitHub from building it as a Jekyll site\n\u251c\u2500\u2500 images/                  # Static assets (images, logos)\n\u2502   \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 index.html               # The main entry point (Layout/HTML shell)\n\u251c\u2500\u2500 README.md                # The site homepage content\n\u251c\u2500\u2500 _coverpage.md            # Content for the optional cover page\n\u251c\u2500\u2500 _sidebar.md              # Navigation partial (menu structure)\n\u2514\u2500\u2500 custom/                  # Custom CSS/JS assets\n    \u251c\u2500\u2500 custom.css           # Custom styles\n    \u2514\u2500\u2500 custom.js            # Custom scripts/plugins\n</code></pre>"},{"location":"SSGNotes/docsify/#22-customize-the-main-layout-indexhtml","title":"2.2. Customize the Main Layout (<code>index.html</code>)","text":"<p>The <code>index.html</code> file acts as the primary layout. It controls the site metadata, theme, and script injections.</p> <ol> <li> <p>Open <code>index.html</code> and locate the script block defining the global configuration object (<code>window.$docsify</code>).</p> </li> <li> <p>Add Configuration: Ensure your configuration is set up correctly for the navigation, themes, and custom assets.</p> <pre><code>&lt;script&gt;\n  window.$docsify = {\n    name: 'My Docsify Project',\n    repo: 'https://github.com/user/repo', // Optional, for GitHub link\n    loadSidebar: true, // Load _sidebar.md\n    // ... other configurations\n  }\n&lt;/script&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/docsify/#23-create-partials-_sidebarmd","title":"2.3. Create Partials (<code>_sidebar.md</code>)","text":"<p>The primary partial in Docsify is the navigation menu, controlled by <code>_sidebar.md</code>.</p> <ol> <li>Create the sidebar file: <pre><code>touch _sidebar.md\n</code></pre></li> <li>Define the Navigation Structure: (Uses standard Markdown linking)<ul> <li>File: <code>_sidebar.md</code> <pre><code>* [Home](/)\n* [Getting Started](/getting-started)\n* [API Reference](/api-reference)\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/docsify/#24-manage-static-assets-custom-cssjs","title":"2.4. Manage Static Assets (Custom CSS/JS)","text":"<p>Custom assets need to be linked directly in <code>index.html</code>.</p> <ol> <li> <p>Create the Custom Assets directory:</p> <pre><code>mkdir custom\n</code></pre> </li> <li> <p>Add Custom CSS:</p> <ul> <li>File: <code>custom/custom.css</code></li> <li>Add some basic styling:</li> </ul> <pre><code>:root {\n  --theme-color: #3f51b5; /* Example: changing the primary color */\n}\n.markdown-section h1 {\n  border-bottom: 2px solid var(--theme-color);\n  padding-bottom: 5px;\n}\n</code></pre> </li> <li> <p>Link the Custom CSS in <code>index.html</code>: Add a <code>&lt;link&gt;</code> tag within the <code>&lt;head&gt;</code> section of <code>index.html</code>.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"/custom/custom.css\"&gt; \n</code></pre> </li> </ol>"},{"location":"SSGNotes/docsify/#25-final-local-check","title":"2.5. Final Local Check","text":"<p>Run the server again:</p> <pre><code>docsify serve\n</code></pre> <p>Verify that the custom layout (if any), the sidebar, and the custom CSS are loading correctly.</p>"},{"location":"SSGNotes/docsify/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/docsify/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>Docsify doesn't generate a standard build folder, so the <code>.gitignore</code> can be minimal, ensuring only node modules are excluded.</p> <pre><code>touch .gitignore\necho \"/node_modules/\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"SSGNotes/docsify/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Docsify setup with custom styles and sidebar\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-docsify-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/docsify/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Because Docsify only uses static files and no complex build process, Netlify deployment is extremely simple.</p>"},{"location":"SSGNotes/docsify/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-docsify-netlify</code>).</li> </ol>"},{"location":"SSGNotes/docsify/#42-configure-build-settings-minimal","title":"4.2. Configure Build Settings (Minimal)","text":"<p>Since Docsify does not require a build step, the settings are minimal. We are only telling Netlify which folder contains the files to publish.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command (Leave Blank) No command needed since Docsify runs entirely on the client-side. Publish directory <code>.</code> (the project root) The root directory contains <code>index.html</code>, <code>README.md</code>, and all assets."},{"location":"SSGNotes/docsify/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Skip the build command.</li> <li>Publish the contents of the root directory (<code>.</code>).</li> </ol> <p>Your Docsify site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/docsify/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update content in Markdown files, edit the sidebar, or tweak <code>index.html</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated documentation content and added a section to the sidebar.\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push and instantly deploys the new static files.</li> </ol>"},{"location":"SSGNotes/docusaurus/","title":"Docusaurus","text":"<p>Setting up a Docusaurus site with Netlify is a perfect combination for deploying professional, documentation-focused websites. Docusaurus is a React-based static site generator that is highly optimized for documentation and easy to deploy.</p> <p>Here is a detailed, step-by-step guide covering installation, customization, and continuous deployment.</p>"},{"location":"SSGNotes/docusaurus/#1-local-docusaurus-setup-and-project-initialization","title":"1. Local Docusaurus Setup and Project Initialization","text":"<p>Docusaurus is a Node.js-based framework. You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/docusaurus/#11-create-a-new-docusaurus-project","title":"1.1. Create a New Docusaurus Project","text":"<p>Use the official setup command to initialize the project, which will include the necessary files and dependencies.</p> <ol> <li> <p>Create the site:</p> <pre><code>npx create-docusaurus@latest my-docusaurus-site classic\n</code></pre> <p>The <code>classic</code> template is recommended as it includes documentation, blog, and custom pages.</p> </li> <li> <p>Navigate into the new directory:</p> <pre><code>cd my-docusaurus-site\n</code></pre> </li> <li> <p>Install dependencies (if the command above didn't already):</p> <pre><code>npm install\n# OR: yarn install\n</code></pre> </li> </ol>"},{"location":"SSGNotes/docusaurus/#12-local-test","title":"1.2. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>npm run start\n# OR: yarn start\n</code></pre> <p>Your site will be running at <code>http://localhost:3000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/docusaurus/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Docusaurus uses React for its components and a clear folder structure for configuration and content.</p>"},{"location":"SSGNotes/docusaurus/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-docusaurus-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 build/                   # \u26a0\ufe0f Generated static site (Publish Directory for Netlify)\n\u251c\u2500\u2500 src/                     # Source files, including custom pages and components\n\u2502   \u251c\u2500\u2500 components/          # Reusable React components (Partials)\n\u2502   \u2502   \u2514\u2500\u2500 CustomFooter.js\n\u2502   \u2514\u2500\u2500 css/                 # Global styles\n\u2502       \u2514\u2500\u2500 custom.css\n\u251c\u2500\u2500 blog/                    # Markdown files for the blog feature\n\u251c\u2500\u2500 docs/                    # Markdown files for the documentation feature\n\u251c\u2500\u2500 static/                  # Static assets copied directly to the output root\n\u2502   \u251c\u2500\u2500 img/                 # Images, logos, favicon\n\u2502   \u2514\u2500\u2500 robots.txt\n\u251c\u2500\u2500 docusaurus.config.js     # Main site configuration (theme, title, navbar, footer)\n\u251c\u2500\u2500 sidebars.js              # Configuration for the documentation sidebar\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 package-lock.json\n</code></pre>"},{"location":"SSGNotes/docusaurus/#22-custom-layouts-swizzling","title":"2.2. Custom Layouts (Swizzling)","text":"<p>Docusaurus layouts are highly theme-driven. To customize a core component (like the Header or Footer, which are Partials), you use a technique called Swizzling to eject the component into your local project structure.</p> <ol> <li> <p>Swizzle the Footer Component: (We'll use the classic theme's <code>Footer</code> as an example partial)</p> <pre><code>npm run swizzle @docusaurus/theme-classic Footer\n</code></pre> </li> <li> <p>Locate the new component: This creates the file: <code>src/theme/Footer/index.js</code>.</p> </li> <li> <p>Customize the Footer: Edit this file to add your custom HTML or React components.</p> <p>Example change in <code>src/theme/Footer/index.js</code>:</p> <pre><code>// ... inside the Footer component's return statement ...\n&lt;footer&gt;\n  {/* Original Footer Links/Content */}\n  {/* ... */}\n  &lt;div style={{ textAlign: 'center', marginTop: '10px' }}&gt;\n    &lt;p&gt;Custom Docusaurus Partial Added!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/footer&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/docusaurus/#23-manage-static-assets-and-styles","title":"2.3. Manage Static Assets and Styles","text":"<ol> <li> <p>Global Styles:</p> <ul> <li>File: <code>src/css/custom.css</code> (Docusaurus uses this file by default).</li> <li>Add your site-wide CSS here (e.g., font definitions, color overrides).</li> </ul> </li> <li> <p>Static Assets:</p> <ul> <li>Place assets like your logo, favicon, or any files that should be served directly (not processed by Webpack) into the <code>static/</code> folder.</li> <li>Example: Place your logo at <code>static/img/logo.svg</code>.</li> </ul> </li> <li> <p>Use Static Assets in Configuration: Update <code>docusaurus.config.js</code> to point to your new logo.</p> <pre><code>// docusaurus.config.js\nnavbar: {\n    title: 'My Docusaurus Site',\n    logo: {\n        alt: 'My Site Logo',\n        src: 'img/logo.svg', // References the file in the static/ folder\n    },\n    // ...\n},\n</code></pre> </li> </ol>"},{"location":"SSGNotes/docusaurus/#24-final-local-check","title":"2.4. Final Local Check","text":"<p>Run the server again:</p> <pre><code>npm run start\n</code></pre> <p>Verify that the custom footer component, new logo, and global CSS are correctly applied.</p>"},{"location":"SSGNotes/docusaurus/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/docusaurus/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the built site and cache. Ensure it contains:</p> <pre><code># Docusaurus build and cache\n.docusaurus/\n/build/\n\n# Node dependencies\n/node_modules/\n</code></pre>"},{"location":"SSGNotes/docusaurus/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Docusaurus site with custom footer and config\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-docusaurus-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/docusaurus/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/docusaurus/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-docusaurus-netlify</code>).</li> </ol>"},{"location":"SSGNotes/docusaurus/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is optimized for Docusaurus and will usually auto-detect the correct settings.</p> Setting Value (Default for Docusaurus) Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>npm run build</code> Runs the script, which executes <code>docusaurus build</code>. Publish directory <code>build</code> The folder Docusaurus outputs the static files to."},{"location":"SSGNotes/docusaurus/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code and install dependencies.</li> <li>Run the build command (<code>npm run build</code>).</li> <li>Publish the contents of the <code>build</code> directory.</li> </ol> <p>Your Docusaurus documentation site will be live with continuous deployment.</p>"},{"location":"SSGNotes/docusaurus/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update Markdown files in <code>docs/</code> or <code>blog/</code>, edit components in <code>src/theme</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated README and documentation sidebar.\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Docusaurus build, and deploys the updated documentation live.</li> </ol>"},{"location":"SSGNotes/eleventy/","title":"Eleventy (11ty)","text":"<p>An Eleventy (11ty) site deployed with Netlify offers a fast, flexible, and efficient development workflow. Here is a detailed, step-by-step guide to setting it up from scratch, including custom layouts, partials, and asset management.</p>"},{"location":"SSGNotes/eleventy/#1-local-eleventy-setup-and-project-initialization","title":"1. Local Eleventy Setup and Project Initialization","text":"<p>Eleventy is a Node.js-based static site generator, so you'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/eleventy/#11-create-and-initialize-the-project","title":"1.1. Create and Initialize the Project","text":"<ol> <li>Create a directory and navigate into it: <pre><code>mkdir my-eleventy-site\ncd my-eleventy-site\n</code></pre></li> <li>Initialize a Node.js project: <pre><code>npm init -y\n</code></pre>     This creates the default <code>package.json</code> file.</li> <li>Install Eleventy: <pre><code>npm install @11ty/eleventy\n</code></pre></li> </ol>"},{"location":"SSGNotes/eleventy/#12-configure-scripts","title":"1.2. Configure Scripts","text":"<p>For convenience, add <code>start</code> and <code>build</code> scripts to your <code>package.json</code> file. Open the file and modify the <code>\"scripts\"</code> section:</p> <pre><code>  \"scripts\": {\n    \"start\": \"npx @11ty/eleventy --serve\",\n    \"build\": \"npx @11ty/eleventy\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n</code></pre>"},{"location":"SSGNotes/eleventy/#13-define-the-inputoutput-structure","title":"1.3. Define the Input/Output Structure","text":"<p>While Eleventy works with zero configuration, it's best practice to separate your source files. We'll tell Eleventy to look for source files in a <code>src</code> directory and output the built site to <code>public</code>.</p> <ol> <li>Create the configuration file: <pre><code>touch .eleventy.js\n</code></pre></li> <li>Add the following configuration to <code>.eleventy.js</code>: <pre><code>module.exports = function(eleventyConfig) {\n  // Set directories to pass through to the public folder\n  eleventyConfig.addPassthroughCopy(\"./src/assets/\");\n\n  return {\n    dir: {\n      input: \"src\", // Source files go here\n      includes: \"_includes\", // Layouts and partials go here\n      data: \"_data\", // Global data files go here\n      output: \"public\" // Built site goes here\n    }\n  };\n};\n</code></pre></li> <li>Create the source directory: <pre><code>mkdir src\n</code></pre></li> </ol>"},{"location":"SSGNotes/eleventy/#2-custom-layouts-partials-and-assets","title":"2. Custom Layouts, Partials, and Assets","text":"<p>This section outlines the directory structure and how to implement custom templating.</p>"},{"location":"SSGNotes/eleventy/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after completing this section, will look like this:</p> <pre><code>my-eleventy-site/\n\u251c\u2500\u2500 .eleventy.js             # Eleventy configuration (input, output, passthrough)\n\u251c\u2500\u2500 .gitignore               # Tells Git to ignore the built site (public/)\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u251c\u2500\u2500 package-lock.json        # Exact dependency versions\n\u251c\u2500\u2500 src/                     # All source templates, content, layouts, and data\n\u2502   \u251c\u2500\u2500 _includes/           # Layouts and Partials/Snippets (default setting)\n\u2502   \u2502   \u251c\u2500\u2500 base.njk         # The main HTML skeleton (base layout)\n\u2502   \u2502   \u251c\u2500\u2500 header.njk       # Reusable header partial\n\u2502   \u2502   \u2514\u2500\u2500 post.njk         # Layout for individual blog posts\n\u2502   \u251c\u2500\u2500 _data/               # Global data files (JSON, JS)\n\u2502   \u2502   \u2514\u2500\u2500 site.json        # Global site metadata (e.g., title)\n\u2502   \u251c\u2500\u2500 assets/              # Static assets copied directly to 'public/assets/'\n\u2502   \u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2502   \u2514\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 blog/                # Content folder (creates a 'blog' collection)\n\u2502   \u2502   \u251c\u2500\u2500 blog.json        # Directory data file (sets default layout for all files in 'blog/')\n\u2502   \u2502   \u2514\u2500\u2500 first-post.md    # Markdown content file\n\u2502   \u2514\u2500\u2500 index.md             # Site homepage content\n\u2514\u2500\u2500 public/                  # \u26a0\ufe0f Generated output folder (ignored by Git)\n</code></pre>"},{"location":"SSGNotes/eleventy/#22-create-the-layouts-directory-and-base-template","title":"2.2. Create the Layouts Directory and Base Template","text":"<p>Eleventy uses the <code>_includes</code> directory for both layouts and partials by default. We will use Nunjucks (<code>.njk</code>) as the template language.</p> <ol> <li>Create the Includes and Data directories: <pre><code>mkdir -p src/_includes src/_data\n</code></pre></li> <li>Create the Global Data file: This file stores variables accessible everywhere.<ul> <li>File: <code>src/_data/site.json</code> <pre><code>{\n  \"title\": \"My Eleventy Site\",\n  \"author\": \"The Dev\"\n}\n</code></pre></li> </ul> </li> <li>Create the Base Layout: This provides the core HTML structure.<ul> <li>File: <code>src/_includes/base.njk</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{ title }} | {{ site.title }}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% include \"header.njk\" %} &lt;main&gt;\n        {{ content | safe }} &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; {{ \"now\" | date: \"%Y\" }} {{ site.author }}&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Note: <code>{{ content | safe }}</code> is required to output rendered Markdown/HTML safely.</li> </ul> </li> </ol>"},{"location":"SSGNotes/eleventy/#23-create-partials-includes","title":"2.3. Create Partials (Includes)","text":"<p>Partials are reusable components included with the <code>{% include \"filename.njk\" %}</code> tag.</p> <ol> <li>Create Header Partial:<ul> <li>File: <code>src/_includes/header.njk</code> <pre><code>&lt;header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"/blog/\"&gt;Blog&lt;/a&gt;\n        &lt;h1&gt;{{ site.title }}&lt;/h1&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/eleventy/#24-create-content-and-layout-chain","title":"2.4. Create Content and Layout Chain","text":"<p>We'll set a default layout for all content in the <code>blog</code> folder using a Directory Data File.</p> <ol> <li>Create the Blog Content and Data Directories: <pre><code>mkdir src/blog\n</code></pre></li> <li>Create the Post Layout: This layout will chain to the <code>base.njk</code> layout.<ul> <li>File: <code>src/_includes/post.njk</code> <pre><code>---\nlayout: base.njk\n---\n&lt;article&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    &lt;p&gt;Published: {{ date | date: \"%B %d, %Y\" }}&lt;/p&gt;\n    {{ content | safe }}\n&lt;/article&gt;\n</code></pre></li> </ul> </li> <li>Set the Default Layout for the Blog Folder: This avoids repeating <code>layout: post.njk</code> in every post's front matter.<ul> <li>File: <code>src/blog/blog.json</code> <pre><code>{\n  \"layout\": \"post.njk\"\n}\n</code></pre></li> </ul> </li> <li>Create Sample Content:<ul> <li>File: <code>src/blog/first-post.md</code> <pre><code>---\ntitle: My First Eleventy Post\ndate: 2025-10-15\ntags: posts\n---\nThis is the content of my first post. It automatically uses the `post.njk` layout thanks to `blog.json`.\n</code></pre></li> </ul> </li> <li>Create the Homepage:<ul> <li>File: <code>src/index.md</code> <pre><code>---\ntitle: Welcome\nlayout: base.njk\n---\n## Hello World!\n\nThis is the homepage of my new Eleventy site.\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/eleventy/#25-manage-static-assets-passthrough-copy","title":"2.5. Manage Static Assets (Passthrough Copy)","text":"<p>Assets like CSS and images are copied directly to the output folder using the <code>addPassthroughCopy</code> function we added to <code>.eleventy.js</code> in step 1.3.</p> <ol> <li>Create Assets Directory: <pre><code>mkdir -p src/assets/css src/assets/images\n</code></pre></li> <li>Add a Custom CSS File:<ul> <li>File: <code>src/assets/css/style.css</code> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 960px;\n    padding: 20px;\n}\nh1 {\n    color: #333;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/eleventy/#26-local-test","title":"2.6. Local Test","text":"<p>Run the development server to see your custom setup:</p> <pre><code>npm start\n</code></pre> <p>Your site will be running at <code>http://localhost:8080/</code>.</p>"},{"location":"SSGNotes/eleventy/#3-github-setup","title":"3. GitHub Setup","text":"<p>Prepare the project for version control and Netlify continuous deployment.</p>"},{"location":"SSGNotes/eleventy/#31-create-gitignore","title":"3.1. Create <code>.gitignore</code>","text":"<p>Prevent the large generated output folder and Node modules from being committed.</p> <pre><code>touch .gitignore\necho \"/node_modules/\" &gt;&gt; .gitignore\necho \"/public/\" &gt;&gt; .gitignore\n</code></pre> <p>Note: We ignore <code>/public/</code> because Netlify will generate it for us.</p>"},{"location":"SSGNotes/eleventy/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Eleventy setup with custom layouts and Netlify config\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-eleventy-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/eleventy/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/eleventy/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and authorize Netlify.</li> <li>Find and select your repository (<code>my-eleventy-site</code>).</li> </ol>"},{"location":"SSGNotes/eleventy/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify's automatic framework detection is excellent, but we can be explicit based on our custom setup.</p> Setting Value Note Branch to deploy <code>main</code> The main branch of your repository. Build command <code>npm run build</code> Runs the custom build script defined in <code>package.json</code>. Publish directory <code>public</code> The custom output folder defined in <code>.eleventy.js</code>."},{"location":"SSGNotes/eleventy/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies (<code>npm install</code>).</li> <li>Run the build command (<code>npm run build</code>), which executes Eleventy.</li> <li>Publish the contents of the <code>public</code> directory to the live web.</li> </ol> <p>Once the deployment completes, your live Eleventy site will be available at a temporary Netlify URL.</p>"},{"location":"SSGNotes/eleventy/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (add new content, edit layouts, update CSS).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added blog post and fixed header alignment\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the build process, and deploys your changes live! \ud83c\udf89</li> </ol>"},{"location":"SSGNotes/gatsby/","title":"Gatsby","text":"<p>Setting up a Gatsby site with Netlify is a standard and powerful combination for creating high-performance Jamstack websites. This guide covers the complete process, from initial installation to continuous deployment.</p>"},{"location":"SSGNotes/gatsby/#1-local-gatsby-setup-and-project-initialization","title":"1. Local Gatsby Setup and Project Initialization","text":"<p>Gatsby is a React-based framework that requires Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/gatsby/#11-install-the-gatsby-cli","title":"1.1. Install the Gatsby CLI","text":"<p>The Gatsby Command Line Interface (CLI) is the easiest way to create and manage Gatsby projects.</p> <ol> <li>Install Node.js (version 18+ recommended).</li> <li>Install the Gatsby CLI globally: <pre><code>npm install -g gatsby-cli\n</code></pre></li> </ol>"},{"location":"SSGNotes/gatsby/#12-create-a-new-gatsby-site","title":"1.2. Create a New Gatsby Site","text":"<p>We will use the default Gatsby starter template for a clean start.</p> <ol> <li>Create the site: <pre><code>gatsby new my-gatsby-site https://github.com/gatsbyjs/gatsby-starter-minimal\ncd my-gatsby-site\n</code></pre> Note: The minimal starter provides a blank slate, ideal for custom development.</li> </ol>"},{"location":"SSGNotes/gatsby/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to check the basic setup.</p> <pre><code>npm run develop\n</code></pre> <p>Your site will be running at <code>http://localhost:8000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/gatsby/#2-custom-layouts-components-and-assets","title":"2. Custom Layouts, Components, and Assets","text":"<p>Gatsby uses React components for templating. Pages are built from Layout Components that wrap UI Components (Partials).</p>"},{"location":"SSGNotes/gatsby/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-gatsby-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 public/                  # \u26a0\ufe0f Generated output folder (ignored by Git)\n\u251c\u2500\u2500 src/                     # All source code, components, layouts, and pages\n\u2502   \u251c\u2500\u2500 components/          # Reusable UI components (partials)\n\u2502   \u2502   \u251c\u2500\u2500 Footer.js        # Site footer component\n\u2502   \u2502   \u2514\u2500\u2500 Header.js        # Site header/navigation component\n\u2502   \u251c\u2500\u2500 pages/               # Top-level pages (creates site routes)\n\u2502   \u2502   \u251c\u2500\u2500 404.js           # Not Found page\n\u2502   \u2502   \u2514\u2500\u2500 index.js         # Site homepage (/)\n\u2502   \u2514\u2500\u2500 templates/           # Reusable page wrappers (Layouts)\n\u2502       \u2514\u2500\u2500 Layout.js        # Primary site shell, wraps all content\n\u251c\u2500\u2500 static/                  # Static assets copied directly to the final output (public/)\n\u2502   \u2514\u2500\u2500 css/\n\u2502       \u2514\u2500\u2500 style.css        # Custom CSS file\n\u251c\u2500\u2500 gatsby-config.js         # Main site configuration (plugins, metadata)\n\u251c\u2500\u2500 gatsby-node.js           # API for programmatically creating pages (e.g., blog posts)\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 package-lock.json\n</code></pre>"},{"location":"SSGNotes/gatsby/#22-create-the-layout-component","title":"2.2. Create the Layout Component","text":"<p>The Layout component serves as the wrapper for most or all pages, defining the common structural elements (header, footer, shared styling).</p> <ol> <li>Create the Components and Templates directories: <pre><code>mkdir -p src/components src/templates\n</code></pre></li> <li>Create the Main Layout:<ul> <li>File: <code>src/templates/Layout.js</code> <pre><code>import React from \"react\"\nimport Header from \"../components/Header\"\nimport Footer from \"../components/Footer\"\n\nconst Layout = ({ children }) =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;main&gt;{children}&lt;/main&gt; {/* Page content is injected via 'children' prop */}\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default Layout\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/gatsby/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<p>Components are reusable UI elements imported into the Layout.</p> <ol> <li>Create Header Component:<ul> <li>File: <code>src/components/Header.js</code> <pre><code>import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Header = () =&gt; (\n  &lt;header style={{ borderBottom: '1px solid #ccc', padding: '10px 0' }}&gt;\n    &lt;nav&gt;\n      &lt;Link to=\"/\" style={{ marginRight: '15px' }}&gt;Home&lt;/Link&gt;\n      &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n)\n\nexport default Header\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>src/components/Footer.js</code> <pre><code>import React from \"react\"\n\nconst Footer = () =&gt; (\n  &lt;footer style={{ marginTop: '50px', paddingTop: '20px', borderTop: '1px solid #ccc', textAlign: 'center' }}&gt;\n    &lt;p&gt;&amp;copy; {new Date().getFullYear()} My Gatsby Site&lt;/p&gt;\n  &lt;/footer&gt;\n)\n\nexport default Footer\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/gatsby/#24-apply-the-layout","title":"2.4. Apply the Layout","text":"<p>Update your page components to use the new layout.</p> <ol> <li>Update the Homepage:<ul> <li>Open <code>src/pages/index.js</code> and replace its contents with:  <pre><code>import React from \"react\"\nimport Layout from \"../templates/Layout\" // Import the custom layout\n\nconst IndexPage = () =&gt; (\n  &lt;Layout&gt;\n    &lt;title&gt;Home Page&lt;/title&gt;\n    &lt;h1&gt;Welcome to Gatsby!&lt;/h1&gt;\n    &lt;p&gt;This is the content wrapped by the custom Layout component.&lt;/p&gt;\n  &lt;/Layout&gt;\n)\n\nexport default IndexPage\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/gatsby/#25-manage-static-assets","title":"2.5. Manage Static Assets","text":"<p>Assets in the <code>static/</code> folder are copied directly to the root of the output directory during the build. This is ideal for global CSS, fonts, and favicon files.</p> <ol> <li> <p>Create the Static directory:</p> <pre><code>mkdir -p static/css\n</code></pre> </li> <li> <p>Add a Custom CSS File:</p> <ul> <li>File: <code>static/css/style.css</code></li> <li>Add some basic styling:</li> </ul> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 1200px;\n    padding: 20px;\n}\n/* Simple global reset */\n* {\n    box-sizing: border-box;\n}\n</code></pre> </li> <li> <p>Link the CSS: Add a <code>&lt;link&gt;</code> tag to the page header. Since Gatsby is a React app, the best way to inject global CSS is often in a file like <code>src/templates/Layout.js</code> by using the Gatsby <code>Helmet</code> or simply a <code>&lt;link&gt;</code> tag directly within the head of the layout component (or a dedicated component imported into the layout).</p> <p>For simplicity, add this line at the very top of <code>src/templates/Layout.js</code>:</p> <pre><code>// src/templates/Layout.js\nimport React from \"react\"\nimport Header from \"../components/Header\"\nimport Footer from \"../components/Footer\"\n\n// Import the global CSS file which Gatsby handles correctly\nimport \"../../static/css/style.css\" \n\nconst Layout = ({ children }) =&gt; {\n// ... rest of the component\n</code></pre> </li> </ol>"},{"location":"SSGNotes/gatsby/#26-final-local-check","title":"2.6. Final Local Check","text":"<p>Run the server again:</p> <pre><code>npm run develop\n</code></pre> <p>Verify that the components, layout, and global CSS are loading correctly.</p>"},{"location":"SSGNotes/gatsby/#3-github-setup","title":"3. GitHub Setup","text":"<p>Prepare the project for version control and Netlify deployment.</p>"},{"location":"SSGNotes/gatsby/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The default starter includes a <code>.gitignore</code> that correctly ignores the built site. Ensure it contains:</p> <pre><code># Gatsby files\n.cache/\npublic/\n\n# Node dependencies\nnode_modules/\n</code></pre>"},{"location":"SSGNotes/gatsby/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git (if not done in the initial step):     <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Gatsby site with custom layout and components\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-gatsby-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/gatsby/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/gatsby/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and authorize Netlify.</li> <li>Find and select your repository (<code>my-gatsby-site</code>).</li> </ol>"},{"location":"SSGNotes/gatsby/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is optimized for Gatsby and will usually auto-detect the following settings.</p> Setting Value (Default for Gatsby) Note Branch to deploy <code>main</code> The branch Netlify monitors for changes. Build command <code>npm run build</code> or <code>gatsby build</code> Runs the script defined in your <code>package.json</code>. Publish directory <code>public</code> The folder Gatsby outputs the static files to."},{"location":"SSGNotes/gatsby/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies.</li> <li>Run the build command (<code>npm run build</code>).</li> <li>Publish the contents of the <code>public</code> directory.</li> </ol> <p>Your high-performance Gatsby site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/gatsby/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now fully automated:</p> <ol> <li>Make changes locally (update components, add new pages).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added 'About' page and improved styling\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Gatsby build, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/gridsome/","title":"Gridsome","text":"<p>Setting up a Gridsome site with Netlify provides a powerful, GraphQL-powered publishing workflow based on Vue.js. This guide covers the complete process from local setup to continuous deployment.</p>"},{"location":"SSGNotes/gridsome/#1-local-gridsome-setup-and-project-initialization","title":"1. Local Gridsome Setup and Project Initialization","text":"<p>Gridsome is a Node.js-based framework and requires Node.js, npm (or yarn/pnpm), and the Gridsome CLI.</p>"},{"location":"SSGNotes/gridsome/#11-install-prerequisites-and-gridsome-cli","title":"1.1. Install Prerequisites and Gridsome CLI","text":"<ol> <li>Install Node.js (LTS version recommended).</li> <li>Install the Gridsome CLI globally: <pre><code>npm install --global @gridsome/cli\n# OR: yarn global add @gridsome/cli\n</code></pre></li> </ol>"},{"location":"SSGNotes/gridsome/#12-create-a-new-gridsome-site","title":"1.2. Create a New Gridsome Site","text":"<p>We'll start with the default starter, which provides a clean structure.</p> <ol> <li>Create the site: <pre><code>gridsome create my-gridsome-site\ncd my-gridsome-site\n</code></pre> This command clones the default starter, installs dependencies, and initializes a basic Gridsome project.</li> </ol>"},{"location":"SSGNotes/gridsome/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to check the basic setup.</p> <pre><code>gridsome develop\n</code></pre> <p>Your site will be running at <code>http://localhost:8080/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/gridsome/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Gridsome uses a Vue.js component structure where Layouts wrap pages, and Components act as reusable partials.</p>"},{"location":"SSGNotes/gridsome/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-gridsome-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 dist/                    # \u26a0\ufe0f Generated static site (ignored by Git)\n\u251c\u2500\u2500 src/                     # All source code, components, templates, and assets\n\u2502   \u251c\u2500\u2500 assets/              # Webpacked assets (JS, SCSS, images imported in components)\n\u2502   \u2502   \u2514\u2500\u2500 style.css        # Custom CSS imported globally\n\u2502   \u251c\u2500\u2500 components/          # Reusable Vue components (partials/UI elements)\n\u2502   \u2502   \u251c\u2500\u2500 Footer.vue\n\u2502   \u2502   \u2514\u2500\u2500 Header.vue\n\u2502   \u251c\u2500\u2500 layouts/             # The main page wrappers (Layouts)\n\u2502   \u2502   \u2514\u2500\u2500 Default.vue      # Primary site shell, defines HTML structure\n\u2502   \u251c\u2500\u2500 pages/               # Vue components that become site routes\n\u2502   \u2502   \u251c\u2500\u2500 Index.vue        # The site homepage (/)\n\u2502   \u2502   \u2514\u2500\u2500 About.vue        # The '/about' page\n\u2502   \u2514\u2500\u2500 templates/           # Templates for programmatically generated content (e.g., blog posts)\n\u251c\u2500\u2500 static/                  # Static assets copied directly to the final output (dist/)\n\u2502   \u2514\u2500\u2500 favicon.png\n\u251c\u2500\u2500 gridsome.config.js       # Main configuration (plugins, sources, global data)\n\u251c\u2500\u2500 gridsome.server.js       # Node.js API to extend GraphQL data, etc.\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 .env                     # Environment variables (ignored by Git)\n</code></pre>"},{"location":"SSGNotes/gridsome/#22-create-the-custom-layout","title":"2.2. Create the Custom Layout","text":"<p>Layouts define the core HTML structure and wrap page content using the <code>&lt;slot /&gt;</code> element.</p> <ol> <li> <p>Open the Default Layout:</p> <ul> <li>File: <code>src/layouts/Default.vue</code></li> </ul> </li> <li> <p>Structure the Layout: Ensure it includes the <code>&lt;Header&gt;</code> and <code>&lt;Footer&gt;</code> components.</p> <pre><code>&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header /&gt;\n    &lt;main class=\"layout\"&gt;\n      &lt;slot/&gt; &lt;/main&gt;\n    &lt;Footer /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Header from '@/components/Header.vue'\nimport Footer from '@/components/Footer.vue'\n\nexport default {\n  components: {\n    Header,\n    Footer\n  }\n}\n&lt;/script&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/gridsome/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<p>Components are reusable elements stored in the <code>src/components/</code> folder.</p> <ol> <li>Create Header Component:<ul> <li>File: <code>src/components/Header.vue</code> <pre><code>&lt;template&gt;\n  &lt;header&gt;\n    &lt;nav&gt;\n      &lt;g-link to=\"/\"&gt;Home&lt;/g-link&gt;\n      &lt;g-link to=\"/about\"&gt;About&lt;/g-link&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n&lt;/template&gt;\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>src/components/Footer.vue</code> <pre><code>&lt;template&gt;\n  &lt;footer&gt;\n    &lt;p&gt;&amp;copy; {{ new Date().getFullYear() }} Gridsome Site&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/template&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/gridsome/#24-apply-the-layout-to-pages","title":"2.4. Apply the Layout to Pages","text":"<p>The starter already has an <code>Index.vue</code> page, which should automatically use the <code>Default.vue</code> layout.</p> <ol> <li>Check the Homepage:<ul> <li>File: <code>src/pages/Index.vue</code></li> <li>It should contain: <code>&lt;Layout&gt;...&lt;/Layout&gt;</code>.</li> </ul> </li> </ol>"},{"location":"SSGNotes/gridsome/#25-manage-static-assets","title":"2.5. Manage Static Assets","text":"<p>Gridsome handles assets in two ways:</p> <ol> <li>Assets (<code>src/assets/</code>): For files you want webpacked, minified, and processed (like global CSS or images used in components).<ul> <li>File: <code>src/assets/style.css</code> (Add some CSS here).</li> </ul> </li> <li>Static (<code>static/</code>): For files you want copied directly to the final output root (<code>dist/</code>). Best for <code>favicon.ico</code>, <code>robots.txt</code>, or large images.<ul> <li>Create the <code>static</code> folder at the project root.</li> </ul> </li> </ol>"},{"location":"SSGNotes/gridsome/#26-global-asset-import-optional","title":"2.6. Global Asset Import (Optional)","text":"<p>To apply global CSS, import the asset into the layout component.</p> <ol> <li>Update the Default Layout Script:<ul> <li>File: <code>src/layouts/Default.vue</code> <pre><code>&lt;script&gt;\nimport Header from '@/components/Header.vue'\nimport Footer from '@/components/Footer.vue'\nimport '@/assets/style.css' // Global CSS import\n\nexport default {\n// ...\n}\n&lt;/script&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/gridsome/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/gridsome/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the built site. Ensure it contains:</p> <pre><code># Gridsome files\n.cache/\n/dist/\n\n# Node dependencies\n/node_modules/\n.env\n</code></pre>"},{"location":"SSGNotes/gridsome/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git (if not done by the starter):     <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Gridsome setup with custom layouts and components\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-gridsome-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/gridsome/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/gridsome/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-gridsome-site</code>).</li> </ol>"},{"location":"SSGNotes/gridsome/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is optimized for Gridsome and will usually auto-detect the following settings.</p> Setting Value (Default for Gridsome) Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>gridsome build</code> The command to generate the static site. Publish directory <code>dist</code> The folder Gridsome outputs the static files to."},{"location":"SSGNotes/gridsome/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies.</li> <li>Run the build command (<code>gridsome build</code>).</li> <li>Publish the contents of the <code>dist</code> directory.</li> </ol> <p>Your Gridsome site will be live with full continuous deployment.</p>"},{"location":"SSGNotes/gridsome/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update components, add new pages).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added 'About' page and styled header\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Gridsome build, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/hexo/","title":"Hexo","text":"<p>Setting up a Hexo site with Netlify provides a fast, Node.js-based publishing workflow. This guide covers the full process, from local Hexo setup and customization to automated deployment via Git and Netlify.</p>"},{"location":"SSGNotes/hexo/#1-local-hexo-setup-and-project-initialization","title":"1. Local Hexo Setup and Project Initialization","text":"<p>Hexo is a Node.js-based framework. You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/hexo/#11-install-prerequisites-and-hexo-cli","title":"1.1. Install Prerequisites and Hexo CLI","text":"<ol> <li>Install Node.js (LTS version recommended).</li> <li>Install the Hexo CLI globally: <pre><code>npm install -g hexo-cli\n# OR: yarn global add hexo-cli\n</code></pre></li> </ol>"},{"location":"SSGNotes/hexo/#12-create-a-new-hexo-site","title":"1.2. Create a New Hexo Site","text":"<p>The CLI will scaffold a new project with all necessary files.</p> <ol> <li>Create the site: <pre><code>hexo init my-hexo-site\n</code></pre></li> <li>Navigate into the directory and install dependencies: <pre><code>cd my-hexo-site\nnpm install\n# OR: yarn install\n</code></pre></li> </ol>"},{"location":"SSGNotes/hexo/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>hexo server\n</code></pre> <p>Your site will be running at <code>http://localhost:4000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/hexo/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Hexo uses the EJS or Swig templating engine (depending on the theme) and organizes templates within the <code>themes/</code> folder. The default theme is usually called <code>landscape</code>.</p>"},{"location":"SSGNotes/hexo/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-hexo-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 public/                  # \u26a0\ufe0f Generated static site (Publish Directory for Netlify)\n\u251c\u2500\u2500 source/                  # Source content files (Markdown, Pages)\n\u2502   \u251c\u2500\u2500 _posts/\n\u2502   \u2502   \u2514\u2500\u2500 hello-world.md   # Example blog post\n\u2502   \u2514\u2500\u2500 about/\n\u2502       \u2514\u2500\u2500 index.md         # Content for an '/about' page\n\u251c\u2500\u2500 scaffolds/               # Boilerplate files for new posts/pages\n\u251c\u2500\u2500 themes/                  # All installed themes\n\u2502   \u2514\u2500\u2500 landscape/           # The active theme directory (or your custom theme)\n\u2502       \u251c\u2500\u2500 _config.yml      # Theme-specific configuration\n\u2502       \u251c\u2500\u2500 layout/          # Templates for page types (Jinja2/EJS/Swig)\n\u2502       \u2502   \u251c\u2500\u2500 _partial/    # Reusable snippets (Partials)\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 footer.ejs\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 header.ejs\n\u2502       \u2502   \u251c\u2500\u2500 layout.ejs   # The main HTML skeleton (Layout)\n\u2502       \u2502   \u2514\u2500\u2500 post.ejs     # Template for individual posts\n\u2502       \u2514\u2500\u2500 source/          # Static theme assets (CSS, JS, images)\n\u2502           \u2514\u2500\u2500 css/\n\u2502               \u2514\u2500\u2500 style.css # Custom CSS file\n\u251c\u2500\u2500 _config.yml              # Main site configuration (URL, theme name, title)\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 package-lock.json\n</code></pre>"},{"location":"SSGNotes/hexo/#22-identify-the-theme-and-layouts","title":"2.2. Identify the Theme and Layouts","text":"<ol> <li>Check the active theme: Open <code>_config.yml</code> (at the root) and note the <code>theme:</code> setting (e.g., <code>theme: landscape</code>).</li> <li>Locate the Layout: The main wrapper is usually located in <code>themes/&lt;theme_name&gt;/layout/layout.ejs</code> (or <code>.swig</code>, <code>.pug</code>, etc.).</li> </ol>"},{"location":"SSGNotes/hexo/#23-customize-layout-and-partials","title":"2.3. Customize Layout and Partials","text":"<p>You should never edit files directly in <code>themes/&lt;theme_name&gt;</code> as they will be overwritten during updates. Instead, override them by copying the file structure into the project root. However, for simplicity here, we'll demonstrate using the default theme structure.</p> <ol> <li>Find the main template: Open <code>themes/landscape/layout/layout.ejs</code>. This file defines the global structure, including <code>&lt;head&gt;</code>, and usually includes Partials like <code>header.ejs</code> and <code>footer.ejs</code>.</li> <li>Customize the Header Partial:<ul> <li>File: <code>themes/landscape/layout/_partial/header.ejs</code></li> <li>Add custom navigation links (e.g., to an \"About\" page, which is created via <code>hexo new page about</code>):  <pre><code>&lt;nav&gt;\n    &lt;a href=\"&lt;%- url_for('/') %&gt;\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"&lt;%- url_for('/about') %&gt;\"&gt;About&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/hexo/#24-manage-static-assets","title":"2.4. Manage Static Assets","text":"<p>Assets placed directly in the <code>themes/&lt;theme_name&gt;/source/</code> directory are copied to the final output.</p> <ol> <li>Locate the CSS directory: Usually <code>themes/landscape/source/css/</code>.</li> <li>Add Custom Styles: Add your custom CSS to the theme's CSS files (or create a new one and link it in the <code>layout.ejs</code> file).<ul> <li>File: <code>themes/landscape/source/css/style.css</code> (or similar file in your theme).</li> </ul> </li> </ol>"},{"location":"SSGNotes/hexo/#25-final-local-check","title":"2.5. Final Local Check","text":"<ol> <li>Clean and build the site: <pre><code>hexo clean\nhexo generate\n</code></pre> This creates the static HTML files in the <code>public/</code> directory.</li> <li>Serve the static output: <pre><code>hexo server\n</code></pre></li> </ol>"},{"location":"SSGNotes/hexo/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/hexo/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the built site. Ensure it contains:</p> <pre><code># Hexo generated files\n.DS_Store\nThumbs.db\ndb.json\n*.log\n\n# Build output\n/public/\n</code></pre>"},{"location":"SSGNotes/hexo/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Hexo site with custom navigation\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-hexo-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/hexo/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/hexo/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-hexo-netlify</code>).</li> </ol>"},{"location":"SSGNotes/hexo/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify often auto-detects Node.js projects but requires explicit configuration for Hexo's build command and output directory.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>hexo generate</code> The command to generate the static site. Publish directory <code>public</code> The folder Hexo outputs the static files to."},{"location":"SSGNotes/hexo/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies.</li> <li>Run the build command (<code>hexo generate</code>).</li> <li>Publish the contents of the <code>public</code> directory.</li> </ol> <p>Your Hexo site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/hexo/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (e.g., run <code>hexo new \"My New Post\"</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added new blog post and updated layout.\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the <code>hexo generate</code> command, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/hugo/","title":"Hugo","text":"<p>This is a detailed, step-by-step guide to setting up a Hugo site with custom layouts, partials, and static assets, and deploying it automatically via Netlify using GitHub for continuous deployment.</p>"},{"location":"SSGNotes/hugo/#1-local-hugo-setup-and-project-creation","title":"1. Local Hugo Setup and Project Creation","text":"<p>This section covers installing Hugo and setting up the basic site structure.</p>"},{"location":"SSGNotes/hugo/#11-install-hugo","title":"1.1. Install Hugo","text":"<p>The installation method depends on your operating system. For simplicity, using a package manager is usually best.</p> <ul> <li>macOS (using Homebrew): <pre><code>brew install hugo\n</code></pre></li> <li>Windows (using Chocolatey): <pre><code>choco install hugo -confirm\n</code></pre></li> <li>Linux (or manually): See the official Hugo documentation for your distribution.</li> </ul>"},{"location":"SSGNotes/hugo/#12-create-a-new-hugo-site","title":"1.2. Create a New Hugo Site","text":"<p>Navigate to where you want to create your project and run:</p> <pre><code>hugo new site my-hugo-site\ncd my-hugo-site\n</code></pre> <p>This creates the default directory structure.</p>"},{"location":"SSGNotes/hugo/#13-initialize-git","title":"1.3. Initialize Git","text":"<p>Initialize a local Git repository in the new site directory:</p> <pre><code>git init\n</code></pre>"},{"location":"SSGNotes/hugo/#14-add-a-basic-content-file","title":"1.4. Add a Basic Content File","text":"<p>Create your first content file (this will use a default template later):</p> <pre><code>hugo new content posts/first-post.md\n</code></pre> <p>Open <code>content/posts/first-post.md</code> and change <code>draft: true</code> to <code>draft: false</code> if you want it to build immediately. Add some content below the front matter.</p>"},{"location":"SSGNotes/hugo/#2-custom-layouts-partials-and-assets","title":"2. Custom Layouts, Partials, and Assets","text":"<p>Hugo uses a specific file structure for templates and assets. We will use the main project directories to override or create new components.</p>"},{"location":"SSGNotes/hugo/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>After completing the steps in this section, your project structure should look like this:</p> <pre><code>my-hugo-site/\n\u251c\u2500\u2500 .gitignore               # Tells Git to ignore /public and /resources\n\u251c\u2500\u2500 archetypes/              # Default front matter templates for new content\n\u251c\u2500\u2500 assets/                  # For files Hugo needs to process (e.g., SASS/SCSS, images for Hugo Pipes)\n\u251c\u2500\u2500 config.toml              # Primary site configuration file\n\u251c\u2500\u2500 content/                 # All your Markdown content files\n\u2502   \u2514\u2500\u2500 posts/\n\u2502       \u2514\u2500\u2500 first-post.md\n\u251c\u2500\u2500 data/                    # Store structured data files (JSON, YAML, TOML) for use in templates\n\u251c\u2500\u2500 layouts/                 # All HTML templates, overriding any theme files\n\u2502   \u251c\u2500\u2500 _default/            # Default templates for pages\n\u2502   \u2502   \u251c\u2500\u2500 baseof.html      # The main HTML skeleton for all pages (required)\n\u2502   \u2502   \u251c\u2500\u2500 list.html        # Template for list pages (e.g., /posts/)\n\u2502   \u2502   \u2514\u2500\u2500 single.html      # Template for single pages (e.g., a blog post)\n\u2502   \u2514\u2500\u2500 partials/            # Reusable template snippets\n\u2502       \u251c\u2500\u2500 footer.html      # Site footer\n\u2502       \u251c\u2500\u2500 head_includes.html # Code for the &lt;head&gt; section (meta, CSS links)\n\u2502       \u2514\u2500\u2500 nav.html         # Site navigation menu\n\u251c\u2500\u2500 public/                  # \u26a0\ufe0f Generated output folder (ignored by Git)\n\u251c\u2500\u2500 resources/               # \u26a0\ufe0f Generated cache for processed assets (ignored by Git)\n\u2514\u2500\u2500 static/                  # Static assets copied directly to the final site root\n    \u2514\u2500\u2500 css/\n        \u2514\u2500\u2500 style.css        # Custom CSS file\n</code></pre>"},{"location":"SSGNotes/hugo/#22-create-custom-layouts","title":"2.2. Create Custom Layouts","text":"<p>Since you are creating custom layouts, you will work primarily in the <code>layouts/</code> directory. We'll set up a base template and simple list/single layouts.</p> <ol> <li> <p>Create the Base Template: This file provides the skeleton (<code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>) for all other layouts.</p> <ul> <li>Create a directory: <code>mkdir -p layouts/_default</code></li> <li>Create the base file: <code>touch layouts/_default/baseof.html</code></li> </ul> <p>In <code>layouts/_default/baseof.html</code>, add the basic HTML structure, using the <code>block</code> function for sections other layouts can define:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    {{ partial \"head_includes.html\" . }} \n    &lt;title&gt;{{ block \"title\" . }} {{ .Site.Title }} {{ end }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        {{ partial \"nav.html\" . }} \n    &lt;/header&gt;\n\n    &lt;main&gt;\n        {{ block \"main\" . }}\n        {{ end }}\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n        {{ partial \"footer.html\" . }}\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Create the Single and List Layouts: These templates define the main content area using the <code>main</code> block from <code>baseof.html</code>.</p> <ul> <li>Single Page Layout (for individual posts):<ul> <li>Create file: <code>touch layouts/_default/single.html</code> <pre><code>{{ define \"main\" }}\n&lt;article&gt;\n    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n    &lt;p&gt;Published: {{ .Date.Format \"January 2, 2006\" }}&lt;/p&gt;\n    {{ .Content }}\n&lt;/article&gt;\n{{ end }}\n</code></pre></li> </ul> </li> <li>List Page Layout (for the homepage, sections, or taxonomies):<ul> <li>Create file: <code>touch layouts/_default/list.html</code> <pre><code>{{ define \"main\" }}\n&lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n&lt;ul&gt;\n{{ range .Pages }}\n    &lt;li&gt;\n        &lt;a href=\"{{ .RelPermalink }}\"&gt;{{ .Title }}&lt;/a&gt;\n        &lt;p&gt;{{ .Summary }}&lt;/p&gt;\n    &lt;/li&gt;\n{{ end }}\n&lt;/ul&gt;\n{{ end }}\n</code></pre></li> </ul> </li> </ul> </li> </ol>"},{"location":"SSGNotes/hugo/#23-create-partials","title":"2.3. Create Partials","text":"<p>Partials are reusable snippets of code. Create them in the <code>layouts/partials/</code> directory.</p> <ol> <li>Create Partials Directory: <pre><code>mkdir layouts/partials\n</code></pre></li> <li>Create <code>head_includes.html</code> (for CSS/Meta): <pre><code>touch layouts/partials/head_includes.html\n</code></pre>     Add a link to your CSS file:     <pre><code>&lt;link rel=\"stylesheet\" href=\"/css/style.css\"&gt;\n</code></pre></li> <li>Create <code>nav.html</code> and <code>footer.html</code>: <pre><code>touch layouts/partials/nav.html\ntouch layouts/partials/footer.html\n</code></pre><ul> <li><code>nav.html</code>: <pre><code>&lt;nav&gt;\n    &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"/posts/\"&gt;Posts&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre></li> <li><code>footer.html</code>: <pre><code>&lt;footer&gt;\n    &lt;p&gt;&amp;copy; {{ now.Year }} {{ .Site.Title }}&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/hugo/#24-manage-static-assets","title":"2.4. Manage Static Assets","text":"<p>The <code>static/</code> directory is for assets that do not need any processing (e.g., plain CSS, JS, images, <code>robots.txt</code>, <code>favicon.ico</code>). Hugo copies everything in <code>static/</code> directly to the root of the <code>public/</code> directory during the build.</p> <ol> <li>Create Assets Directories: <pre><code>mkdir -p static/css static/images\n</code></pre></li> <li>Add a Custom CSS File:<ul> <li>Create file: <code>touch static/css/style.css</code></li> <li>Add some basic styling:     <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 800px;\n    padding: 20px;\n}\nheader {\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 10px;\n    margin-bottom: 20px;\n}\n</code></pre> (The asset path <code>/css/style.css</code> is relative to the <code>static</code> folder, which is copied to the root.)</li> </ul> </li> </ol>"},{"location":"SSGNotes/hugo/#25-local-test","title":"2.5. Local Test","text":"<p>Run the Hugo development server to see your custom setup:</p> <pre><code>hugo server -D\n</code></pre> <p>You can now view your site at <code>http://localhost:1313/</code> and see your custom layouts, partials, and styles applied. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/hugo/#3-github-setup","title":"3. GitHub Setup","text":"<p>Continuous deployment relies on a Git repository (like GitHub) that Netlify can monitor.</p>"},{"location":"SSGNotes/hugo/#31-create-gitignore","title":"3.1. Create <code>.gitignore</code>","text":"<p>Prevent unnecessary files from being uploaded.</p> <pre><code>touch .gitignore\necho \"/public/\" &gt;&gt; .gitignore\necho \"/resources/\" &gt;&gt; .gitignore\necho \"temp/\" &gt;&gt; .gitignore\n</code></pre> <p>Note: Hugo's <code>public/</code> directory is the final build output and should not be tracked by Git.</p>"},{"location":"SSGNotes/hugo/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add files and commit: <pre><code>git add .\ngit commit -m \"Initial Hugo site structure with custom templates and assets\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-hugo-site</code>).</li> <li>Link your local repo and push: (Replace <code>&lt;your_username&gt;</code> and <code>&lt;repo_name&gt;</code> as necessary)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/hugo/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Netlify will monitor your GitHub repository and automatically build and deploy your site whenever you push changes to the <code>main</code> branch.</p>"},{"location":"SSGNotes/hugo/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in or sign up.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" (or your preferred Git provider) and authorize Netlify to access your repositories.</li> <li>Find and select the repository you just pushed (e.g., <code>my-hugo-site</code>).</li> </ol>"},{"location":"SSGNotes/hugo/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>On the deployment settings screen, Netlify will usually auto-detect Hugo. Verify the settings:</p> Setting Value (Default for Hugo) Note Branch to deploy <code>main</code> The main branch of your repository. Build command <code>hugo</code> The command Hugo uses to generate the site. Publish directory <code>public</code> The folder Hugo outputs the static files to."},{"location":"SSGNotes/hugo/#43-set-environment-variable-optional-but-recommended","title":"4.3. Set Environment Variable (Optional but Recommended)","text":"<p>If you need a specific Hugo version, or if the build fails, you should set the <code>HUGO_VERSION</code> environment variable.</p> <ol> <li>In the Netlify deploy settings, click \"Show advanced\".</li> <li>Click \"New variable\" under \"Environment variables\".</li> <li>Set:<ul> <li>Key: <code>HUGO_VERSION</code></li> <li>Value: (e.g., <code>0.125.7</code> - check your local version with <code>hugo version</code>)</li> </ul> </li> </ol>"},{"location":"SSGNotes/hugo/#44-deploy-the-site","title":"4.4. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will fetch your GitHub repo, run the <code>hugo</code> build command, and publish the contents of the <code>public</code> directory.</p> <p>Once the deployment is complete, Netlify will give you a temporary URL (e.g., <code>https://random-name-12345.netlify.app/</code>) where your live site is available. You can change this site name in the Site settings within the Netlify dashboard.</p>"},{"location":"SSGNotes/hugo/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your setup is now complete! The beauty of this is the Continuous Deployment (CD) pipeline:</p> <ol> <li>Make changes locally in your Hugo project (content, layouts, partials, static assets).</li> <li>Commit your changes:     <pre><code>git commit -am \"My next awesome change\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push to the <code>main</code> branch, rebuilds your Hugo site, and deploys the new version live! \ud83c\udf89</li> </ol>"},{"location":"SSGNotes/jekyll/","title":"Jekyll","text":"<p>Setting up a Jekyll site with Netlify is straightforward and provides a great workflow for static site publishing. Here is a detailed, step-by-step guide covering the entire process, including using custom layouts, partials, and assets.</p>"},{"location":"SSGNotes/jekyll/#1-local-jekyll-setup-and-project-creation","title":"1. Local Jekyll Setup and Project Creation","text":"<p>This section covers installing Jekyll and creating your basic site.</p>"},{"location":"SSGNotes/jekyll/#11-install-prerequisites-ruby-and-bundler","title":"1.1. Install Prerequisites (Ruby and Bundler)","text":"<p>Jekyll is a Ruby Gem, so you need a working Ruby environment.</p> <ol> <li>Install Ruby: Ensure you have Ruby installed (version 2.5 or higher). It's best to use a version manager like RVM or rbenv on macOS/Linux, or RubyInstaller on Windows.</li> <li>Install Bundler: Bundler manages the project's Ruby Gems.     <pre><code>gem install bundler\n</code></pre></li> </ol>"},{"location":"SSGNotes/jekyll/#12-install-jekyll-and-create-a-new-site","title":"1.2. Install Jekyll and Create a New Site","text":"<p>Create a new Jekyll site using the default template.</p> <ol> <li>Create the site: <pre><code>jekyll new my-jekyll-site\ncd my-jekyll-site\n</code></pre></li> <li>Install dependencies: Use Bundler to install the necessary gems, including Jekyll.     <pre><code>bundle install\n</code></pre></li> </ol>"},{"location":"SSGNotes/jekyll/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to check the default site.</p> <pre><code>bundle exec jekyll serve\n</code></pre> <p>View your site at <code>http://localhost:4000</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/jekyll/#2-custom-layouts-partials-and-assets","title":"2. Custom Layouts, Partials, and Assets","text":"<p>Jekyll's template system is based on the Liquid templating language and uses specific directories for customization.</p>"},{"location":"SSGNotes/jekyll/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>After completing the customization steps, your project structure will look like this:</p> <pre><code>my-jekyll-site/\n\u251c\u2500\u2500 .gitignore               # Tells Git to ignore the built site (_site)\n\u251c\u2500\u2500 _config.yml              # Primary site configuration (global variables)\n\u251c\u2500\u2500 Gemfile                  # List of Ruby Gems used by the project\n\u251c\u2500\u2500 Gemfile.lock             # Exact versions of installed Gems\n\u251c\u2500\u2500 index.html               # The site's main page\n\u251c\u2500\u2500 _posts/                  # Your Markdown content for blog posts\n\u2502   \u2514\u2500\u2500 2025-10-15-first-post.md\n\u251c\u2500\u2500 _layouts/                # HTML templates for pages/posts\n\u2502   \u251c\u2500\u2500 default.html         # The main HTML skeleton (base layout)\n\u2502   \u2514\u2500\u2500 post.html            # Layout specifically for blog posts\n\u251c\u2500\u2500 _includes/               # Reusable HTML snippets (partials)\n\u2502   \u251c\u2500\u2500 footer.html          # Site footer content\n\u2502   \u2514\u2500\u2500 header.html          # Site navigation/header\n\u2514\u2500\u2500 assets/                  # Static assets that are copied directly\n    \u2514\u2500\u2500 css/\n        \u2514\u2500\u2500 style.css        # Your custom CSS file\n</code></pre>"},{"location":"SSGNotes/jekyll/#22-create-custom-layouts","title":"2.2. Create Custom Layouts","text":"<p>Layouts are the HTML wrappers for your content. They live in the <code>_layouts/</code> directory.</p> <ol> <li> <p>Modify the Default Layout: This acts as the base HTML shell.</p> <ul> <li>Open <code>_layouts/default.html</code> (or create it if it doesn't exist).</li> <li>Ensure the structure includes Liquid tags to pull in your header, content, and footer:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{ page.title | default: site.title }}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% include header.html %} &lt;main&gt;\n        {{ content }} &lt;/main&gt;\n\n    {% include footer.html %} &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Create a Post Layout: A layout specifically for blog posts.</p> <ul> <li>Create file: <code>_layouts/post.html</code></li> <li>Add front matter specifying the base layout:</li> </ul> <pre><code>---\nlayout: default\n---\n&lt;article&gt;\n    &lt;h1&gt;{{ page.title }}&lt;/h1&gt;\n    &lt;p class=\"post-meta\"&gt;Published on: {{ page.date | date: \"%b %d, %Y\" }}&lt;/p&gt;\n    {{ content }}\n&lt;/article&gt;\n</code></pre> </li> <li> <p>Apply the Layout: Open your sample post in <code>_posts/</code> and ensure the front matter uses the new layout:</p> <pre><code>---\nlayout: post\ntitle: \"My First Custom Post\"\ndate: 2025-10-15 10:00:00 +0600\n---\nThis post is using the custom `post.html` layout.\n</code></pre> </li> </ol>"},{"location":"SSGNotes/jekyll/#23-create-partials-includes","title":"2.3. Create Partials (Includes)","text":"<p>Partials are reusable snippets placed in the <code>_includes/</code> directory.</p> <ol> <li>Create Includes Directory: <pre><code>mkdir _includes\n</code></pre></li> <li>Create Header Partial:<ul> <li>Create file: <code>_includes/header.html</code> <pre><code>&lt;header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"/\"&gt;{{ site.title }}&lt;/a&gt;\n        &lt;a href=\"/about/\"&gt;About&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre></li> </ul> </li> <li>Create Footer Partial:<ul> <li>Create file: <code>_includes/footer.html</code> <pre><code>&lt;footer&gt;\n    &lt;p&gt;&amp;copy; {{ site.time | date: \"%Y\" }} {{ site.title }}. All rights reserved.&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/jekyll/#24-add-static-assets","title":"2.4. Add Static Assets","text":"<p>Assets that should be served directly (like images, CSS, or client-side JavaScript) go into a root-level folder like <code>assets/</code>.</p> <ol> <li>Create Assets Directory: <pre><code>mkdir -p assets/css\n</code></pre></li> <li>Add a Custom CSS File:<ul> <li>Create file: <code>assets/css/style.css</code></li> <li>Add some basic styling:     <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 960px;\n    padding: 20px;\n}\nheader {\n    border-bottom: 2px solid #333;\n    padding-bottom: 15px;\n    margin-bottom: 30px;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/jekyll/#25-final-local-check","title":"2.5. Final Local Check","text":"<p>Run the server again to confirm all your custom files are working:</p> <pre><code>bundle exec jekyll serve\n</code></pre>"},{"location":"SSGNotes/jekyll/#3-github-setup","title":"3. GitHub Setup","text":"<p>We'll prepare the site for version control and Netlify deployment.</p>"},{"location":"SSGNotes/jekyll/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The default Jekyll setup usually includes a <code>.gitignore</code> that correctly ignores the built site. Ensure it contains:</p> <pre><code># Ignore Jekyll's build directory\n_site/\n# Ignore Bundler files\n.bundle/\nvendor/\n</code></pre>"},{"location":"SSGNotes/jekyll/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add files and commit: <pre><code>git init\ngit add .\ngit commit -m \"Initial Jekyll site with custom layouts and assets\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-jekyll-site</code>).</li> <li>Link your local repo and push: (Replace <code>&lt;your_username&gt;</code> and <code>&lt;repo_name&gt;</code>)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/jekyll/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Netlify will monitor your GitHub repository to automatically build and deploy your site.</p>"},{"location":"SSGNotes/jekyll/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to Netlify and log in or sign up.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" (or your Git provider) and authorize Netlify.</li> <li>Find and select your repository (e.g., <code>my-jekyll-site</code>).</li> </ol>"},{"location":"SSGNotes/jekyll/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is optimized for Jekyll and often auto-detects the required settings.</p> Setting Value (Default for Jekyll) Note Branch to deploy <code>main</code> The main branch of your repository. Build command <code>jekyll build</code> or <code>bundle exec jekyll build</code> Netlify typically handles the environment, so <code>jekyll build</code> often suffices, but <code>bundle exec jekyll build</code> is the safer command if you use many gems. Publish directory <code>_site</code> The folder Jekyll outputs the static files to."},{"location":"SSGNotes/jekyll/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your code.</li> <li>Install the required Ruby environment and dependencies (Gems from <code>Gemfile.lock</code>).</li> <li>Run the build command (<code>jekyll build</code>).</li> <li>Publish the contents of the <code>_site</code> directory.</li> </ol> <p>Once the deployment finishes, your live site will be available at the temporary Netlify URL (e.g., <code>https://random-name-12345.netlify.app/</code>). You can customize the site name in the Netlify dashboard.</p>"},{"location":"SSGNotes/jekyll/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now active:</p> <ol> <li>Make content, layout, or asset changes locally.</li> <li>Commit your changes:     <pre><code>git commit -am \"New post and style update\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, initiates a new build, and deploys the updated version live.</li> </ol>"},{"location":"SSGNotes/lector/","title":"Lector","text":"<p>While there is a Python-based static site generator named Lektor, it is not as widely known as Jekyll, Hugo, or Eleventy, and its setup process requires a specific Python environment and configuration for assets.</p> <p>Here is a detailed, step-by-step guide to setting up a Lektor site with Netlify, covering custom layouts, assets, and the necessary Python configuration for deployment.</p>"},{"location":"SSGNotes/lector/#1-local-lektor-setup-and-project-initialization","title":"1. Local Lektor Setup and Project Initialization","text":"<p>Lektor requires Python and its package manager, <code>pip</code>.</p>"},{"location":"SSGNotes/lector/#11-install-prerequisites","title":"1.1. Install Prerequisites","text":"<ol> <li>Install Python (3.7+ recommended).</li> <li>Install Lektor globally using <code>pip</code>:     <pre><code>pip install lektor\n</code></pre></li> </ol>"},{"location":"SSGNotes/lector/#12-create-a-new-lektor-site","title":"1.2. Create a New Lektor Site","text":"<p>Lektor provides a CLI wizard to create a basic project structure.</p> <ol> <li> <p>Create the site:</p> <pre><code>lektor quickstart\n</code></pre> </li> <li> <p>Follow the setup wizard:</p> <ul> <li>Project Title: <code>My Lektor Site</code></li> <li>Output Path: <code>my-lektor-site</code> (or your preferred directory name)</li> <li>Package Name: <code>my-lektor-site</code></li> <li>Basic or Advanced Project: Choose Basic for the simplest start.</li> </ul> </li> <li> <p>Navigate into the new directory:</p> <pre><code>cd my-lektor-site\n</code></pre> </li> </ol>"},{"location":"SSGNotes/lector/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>lektor server\n</code></pre> <p>Your site will be running at <code>http://127.0.0.1:8000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/lector/#2-custom-layouts-partials-and-assets","title":"2. Custom Layouts, Partials, and Assets","text":"<p>Lektor uses its own templating language, Jinja2, and organizes templates, content, and assets in a structured way.</p>"},{"location":"SSGNotes/lector/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>After completing this section, your project structure will look like this:</p> <pre><code>my-lektor-site/\n\u251c\u2500\u2500 .gitignore               # Tells Git to ignore the built site (output/)\n\u251c\u2500\u2500 configs/                 # Configuration for Lektor plugins, etc.\n\u251c\u2500\u2500 content/                 # All content files (including Markdown, .ini files, etc.)\n\u2502   \u251c\u2500\u2500 blog/\n\u2502   \u2502   \u2514\u2500\u2500 first-post/\n\u2502   \u2502       \u2514\u2500\u2500 contents.lr  # Content for a single blog post\n\u2502   \u2514\u2500\u2500 root/\n\u2502       \u2514\u2500\u2500 contents.lr      # Content for the site homepage (index)\n\u251c\u2500\u2500 assets/                  # Non-template files copied directly to the output\n\u2502   \u2514\u2500\u2500 static/\n\u2502       \u2514\u2500\u2500 css/\n\u2502           \u2514\u2500\u2500 style.css    # Custom CSS file\n\u251c\u2500\u2500 models/                  # Defines the structure of content types (e.g., page, blog-post)\n\u2502   \u251c\u2500\u2500 page.ini\n\u2502   \u2514\u2500\u2500 root.ini\n\u251c\u2500\u2500 templates/               # All Jinja2 templates for pages and reusable blocks\n\u2502   \u251c\u2500\u2500 layout.html          # The main HTML skeleton (Layout)\n\u2502   \u251c\u2500\u2500 macros/\n\u2502   \u2502   \u2514\u2500\u2500 nav.html         # Reusable HTML snippets (Partial)\n\u2502   \u2514\u2500\u2500 page.html            # Template for a standard page type\n\u2514\u2500\u2500 .lektorproject           # Main project configuration file\n</code></pre>"},{"location":"SSGNotes/lector/#22-create-the-custom-layout","title":"2.2. Create the Custom Layout","text":"<p>In Lektor, the main wrapper for all pages is typically called <code>layout.html</code>.</p> <ol> <li>Create the Layout Template:<ul> <li>File: <code>templates/layout.html</code> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{ this.title }} | {{ site.title }}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ '/static/css/style.css'|url }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        {% import 'macros/nav.html' as nav %}\n        {{ nav.main_nav() }} {# Include the navigation partial #}\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        {# The actual content of the page template is rendered here #}\n        {% block body %}\n        {% endblock %}\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; {{ now.year }} {{ site.title }}&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#23-create-partials-macros","title":"2.3. Create Partials (Macros)","text":"<p>Reusable template snippets are usually placed in a subfolder like <code>templates/macros/</code> and imported as Jinja2 macros.</p> <ol> <li>Create the Macros Directory: <pre><code>mkdir -p templates/macros\n</code></pre></li> <li>Create the Navigation Partial (Macro):<ul> <li>File: <code>templates/macros/nav.html</code> <pre><code>{% macro main_nav() %}\n    &lt;nav&gt;\n        &lt;a href=\"{{ '/'|url }}\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"{{ '/blog'|url }}\"&gt;Blog&lt;/a&gt;\n    &lt;/nav&gt;\n{% endmacro %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#24-apply-the-layout","title":"2.4. Apply the Layout","text":"<p>Your content templates (like <code>page.html</code>) must explicitly extend the <code>layout.html</code>.</p> <ol> <li>Update the Page Template:<ul> <li>File: <code>templates/page.html</code> <pre><code>{% extends \"layout.html\" %}\n{% block body %}\n    &lt;h1&gt;{{ this.title }}&lt;/h1&gt;\n    {{ this.body }}\n{% endblock %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#25-manage-static-assets","title":"2.5. Manage Static Assets","text":"<p>Assets are handled through the <code>assets/</code> directory. Lektor preserves the directory structure under <code>assets/</code> and copies it to the output folder.</p> <ol> <li>Create Assets Directory: <pre><code>mkdir -p assets/static/css\n</code></pre></li> <li>Add a Custom CSS File:<ul> <li>File: <code>assets/static/css/style.css</code> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 960px;\n    padding: 20px;\n}\nheader {\n    border-bottom: 1px solid #ddd;\n    padding-bottom: 15px;\n    margin-bottom: 30px;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#26-final-local-check","title":"2.6. Final Local Check","text":"<p>Run the server again:</p> <pre><code>lektor server\n</code></pre> <p>Check <code>http://127.0.0.1:8000/</code> to ensure your layouts, partials, and styles are applied.</p>"},{"location":"SSGNotes/lector/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/lector/#31-create-gitignore","title":"3.1. Create <code>.gitignore</code>","text":"<p>Ensure the build output and cache are ignored by Git.</p> <pre><code>touch .gitignore\necho \"/.lektor/\" &gt;&gt; .gitignore\necho \"/.lektor_cache/\" &gt;&gt; .gitignore\necho \"/output/\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"SSGNotes/lector/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Lektor site with custom templates and assets\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-lektor-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/lector/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Since Lektor is a Python tool, you must explicitly tell Netlify to install the necessary Python environment and dependencies.</p>"},{"location":"SSGNotes/lector/#41-configure-build-environment","title":"4.1. Configure Build Environment","text":"<p>Create a runtime dependency file so Netlify knows to install Lektor.</p> <ol> <li>Create the dependency file: <pre><code>touch requirements.txt\n</code></pre></li> <li>Add Lektor to the file:<ul> <li>File: <code>requirements.txt</code> <pre><code>lektor\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#42-sign-up-and-import-project","title":"4.2. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-lektor-site</code>).</li> </ol>"},{"location":"SSGNotes/lector/#43-configure-build-settings","title":"4.3. Configure Build Settings","text":"<p>Because Lektor isn't autodetected, you must manually specify the build command and output directory.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>lektor build --output output</code> Tells Lektor to build the site and specify the output folder. Publish directory <code>output</code> The folder Lektor outputs the static files to."},{"location":"SSGNotes/lector/#44-set-environment-variable-optional","title":"4.4. Set Environment Variable (Optional)","text":"<p>You may need to ensure Netlify uses a Python version compatible with Lektor.</p> <ol> <li>In the Netlify deploy settings, click \"Show advanced\".</li> <li>Add a new environment variable:<ul> <li>Key: <code>PYTHON_VERSION</code></li> <li>Value: (e.g., <code>3.10</code>)</li> </ul> </li> </ol>"},{"location":"SSGNotes/lector/#45-deploy-the-site","title":"4.5. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Detect <code>requirements.txt</code> and install Python and Lektor.</li> <li>Run the build command: <code>lektor build --output output</code>.</li> <li>Publish the contents of the <code>output</code> directory.</li> </ol> <p>Your Lektor site is now live with continuous deployment.</p>"},{"location":"SSGNotes/lector/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now active:</p> <ol> <li>Make changes locally (update content, layouts, or assets).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added new blog entry and updated nav macro\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Lektor build, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/mkdocs-gh/","title":"MkDocs (GitHub Deploy)","text":"<p>This is a comprehensive guide for setting up an MkDocs project locally, integrating it with GitHub, and automating deployment to GitHub Pages using a GitHub Workflow (GitHub Actions).</p>"},{"location":"SSGNotes/mkdocs-gh/#1-local-mkdocs-setup-and-development","title":"1. Local MkDocs Setup and Development","text":"<p>This section guides you through setting up the necessary tools and creating your documentation project.</p>"},{"location":"SSGNotes/mkdocs-gh/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: MkDocs requires Python to run. Ensure you have Python 3 installed.</li> <li>pip: Python's package installer, which comes with modern Python installations.</li> <li>Git: For version control and GitHub integration.</li> </ul>"},{"location":"SSGNotes/mkdocs-gh/#step-1-install-mkdocs","title":"Step 1: Install MkDocs","text":"<p>It's highly recommended to use a virtual environment to keep your project dependencies isolated.</p> <ol> <li>Create and Activate a Virtual Environment (Optional but Recommended):<ul> <li>Linux/macOS: <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre></li> <li>Windows: <pre><code>python -m venv venv\n.\\venv\\Scripts\\activate\n</code></pre></li> </ul> </li> <li>Install MkDocs (and the popular Material for MkDocs theme): <pre><code>pip install mkdocs mkdocs-material\n</code></pre><ul> <li>Tip: Create a <code>requirements.txt</code> file to list your dependencies:     <pre><code>pip freeze &gt; requirements.txt\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#step-2-create-a-new-mkdocs-project","title":"Step 2: Create a New MkDocs Project","text":"<ol> <li> <p>Create the project:</p> <pre><code>mkdocs new my-docs-project\ncd my-docs-project\n</code></pre> <p>This creates a basic structure:</p> <ul> <li><code>mkdocs.yml</code>: The main configuration file.</li> <li><code>docs/</code>: Directory containing your Markdown files.<ul> <li><code>docs/index.md</code>: The homepage of your documentation.</li> </ul> </li> </ul> </li> <li> <p>Configure <code>mkdocs.yml</code>:     Open the <code>mkdocs.yml</code> file and customize it. If you installed the Material theme, set it here:</p> <pre><code>site_name: My Awesome Documentation\nsite_url: https://&lt;USERNAME&gt;.github.io/&lt;REPOSITORY_NAME&gt;/ # Important for GitHub Pages\nrepo_url: https://github.com/&lt;USERNAME&gt;/&lt;REPOSITORY_NAME&gt;\nrepo_name: &lt;REPOSITORY_NAME&gt;\ntheme:\n  name: material\nnav:\n  - Home: index.md\n  # Add more pages here, e.g.,\n  # - Guide: guide/guide.md\n</code></pre> </li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#step-3-local-development-and-preview","title":"Step 3: Local Development and Preview","text":"<ol> <li>Start the local development server: <pre><code>mkdocs serve\n</code></pre>     This command starts a web server, typically at <code>http://127.0.0.1:8000</code>. Your browser will open the site.</li> <li>Write Documentation: Edit the Markdown files in the <code>docs/</code> directory and save them. The server will auto-reload your browser instantly with the changes.</li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#2-github-repository-setup","title":"2. GitHub Repository Setup","text":"<p>Next, link your local project to a new GitHub repository.</p>"},{"location":"SSGNotes/mkdocs-gh/#step-1-initialize-git-and-commit","title":"Step 1: Initialize Git and Commit","text":"<ol> <li>Initialize a local Git repository (if not already done): <pre><code>git init\n</code></pre></li> <li>Create a <code>.gitignore</code> file:     Add the <code>site/</code> folder (where MkDocs builds the static HTML) to your <code>.gitignore</code> to prevent committing generated files.     <pre><code># .gitignore\nvenv/\nsite/\n</code></pre></li> <li>Perform the initial commit: <pre><code>git add .\ngit commit -m \"Initial MkDocs project setup\"\n</code></pre></li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#step-2-create-github-repository-and-push","title":"Step 2: Create GitHub Repository and Push","text":"<ol> <li>Create a new, empty repository on GitHub (do not initialize with a README or license).</li> <li>Link your local repository to GitHub and push:     Follow the instructions provided by GitHub for \"pushing an existing repository from the command line.\" It typically involves:     <pre><code>git remote add origin https://github.com/&lt;USERNAME&gt;/&lt;REPOSITORY_NAME&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre>     Your source files (<code>mkdocs.yml</code>, <code>docs/</code>, etc.) are now on GitHub.</li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#3-automated-deployment-with-github-actions","title":"3. Automated Deployment with GitHub Actions","text":"<p>This is the most modern and recommended way to publish MkDocs to GitHub Pages. The workflow will build your site whenever you push changes to your primary branch (e.g., <code>main</code>).</p>"},{"location":"SSGNotes/mkdocs-gh/#step-1-create-the-github-actions-workflow-file","title":"Step 1: Create the GitHub Actions Workflow File","text":"<ol> <li> <p>Create the directory structure for workflows:</p> <pre><code>mkdir -p .github/workflows\n</code></pre> </li> <li> <p>Create a new file named <code>.github/workflows/ci.yml</code> (or similar) and paste the following content. This workflow uses the officially supported GitHub Actions for Pages.</p> <pre><code>name: Deploy Docs to GitHub Pages\n\non:\n  # Triggers the workflow on push to the 'main' branch\n  push:\n    branches:\n      - main\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Sets the GITHUB_TOKEN permissions required for Pages deployment\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        # If you used requirements.txt, use 'pip install -r requirements.txt'\n        run: pip install mkdocs mkdocs-material\n\n      - name: Build MkDocs site\n        run: mkdocs build\n        # The built site is in the 'site' directory by default\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # Path to the directory containing the static files\n          path: './site'\n\n  # Deployment job\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n</code></pre> </li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#step-2-push-the-workflow","title":"Step 2: Push the Workflow","text":"<ol> <li>Add and commit the new workflow file: <pre><code>git add .github/workflows/ci.yml\ngit commit -m \"Add GitHub Actions workflow for MkDocs deployment\"\ngit push\n</code></pre>     This push will trigger the first workflow run.</li> </ol>"},{"location":"SSGNotes/mkdocs-gh/#step-3-finalize-github-pages-settings","title":"Step 3: Finalize GitHub Pages Settings","text":"<ol> <li>Navigate to your repository on GitHub.</li> <li>Go to Settings &gt; Pages.</li> <li>Under the \"Build and deployment\" section, ensure the Source is set to GitHub Actions.</li> <li>If the workflow ran successfully, GitHub Pages will automatically set up the deployment and provide the URL.</li> </ol> <p>Your documentation will typically be available at: <code>https://&lt;USERNAME&gt;.github.io/&lt;REPOSITORY_NAME&gt;/</code></p> <ul> <li>Note: It may take a few minutes for the initial deployment to complete and for the site to become live. You can monitor the progress in the Actions tab of your repository.</li> </ul>"},{"location":"SSGNotes/mkdocs/","title":"MkDocs","text":"<p>Setting up an MkDocs site with Netlify is straightforward and highly effective for deploying technical documentation. MkDocs is a Python-based static site generator that builds documentation from Markdown files.</p> <p>Here is a detailed, step-by-step guide for installation, customization, and continuous deployment.</p>"},{"location":"SSGNotes/mkdocs/#1-local-mkdocs-setup-and-project-initialization","title":"1. Local MkDocs Setup and Project Initialization","text":"<p>MkDocs requires Python and its package manager, <code>pip</code>.</p>"},{"location":"SSGNotes/mkdocs/#11-install-prerequisites-and-mkdocs","title":"1.1. Install Prerequisites and MkDocs","text":"<ol> <li>Install Python (3.7+ recommended).</li> <li>Create a virtual environment (recommended to isolate dependencies):     <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\n</code></pre></li> <li>Install MkDocs and the default theme (Material for MkDocs is a popular choice, but we'll stick to the base setup first):     <pre><code>pip install mkdocs\n</code></pre></li> </ol>"},{"location":"SSGNotes/mkdocs/#12-create-a-new-mkdocs-site","title":"1.2. Create a New MkDocs Site","text":"<p>Use the <code>mkdocs new</code> command to scaffold a basic project structure.</p> <ol> <li>Create the site: <pre><code>mkdocs new my-mkdocs-site\n</code></pre></li> <li>Navigate into the new directory: <pre><code>cd my-mkdocs-site\n</code></pre></li> </ol>"},{"location":"SSGNotes/mkdocs/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be running at <code>http://127.0.0.1:8000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/mkdocs/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>MkDocs uses Jinja2 templates for customization. To apply custom HTML and styles, you must override files from the base theme.</p>"},{"location":"SSGNotes/mkdocs/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-mkdocs-site/\n\u251c\u2500\u2500 venv/                    # \u26a0\ufe0f Python Virtual Environment (ignored by Git)\n\u251c\u2500\u2500 site/                    # \u26a0\ufe0f Generated static site (Publish Directory for Netlify)\n\u251c\u2500\u2500 docs/                    # Source files for site content\n\u2502   \u251c\u2500\u2500 index.md             # Site homepage content\n\u2502   \u251c\u2500\u2500 about.md             # An example content page\n\u2502   \u2514\u2500\u2500 css/                 # Static assets used by Markdown content (e.g., images)\n\u2502       \u2514\u2500\u2500 custom.css       # Linked via markdown/theme\n\u251c\u2500\u2500 overrides/               # Custom theme overrides for Jinja2 templates and assets\n\u2502   \u251c\u2500\u2500 main.html            # Custom Layout (overrides base template)\n\u2502   \u251c\u2500\u2500 partials/            # Custom Partials (e.g., header, footer includes)\n\u2502   \u2502   \u2514\u2500\u2500 footer.html\n\u2502   \u2514\u2500\u2500 main.css             # Custom CSS linked via main.html\n\u251c\u2500\u2500 mkdocs.yml               # Main site configuration (theme, navigation, extensions)\n\u2514\u2500\u2500 requirements.txt         # Lists Python dependencies for Netlify\n</code></pre>"},{"location":"SSGNotes/mkdocs/#22-configure-custom-theme-overrides","title":"2.2. Configure Custom Theme Overrides","text":"<p>To customize the default theme's structure, you must tell MkDocs where your custom templates are located.</p> <ol> <li>Create the Overrides directory: <pre><code>mkdir overrides\nmkdir overrides/partials\n</code></pre></li> <li>Update <code>mkdocs.yml</code>:<ul> <li>File: <code>mkdocs.yml</code> <pre><code>site_name: My MkDocs Documentation\n\n# Configure the theme and point to your overrides folder\ntheme:\n  name: readthedocs # or 'material', 'mkdocs' etc.\n  custom_dir: overrides\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/mkdocs/#23-create-the-custom-layout-mainhtml","title":"2.3. Create the Custom Layout (<code>main.html</code>)","text":"<p>To customize the main page layout, you typically override the theme's core template file (often named <code>main.html</code> or <code>base.html</code>).</p> <ol> <li>Create the Main Layout Override:<ul> <li>File: <code>overrides/main.html</code></li> <li>Note: You must copy the existing theme's <code>main.html</code> content and modify it, or extend it using Jinja2. For simplicity, we'll assume a basic override and include a custom partial.  <pre><code>{% extends \"base.html\" %} \n\n{# This extends the base layout of the chosen theme (e.g., readthedocs) #}\n\n{% block content %}\n  {# Existing theme content goes here, e.g., {% include \"content.html\" %} #}\n  {{ super() }} \n\n  {# Include your custom footer partial here #}\n  {% include \"partials/footer.html\" %}\n{% endblock %}\n\n{% block extra_head %}\n  {{ super() }}\n  &lt;link rel=\"stylesheet\" href=\"{{ config.theme.custom_dir }}/main.css\"&gt; \n{% endblock %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/mkdocs/#24-create-partials-includes","title":"2.4. Create Partials (Includes)","text":"<ol> <li>Create the Footer Partial:<ul> <li>File: <code>overrides/partials/footer.html</code> <pre><code>&lt;footer class=\"custom-footer\"&gt;\n    &lt;p&gt;&amp;copy; {{ config.site_name }} {{ today.year }}&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/mkdocs/#25-manage-static-assets-custom-css","title":"2.5. Manage Static Assets (Custom CSS)","text":"<ol> <li>Add Custom CSS: Place styling directly in the <code>overrides</code> folder and link it in the <code>main.html</code> file (as done in Step 2.3).<ul> <li>File: <code>overrides/main.css</code> <pre><code>/* Custom styles for the site */\n.custom-footer {\n    text-align: center;\n    margin-top: 30px;\n    padding-top: 15px;\n    border-top: 1px solid #eee;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/mkdocs/#26-final-local-check","title":"2.6. Final Local Check","text":"<ol> <li>Run the server again: <pre><code>mkdocs serve\n</code></pre>     Verify that your custom layout and footer partial are visible and the CSS is applied.</li> </ol>"},{"location":"SSGNotes/mkdocs/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/mkdocs/#31-create-dependencies-file","title":"3.1. Create Dependencies File","text":"<p>Since Netlify will run the build remotely, you need a list of Python dependencies.</p> <ol> <li>Create the dependency file: <pre><code>pip freeze &gt; requirements.txt\n</code></pre>     This file should contain <code>mkdocs</code> (and any other themes or plugins you installed).</li> </ol>"},{"location":"SSGNotes/mkdocs/#32-verify-gitignore","title":"3.2. Verify <code>.gitignore</code>","text":"<p>Ensure the build output, environment, and caches are ignored.</p> <pre><code>touch .gitignore\necho \"/venv/\" &gt;&gt; .gitignore\necho \"/site/\" &gt;&gt; .gitignore  # The output folder\n</code></pre>"},{"location":"SSGNotes/mkdocs/#33-commit-and-push-to-github","title":"3.3. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add files and commit: <pre><code>git add .\ngit commit -m \"Initial MkDocs setup with custom theme overrides\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-mkdocs-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/mkdocs/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/mkdocs/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-mkdocs-netlify</code>).</li> </ol>"},{"location":"SSGNotes/mkdocs/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify automatically detects the <code>requirements.txt</code> file and sets up a Python environment, but you must explicitly specify the build command and output directory.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>mkdocs build</code> The command to generate the static site. Publish directory <code>site</code> The folder MkDocs outputs the static files to."},{"location":"SSGNotes/mkdocs/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Detect and install Python and the packages listed in <code>requirements.txt</code>.</li> <li>Run the build command: <code>mkdocs build</code>.</li> <li>Publish the contents of the <code>site</code> directory.</li> </ol> <p>Your documentation site is now live with continuous deployment.</p>"},{"location":"SSGNotes/mkdocs/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now fully automated:</p> <ol> <li>Make changes locally (update Markdown files in <code>docs/</code>, edit templates in <code>overrides/</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated installation steps and fixed custom footer.\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the MkDocs build process, and deploys the new documentation live.</li> </ol>"},{"location":"SSGNotes/next-js/","title":"Next.js","text":"<p>Setting up a Next.js site with Netlify is a popular and powerful combination, especially when leveraging Next.js's Static Site Generation (SSG) capabilities. This guide focuses on building a static Next.js site and deploying it seamlessly.</p>"},{"location":"SSGNotes/next-js/#1-local-nextjs-setup-and-project-initialization","title":"1. Local Next.js Setup and Project Initialization","text":"<p>Next.js is a React framework that requires Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/next-js/#11-create-a-new-nextjs-project","title":"1.1. Create a New Next.js Project","text":"<p>The recommended way to start a Next.js project is by using <code>create-next-app</code>.</p> <ol> <li> <p>Create the site:</p> <pre><code>npx create-next-app@latest my-nextjs-site\n</code></pre> </li> <li> <p>Follow the setup wizard:</p> <ul> <li>Would you like to use TypeScript? No (or Yes, if preferred)</li> <li>Would you like to use ESLint? Yes</li> <li>Would you like to use Tailwind CSS? No (or Yes, if preferred)</li> <li>Would you like to use <code>src/</code> directory? Yes (Recommended for structure)</li> <li>Would you like to use App Router? No (We will use the Pages Router for simpler static setup)</li> <li>Would you like to customize the default import alias? No</li> </ul> </li> <li> <p>Navigate into the new directory:</p> <pre><code>cd my-nextjs-site\n</code></pre> </li> </ol>"},{"location":"SSGNotes/next-js/#12-local-test","title":"1.2. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>npm run dev\n</code></pre> <p>Your site will be running at <code>http://localhost:3000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/next-js/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Next.js uses React components for layouts and partials. We'll use the Pages Router structure and define a root layout.</p>"},{"location":"SSGNotes/next-js/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-nextjs-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 .next/                   # \u26a0\ufe0f Generated output/cache (ignored by Git)\n\u251c\u2500\u2500 out/                     # \u26a0\ufe0f Generated static site (Publish Directory for Netlify)\n\u251c\u2500\u2500 public/                  # Static assets copied directly to the output root\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u2514\u2500\u2500 logo.svg\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/          # Reusable React components (Partials/UI elements)\n\u2502   \u2502   \u251c\u2500\u2500 Footer.js\n\u2502   \u2502   \u2514\u2500\u2500 Header.js\n\u2502   \u251c\u2500\u2500 styles/              # Global styles\n\u2502   \u2502   \u2514\u2500\u2500 globals.css\n\u2502   \u2514\u2500\u2500 pages/               # Top-level pages (creates site routes)\n\u2502       \u251c\u2500\u2500 _app.js          # Next.js Custom App: Defines the global layout/wrapper\n\u2502       \u251c\u2500\u2500 _document.js     # Custom Document: Modifies &lt;html&gt; and &lt;body&gt; tags\n\u2502       \u2514\u2500\u2500 index.js         # The site homepage (/)\n\u251c\u2500\u2500 next.config.mjs          # Next.js framework configuration\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 tsconfig.json            # TypeScript configuration (if used)\n</code></pre>"},{"location":"SSGNotes/next-js/#22-create-the-custom-layout-_appjs","title":"2.2. Create the Custom Layout (<code>_app.js</code>)","text":"<p>In the Pages Router, the <code>_app.js</code> file is the ideal place to define a global layout that wraps every page.</p> <ol> <li> <p>Create Components directory:</p> <pre><code>mkdir src/components\n</code></pre> </li> <li> <p>Open or create the Custom App file:</p> <ul> <li>File: <code>src/pages/_app.js</code></li> </ul> <pre><code>import '@/styles/globals.css';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\n\n// The Component prop is the active page (e.g., pages/index.js)\n// The pageProps are the props the page receives (e.g., from getStaticProps)\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;main&gt;\n        &lt;Component {...pageProps} /&gt; \n      &lt;/main&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> </li> </ol>"},{"location":"SSGNotes/next-js/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<ol> <li>Create Header Component:<ul> <li>File: <code>src/components/Header.js</code> <pre><code>import Link from 'next/link';\n\nexport default function Header() {\n  return (\n    &lt;header style={{ borderBottom: '1px solid #ccc', padding: '15px 0' }}&gt;\n      &lt;nav&gt;\n        &lt;Link href=\"/\" style={{ marginRight: '15px' }}&gt;Home&lt;/Link&gt;\n        &lt;Link href=\"/about\"&gt;About&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/header&gt;\n  );\n}\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>src/components/Footer.js</code> <pre><code>export default function Footer() {\n  return (\n    &lt;footer style={{ marginTop: '50px', paddingTop: '20px', borderTop: '1px solid #ccc', textAlign: 'center' }}&gt;\n      &lt;p&gt;&amp;copy; {new Date().getFullYear()} Next.js Site&lt;/p&gt;\n    &lt;/footer&gt;\n  );\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/next-js/#24-configure-nextjs-for-static-export","title":"2.4. Configure Next.js for Static Export","text":"<p>To deploy to Netlify as a purely static site (HTML, CSS, JS), you must configure Next.js to export the project to a directory (default is <code>out/</code>).</p> <ol> <li> <p>Open the configuration file:</p> <ul> <li>File: <code>next.config.mjs</code></li> </ul> </li> <li> <p>Add the <code>output: 'export'</code> property:</p> <pre><code>/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Tells Next.js to export to the 'out' directory\n\n  // Optional: Disable server-side features that won't work with static export\n  // trailingSlash: true, \n  // images: { unoptimized: true },\n};\n\nexport default nextConfig;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/next-js/#25-final-local-check","title":"2.5. Final Local Check","text":"<ol> <li>Build the static site: <pre><code>npm run build\n</code></pre> This creates the static HTML files in the <code>out/</code> directory.</li> <li>Install a simple static file server (optional, but helpful):     <pre><code>npm install -g serve\n</code></pre></li> <li>Serve the output directory: <pre><code>serve out\n</code></pre> Verify the fully static site is working before deployment.</li> </ol>"},{"location":"SSGNotes/next-js/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/next-js/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the build output. Ensure it contains:</p> <pre><code># Next.js build and cache\n.next/\n/out/\n</code></pre>"},{"location":"SSGNotes/next-js/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Next.js static site setup\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-nextjs-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/next-js/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/next-js/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-nextjs-netlify</code>).</li> </ol>"},{"location":"SSGNotes/next-js/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Since we configured Next.js to export statically, the settings are straightforward.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>npm run build</code> Runs the script, which now executes the static export. Publish directory <code>out</code> The folder defined by <code>output: 'export'</code> in <code>next.config.mjs</code>."},{"location":"SSGNotes/next-js/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code.</li> <li>Install Node.js dependencies.</li> <li>Run the build command (<code>npm run build</code>), which generates the static site into the <code>out/</code> folder.</li> <li>Publish the contents of the <code>out</code> directory.</li> </ol> <p>Your static Next.js site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/next-js/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update components in <code>src/components</code>, edit pages in <code>src/pages</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated homepage content and added about link\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the <code>npm run build</code> command (which executes the static export), and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/nuxt-js/","title":"Nuxt.js","text":"<p>Setting up a Nuxt.js site with Netlify, especially utilizing its Static Site Generation (SSG) mode, results in a highly performant, serverless application powered by Vue.js.</p> <p>Here is a detailed, step-by-step guide focusing on the necessary configuration for Netlify deployment.</p>"},{"location":"SSGNotes/nuxt-js/#1-local-nuxtjs-setup-and-project-initialization","title":"1. Local Nuxt.js Setup and Project Initialization","text":"<p>Nuxt.js is a Vue.js framework built on Node.js. You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/nuxt-js/#11-create-a-new-nuxtjs-project","title":"1.1. Create a New Nuxt.js Project","text":"<p>The recommended way to start a Nuxt.js project is by using the <code>npx create-nuxt-app</code> command (for Nuxt 2) or the <code>npx nuxi init</code> command (for Nuxt 3). We'll use Nuxt 3 for the modern approach.</p> <ol> <li>Initialize the project: <pre><code>npx nuxi init my-nuxtjs-site\n</code></pre></li> <li>Navigate into the directory and install dependencies: <pre><code>cd my-nuxtjs-site\nnpm install\n# OR: yarn install / pnpm install\n</code></pre></li> <li>Configure for Static Output (SSG): For simple static sites on Netlify, Nuxt 3 uses a default build that generates highly optimized static files. We will confirm the proper generation step later.</li> </ol>"},{"location":"SSGNotes/nuxt-js/#12-local-test","title":"1.2. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>npm run dev\n# OR: yarn dev / pnpm dev\n</code></pre> <p>Your site will be running at <code>http://localhost:3000/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/nuxt-js/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Nuxt uses a clear, convention-based file structure for defining routes, layouts, and components.</p>"},{"location":"SSGNotes/nuxt-js/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-nuxtjs-site/\n\u251c\u2500\u2500 .nuxt/                   # \u26a0\ufe0f Generated code and cache (ignored by Git)\n\u251c\u2500\u2500 .output/                 # \u26a0\ufe0f Build output directory (Publish Directory for Netlify)\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 public/                  # Static assets copied directly to the output root\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u2514\u2500\u2500 logo.svg\n\u251c\u2500\u2500 assets/                  # Non-processed assets (fonts, global CSS/SCSS)\n\u2502   \u2514\u2500\u2500 main.css             # Global CSS file\n\u251c\u2500\u2500 components/              # Reusable Vue components (Partials/UI elements)\n\u2502   \u251c\u2500\u2500 AppFooter.vue\n\u2502   \u2514\u2500\u2500 AppHeader.vue\n\u251c\u2500\u2500 layouts/                 # Defines custom layouts that wrap pages\n\u2502   \u2514\u2500\u2500 default.vue          # The main HTML skeleton (Layout)\n\u251c\u2500\u2500 pages/                   # Vue components that automatically become site routes\n\u2502   \u251c\u2500\u2500 index.vue            # The site homepage (/)\n\u2502   \u2514\u2500\u2500 about.vue            # The '/about' page\n\u251c\u2500\u2500 nuxt.config.ts           # Main Nuxt configuration (modules, build settings)\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 tsconfig.json            # TypeScript configuration (if used)\n</code></pre>"},{"location":"SSGNotes/nuxt-js/#22-create-the-default-layout","title":"2.2. Create the Default Layout","text":"<p>The default layout wraps all pages that do not specify a different layout.</p> <ol> <li> <p>Create the Layouts directory and file:</p> <pre><code>mkdir layouts\ntouch layouts/default.vue\n</code></pre> </li> <li> <p>Define the Layout:</p> <ul> <li>File: <code>layouts/default.vue</code></li> </ul> <pre><code>&lt;template&gt;\n  &lt;div class=\"app-wrapper\"&gt;\n    &lt;AppHeader /&gt;\n    &lt;main class=\"page-content\"&gt;\n      &lt;slot /&gt; &lt;/main&gt;\n    &lt;AppFooter /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport AppHeader from '@/components/AppHeader.vue';\nimport AppFooter from '@/components/AppFooter.vue';\n&lt;/script&gt;\n\n&lt;style&gt;\n/* Import global styles from the assets directory */\n@import '~/assets/main.css'; \n&lt;/style&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/nuxt-js/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<ol> <li>Create Header Component:<ul> <li>File: <code>components/AppHeader.vue</code> <pre><code>&lt;template&gt;\n  &lt;header&gt;\n    &lt;nav&gt;\n      &lt;NuxtLink to=\"/\"&gt;Home&lt;/NuxtLink&gt;\n      &lt;NuxtLink to=\"/about\"&gt;About&lt;/NuxtLink&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n&lt;/template&gt;\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>components/AppFooter.vue</code> <pre><code>&lt;template&gt;\n  &lt;footer&gt;\n    &lt;p&gt;&amp;copy; {{ new Date().getFullYear() }} Nuxt Site&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/template&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/nuxt-js/#24-manage-static-assets","title":"2.4. Manage Static Assets","text":"<ol> <li>Assets (<code>assets/</code>): For files you want included in the build process (like global styles, fonts).<ul> <li>File: <code>assets/main.css</code> (Add some basic CSS here).</li> </ul> </li> <li>Public (<code>public/</code>): For files that are copied directly to the output root (e.g., <code>favicon.ico</code>, <code>robots.txt</code>).</li> </ol>"},{"location":"SSGNotes/nuxt-js/#25-final-local-check","title":"2.5. Final Local Check","text":"<ol> <li> <p>Build the static site:</p> <pre><code>npm run generate\n# OR: yarn generate / pnpm generate\n</code></pre> <p>Note: In Nuxt 3, the output for static generation is often handled by the <code>nuxi generate</code> command, which builds the files and places them inside the <code>.output/public</code> directory by default.</p> </li> <li> <p>Run the preview command (recommended to test the static output):</p> <pre><code>npm run preview\n</code></pre> <p>Verify the static site structure before deployment.</p> </li> </ol>"},{"location":"SSGNotes/nuxt-js/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/nuxt-js/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the built site and cache. Ensure it contains:</p> <pre><code># Nuxt build and cache\n.nuxt/\n.output/\n\n# Node dependencies\n/node_modules/\n</code></pre>"},{"location":"SSGNotes/nuxt-js/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial Nuxt 3 static site setup\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-nuxt-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/nuxt-js/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/nuxt-js/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-nuxt-netlify</code>).</li> </ol>"},{"location":"SSGNotes/nuxt-js/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>When deploying a static Nuxt 3 site, you need to tell Netlify to use the SSG build command and point to the static output directory.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>npm run generate</code> This command executes the SSG build. Publish directory <code>.output/public</code> The default folder where Nuxt 3 places static files after running <code>generate</code>."},{"location":"SSGNotes/nuxt-js/#43-set-environment-variable-crucial-for-nuxt-3","title":"4.3. Set Environment Variable (Crucial for Nuxt 3)","text":"<p>For Nuxt 3 to build correctly in the Netlify environment, you must explicitly set a Node.js environment variable.</p> <ol> <li>In the Netlify deploy settings, click \"Show advanced\".</li> <li>Add a new environment variable:<ul> <li>Key: <code>NUXT_PUBLIC_BASE_URL</code></li> <li>Value: <code>/</code> (This ensures all paths are relative to the root for static serving.)</li> </ul> </li> </ol>"},{"location":"SSGNotes/nuxt-js/#44-deploy-the-site","title":"4.4. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code and install dependencies.</li> <li>Run the build command (<code>npm run generate</code>).</li> <li>Publish the contents of the <code>.output/public</code> directory.</li> </ol> <p>Your static Nuxt.js site will be live with continuous deployment.</p>"},{"location":"SSGNotes/nuxt-js/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update components or pages).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated header navigation and fixed styles\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Nuxt SSG build, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/pelican/","title":"Pelican","text":"<p>Setting up a Pelican site with Netlify provides a powerful static publishing workflow using Python. This guide covers the complete process, including creating custom templates, managing assets, and configuring Netlify for continuous deployment in a Python environment.</p>"},{"location":"SSGNotes/pelican/#1-local-pelican-setup-and-project-initialization","title":"1. Local Pelican Setup and Project Initialization","text":"<p>Pelican is a Python-based static site generator, requiring a Python environment and <code>pip</code>.</p>"},{"location":"SSGNotes/pelican/#11-install-prerequisites-and-pelican","title":"1.1. Install Prerequisites and Pelican","text":"<ol> <li>Install Python (3.7+ recommended).</li> <li>Create a virtual environment (recommended to isolate dependencies):     <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\n</code></pre></li> <li>Install Pelican and Markdown dependencies: <pre><code>pip install pelican markdown\n</code></pre></li> </ol>"},{"location":"SSGNotes/pelican/#12-create-a-new-pelican-site","title":"1.2. Create a New Pelican Site","text":"<p>Use Pelican's quickstart script to generate the basic directory structure.</p> <ol> <li> <p>Run the quickstart wizard:</p> <pre><code>pelican-quickstart\n</code></pre> </li> <li> <p>Follow the prompts:</p> <ul> <li>Where do you want to create your new web site? <code>my-pelican-site</code> (or preferred name)</li> <li>Answer the questions regarding Title, Author, URL prefix (usually fine to leave blank for local development), and default language.</li> <li>Do you want to specify a URL prefix? No</li> <li>Do you want to generate a Fabfile/Makefile? Yes (This creates handy build scripts)</li> </ul> </li> <li> <p>Navigate into the new directory:</p> <pre><code>cd my-pelican-site\n</code></pre> </li> </ol>"},{"location":"SSGNotes/pelican/#13-local-test","title":"1.3. Local Test","text":"<p>Use the provided <code>Makefile</code> to generate and serve the site locally.</p> <pre><code>make html   # Generates static files into the output directory (default: output)\nmake serve  # Serves the generated site at http://localhost:8000/\n</code></pre> <p>Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/pelican/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>Pelican uses the Jinja2 templating engine, which organizes templates into the <code>theme</code> directory.</p>"},{"location":"SSGNotes/pelican/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-pelican-site/\n\u251c\u2500\u2500 venv/                    # \u26a0\ufe0f Python Virtual Environment (ignored by Git)\n\u251c\u2500\u2500 output/                  # \u26a0\ufe0f Generated static site (ignored by Git)\n\u251c\u2500\u2500 content/                 # Source content files (Markdown, reStructuredText)\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u2514\u2500\u2500 about.md         # Content for an 'About' page\n\u2502   \u2514\u2500\u2500 first-post.md        # Blog post content\n\u251c\u2500\u2500 theme/                   # Custom theme files\n\u2502   \u251c\u2500\u2500 static/              # Static files unique to the theme (CSS, JS)\n\u2502   \u2502   \u2514\u2500\u2500 style.css        # Custom CSS file\n\u2502   \u2514\u2500\u2500 templates/           # Jinja2 templates for structure\n\u2502       \u251c\u2500\u2500 base.html        # The main HTML skeleton (Layout)\n\u2502       \u251c\u2500\u2500 includes/        # Reusable snippets (Partials)\n\u2502       \u2502   \u2514\u2500\u2500 header.html\n\u2502       \u251c\u2500\u2500 article.html     # Template for individual blog posts\n\u2502       \u2514\u2500\u2500 index.html       # Template for the homepage/article listing\n\u251c\u2500\u2500 pelicanconf.py           # Main site settings (theme path, language, pagination)\n\u251c\u2500\u2500 publishconf.py           # Settings specific to production/publishing\n\u251c\u2500\u2500 requirements.txt         # Lists Python dependencies for Netlify\n\u2514\u2500\u2500 Makefile                 # Build scripts\n</code></pre>"},{"location":"SSGNotes/pelican/#22-configure-the-custom-theme","title":"2.2. Configure the Custom Theme","text":"<ol> <li>Create the theme directory structure: <pre><code>mkdir -p theme/static theme/templates/includes\n</code></pre></li> <li>Update <code>pelicanconf.py</code>: Tell Pelican where to find the custom theme. Open <code>pelicanconf.py</code> and ensure the <code>THEME</code> variable points to your custom theme directory:     <pre><code># pelicanconf.py\nTHEME = 'theme'\n</code></pre></li> </ol>"},{"location":"SSGNotes/pelican/#23-create-the-base-layout","title":"2.3. Create the Base Layout","text":"<p>The base template defines the common HTML structure and includes the header/footer.</p> <ol> <li>Create the Base Template:<ul> <li>File: <code>theme/templates/base.html</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"{{ lang }}\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}{{ SITENAME }}{% endblock %}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ SITEURL }}/theme/css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% include 'includes/header.html' %}  &lt;main id=\"content\"&gt;\n        {% block content %}{% endblock %} &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; {{ CURRENT_YEAR }} {{ AUTHOR }}&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/pelican/#24-create-partials-includes","title":"2.4. Create Partials (Includes)","text":"<p>Partials are reusable snippets placed in the <code>includes</code> folder.</p> <ol> <li>Create Header Partial:<ul> <li>File: <code>theme/templates/includes/header.html</code> <pre><code>&lt;header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"{{ SITEURL }}/\"&gt;Home&lt;/a&gt;\n        {% for page in pages %}\n            &lt;a href=\"{{ SITEURL }}/{{ page.url }}\"&gt;{{ page.title }}&lt;/a&gt;\n        {% endfor %}\n    &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/pelican/#25-implement-the-article-template","title":"2.5. Implement the Article Template","text":"<p>This template extends the base layout and adds specific structure for content pages.</p> <ol> <li>Create the Article Template:<ul> <li>File: <code>theme/templates/article.html</code> <pre><code>{% extends \"base.html\" %}\n{% block title %}{{ article.title }}{% endblock %}\n\n{% block content %}\n    &lt;article&gt;\n        &lt;h1&gt;{{ article.title }}&lt;/h1&gt;\n        &lt;p class=\"meta\"&gt;Published on: {{ article.date | strftime('%Y-%m-%d') }}&lt;/p&gt;\n        {{ article.content }}\n    &lt;/article&gt;\n{% endblock %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/pelican/#26-manage-static-assets","title":"2.6. Manage Static Assets","text":"<p>Pelican serves assets from the theme's <code>static/</code> folder using the path <code>/theme/</code>.</p> <ol> <li>Add Custom CSS:<ul> <li>File: <code>theme/static/css/style.css</code> <pre><code>body {\n    font-family: sans-serif;\n    margin: 0 auto;\n    max-width: 960px;\n    padding: 20px;\n}\nheader {\n    border-bottom: 2px solid #333;\n    padding-bottom: 15px;\n    margin-bottom: 30px;\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/pelican/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/pelican/#31-create-dependencies-file","title":"3.1. Create Dependencies File","text":"<p>Since Netlify will run the build remotely, you need a list of dependencies.</p> <ol> <li>Create the dependency file: <pre><code>pip freeze &gt; requirements.txt\n</code></pre>     This file should contain <code>pelican</code> and <code>markdown</code>.</li> </ol>"},{"location":"SSGNotes/pelican/#32-verify-gitignore","title":"3.2. Verify <code>.gitignore</code>","text":"<p>Ensure the build output, environment, and caches are ignored.</p> <pre><code>touch .gitignore\necho \"/venv/\" &gt;&gt; .gitignore\necho \"/output/\" &gt;&gt; .gitignore\necho \"/__pycache__/\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"SSGNotes/pelican/#33-commit-and-push-to-github","title":"3.3. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add files and commit: <pre><code>git add .\ngit commit -m \"Initial Pelican site with custom theme and dependencies\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-pelican-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/pelican/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":"<p>Since Pelican is a Python tool, you must configure the Netlify build process to install the necessary environment.</p>"},{"location":"SSGNotes/pelican/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-pelican-site</code>).</li> </ol>"},{"location":"SSGNotes/pelican/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Because Pelican requires a custom environment and command, you must specify them manually.</p> Setting Value Note Branch to deploy <code>main</code> The branch Netlify monitors. Build command <code>pelican content -s publishconf.py</code> This command uses the production settings file to generate the final site. Publish directory <code>output</code> The directory specified by Pelican's default settings."},{"location":"SSGNotes/pelican/#43-netlify-build-environment","title":"4.3. Netlify Build Environment","text":"<p>Netlify will automatically detect the <code>requirements.txt</code> file and install Python dependencies. You may optionally set the Python version.</p> <ol> <li>In the Netlify deploy settings, click \"Show advanced\".</li> <li>Add a new environment variable:<ul> <li>Key: <code>PYTHON_VERSION</code></li> <li>Value: (e.g., <code>3.10</code>)</li> </ul> </li> </ol>"},{"location":"SSGNotes/pelican/#44-deploy-the-site","title":"4.4. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Detect and install Python and the packages listed in <code>requirements.txt</code>.</li> <li>Run the build command: <code>pelican content -s publishconf.py</code>.</li> <li>Publish the contents of the <code>output</code> directory.</li> </ol> <p>Your Pelican site is now live with continuous deployment.</p>"},{"location":"SSGNotes/pelican/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now fully automated:</p> <ol> <li>Make changes locally (update content in <code>content/</code>, edit templates in <code>theme/templates/</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added new article and fixed layout\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Pelican build process, and deploys the new version live.</li> </ol>"},{"location":"SSGNotes/vite/","title":"Vite","text":"<p>Setting up a static React site (using Vite for modern build tooling) with Netlify is a quick, high-performance solution for single-page applications (SPAs) and static websites.</p> <p>Here is a detailed, step-by-step guide covering the entire process.</p>"},{"location":"SSGNotes/vite/#1-local-react-vite-setup-and-project-initialization","title":"1. Local React (Vite) Setup and Project Initialization","text":"<p>We'll use Vite as the build tool, which is faster and easier to configure for a simple React SPA than the traditional Create React App (CRA). You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/vite/#11-create-a-new-react-project","title":"1.1. Create a New React Project","text":"<ol> <li>Initialize the project using Vite: <pre><code>npm create vite@latest my-react-site -- --template react\n</code></pre></li> <li>Navigate into the directory and install dependencies: <pre><code>cd my-react-site\nnpm install\n</code></pre></li> </ol>"},{"location":"SSGNotes/vite/#12-local-test","title":"1.2. Local Test","text":"<p>Run the development server to verify the default site.</p> <pre><code>npm run dev\n</code></pre> <p>Your site will be running at <code>http://localhost:5173/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/vite/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>In a typical static React application, Layouts are implemented as parent components, and Partials are reusable child components.</p>"},{"location":"SSGNotes/vite/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-react-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 dist/                    # \u26a0\ufe0f Generated static site (Publish Directory for Netlify)\n\u251c\u2500\u2500 public/                  # Static assets copied directly to the output root\n\u2502   \u251c\u2500\u2500 favicon.svg\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 src/                     # All source code\n\u2502   \u251c\u2500\u2500 components/          # Reusable React components (Partials/UI elements)\n\u2502   \u2502   \u251c\u2500\u2500 Footer.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Header.jsx\n\u2502   \u251c\u2500\u2500 layouts/             # Layout components (Wrappers for pages/routes)\n\u2502   \u2502   \u2514\u2500\u2500 MainLayout.jsx\n\u2502   \u251c\u2500\u2500 App.jsx              # Main application component, usually uses the Layout\n\u2502   \u251c\u2500\u2500 main.jsx             # Entry file (renders App.jsx)\n\u2502   \u2514\u2500\u2500 index.css            # Global application styles\n\u251c\u2500\u2500 index.html               # Main HTML entry file\n\u251c\u2500\u2500 package.json             # Node.js dependencies and run scripts\n\u2514\u2500\u2500 vite.config.js           # Vite build configuration\n</code></pre>"},{"location":"SSGNotes/vite/#22-create-the-custom-layout","title":"2.2. Create the Custom Layout","text":"<p>The Layout component wraps the main content and provides consistent structure (header, footer, shared styling).</p> <ol> <li>Create the Layouts directory: <pre><code>mkdir src/layouts\n</code></pre></li> <li>Create the Main Layout Component:<ul> <li>File: <code>src/layouts/MainLayout.jsx</code> <pre><code>import React from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nconst MainLayout = ({ children }) =&gt; {\n  return (\n    &lt;div className=\"app-container\"&gt;\n      &lt;Header /&gt;\n      &lt;main className=\"content\"&gt;\n        {children} {/* Page content is injected via 'children' prop */}\n      &lt;/main&gt;\n      &lt;Footer /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MainLayout;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/vite/#23-create-components-partials","title":"2.3. Create Components (Partials)","text":"<ol> <li>Create the Components directory: <pre><code>mkdir src/components\n</code></pre></li> <li>Create Header Component:<ul> <li>File: <code>src/components/Header.jsx</code> <pre><code>import React from 'react';\n\nconst Header = () =&gt; (\n  &lt;header style={{ borderBottom: '1px solid #ddd', padding: '15px 0' }}&gt;\n    &lt;nav&gt;\n      &lt;a href=\"/\" style={{ marginRight: '15px' }}&gt;Home&lt;/a&gt;\n      &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n);\n\nexport default Header;\n</code></pre></li> </ul> </li> <li>Create Footer Component:<ul> <li>File: <code>src/components/Footer.jsx</code> <pre><code>import React from 'react';\n\nconst Footer = () =&gt; (\n  &lt;footer style={{ marginTop: '50px', paddingTop: '20px', borderTop: '1px solid #ddd', textAlign: 'center' }}&gt;\n    &lt;p&gt;&amp;copy; {new Date().getFullYear()} My React Site&lt;/p&gt;\n  &lt;/footer&gt;\n);\n\nexport default Footer;\n</code></pre></li> </ul> </li> </ol>"},{"location":"SSGNotes/vite/#24-apply-the-layout","title":"2.4. Apply the Layout","text":"<p>Update the main <code>App.jsx</code> component to use the new layout.</p> <ol> <li> <p>Update <code>src/App.jsx</code>:</p> <pre><code>import MainLayout from './layouts/MainLayout';\n\nfunction App() {\n  // In a real app, this would be a router (e.g., React Router) \n  // rendering different components based on the URL.\n  return (\n    &lt;MainLayout&gt;\n      &lt;h1&gt;Welcome to my React SPA!&lt;/h1&gt;\n      &lt;p&gt;This content is wrapped by the custom MainLayout.&lt;/p&gt;\n    &lt;/MainLayout&gt;\n  );\n}\n\nexport default App;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/vite/#25-manage-static-assets","title":"2.5. Manage Static Assets","text":"<p>Assets in the <code>public/</code> folder are copied directly to the root of the <code>dist/</code> folder during the build.</p> <ol> <li>Add a Custom Asset: Place a logo in <code>public/images/logo.png</code>.</li> <li>Reference the asset: You can reference it directly from the root path in your HTML or JSX:     <pre><code>// In any component:\n&lt;img src=\"/images/logo.png\" alt=\"Site Logo\" /&gt;\n</code></pre></li> </ol>"},{"location":"SSGNotes/vite/#26-final-local-check","title":"2.6. Final Local Check","text":"<ol> <li>Build the static site: <pre><code>npm run build\n</code></pre> This creates the static HTML, CSS, and JS files in the <code>dist/</code> directory.</li> <li>Run the preview server: <pre><code>npm run preview\n</code></pre> Verify the fully static site is working before deployment.</li> </ol>"},{"location":"SSGNotes/vite/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/vite/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The generated <code>.gitignore</code> file should correctly exclude the build output and Node modules. Ensure it contains:</p> <pre><code># Build output\n/dist\n\n# Node dependencies\n/node_modules\n</code></pre>"},{"location":"SSGNotes/vite/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git (if not already done by Vite):     <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial React site with custom layout and components\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-react-netlify-site</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/vite/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/vite/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-react-netlify-site</code>).</li> </ol>"},{"location":"SSGNotes/vite/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify often auto-detects React/Vite projects, but you must confirm the settings.</p> Setting Value Note Branch to deploy <code>main</code> The main branch of your repository. Build command <code>npm run build</code> Runs the script defined in your <code>package.json</code> to create the static bundle. Publish directory <code>dist</code> The default folder where Vite outputs the static files."},{"location":"SSGNotes/vite/#43-configure-netlify-redirects-crucial-for-spas","title":"4.3. Configure Netlify Redirects (Crucial for SPAs)","text":"<p>Since React is an SPA (Single Page Application), Netlify needs to know that any path should fall back to the main <code>index.html</code> file.</p> <ol> <li> <p>Create the Netlify configuration file:</p> <pre><code>touch public/_redirects\n</code></pre> </li> <li> <p>Add the redirect rule:</p> <ul> <li>File: <code>public/_redirects</code> (Since this is in the <code>public</code> folder, it will be copied to <code>dist/_redirects</code>.)</li> </ul> <pre><code>/* /index.html   200\n</code></pre> <p>This rule ensures that any request (<code>/*</code>) that doesn't match a static file is served by <code>index.html</code> with a 200 OK status, allowing the React Router to handle the URL.</p> </li> <li> <p>Commit and push the redirects file:</p> <pre><code>git add public/_redirects\ngit commit -m \"Added Netlify SPA redirect file\"\ngit push origin main\n</code></pre> </li> </ol>"},{"location":"SSGNotes/vite/#44-deploy-the-site","title":"4.4. Deploy the Site","text":"<p>Netlify will detect the new commit and automatically start the build and deploy process.</p> <p>Your static React site will be live and functional on a temporary Netlify URL.</p>"},{"location":"SSGNotes/vite/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>Your Continuous Deployment (CD) pipeline is now fully automated:</p> <ol> <li>Make changes locally (update components, add new routes).</li> <li>Commit your changes:     <pre><code>git commit -am \"Updated header navigation and added new content\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the Vite build (<code>npm run build</code>), and deploys the new static version live.</li> </ol>"},{"location":"SSGNotes/vuepress/","title":"VuePress","text":"<p>Setting up a VuePress site with Netlify provides an easy way to deploy a documentation or content-focused site powered by Vue.js. VuePress converts Markdown files into static HTML and runs entirely client-side, making it ideal for Netlify's static hosting.</p> <p>Here is a detailed, step-by-step guide covering installation, customization, and continuous deployment.</p>"},{"location":"SSGNotes/vuepress/#1-local-vuepress-setup-and-project-initialization","title":"1. Local VuePress Setup and Project Initialization","text":"<p>VuePress is a Node.js-based framework. You'll need Node.js and npm (or yarn/pnpm).</p>"},{"location":"SSGNotes/vuepress/#11-create-the-project-directory","title":"1.1. Create the Project Directory","text":"<ol> <li>Create the site directory: <pre><code>mkdir my-vuepress-site\ncd my-vuepress-site\n</code></pre></li> <li>Initialize a Node.js project: <pre><code>npm init -y\n# OR: yarn init -y\n</code></pre></li> </ol>"},{"location":"SSGNotes/vuepress/#12-install-vuepress","title":"1.2. Install VuePress","text":"<p>We will install VuePress as a local dependency.</p> <ol> <li> <p>Install VuePress:</p> <pre><code>npm install -D vuepress@next\n# OR: yarn add -D vuepress@next\n</code></pre> <p>Note: We are using VuePress 2 (<code>@next</code>), which has a slightly different setup than VuePress 1.</p> </li> <li> <p>Add build scripts: Open <code>package.json</code> and add the following scripts:</p> <pre><code>\"scripts\": {\n  \"docs:dev\": \"vuepress dev src\",\n  \"docs:build\": \"vuepress build src\"\n}\n</code></pre> </li> <li> <p>Create the Source Directory: VuePress defaults to using a <code>src</code> folder for its core files.</p> <pre><code>mkdir src\n</code></pre> </li> <li> <p>Create the Homepage: The <code>README.md</code> file acts as the homepage.</p> <pre><code>echo '# Hello VuePress' &gt; src/README.md\n</code></pre> </li> </ol>"},{"location":"SSGNotes/vuepress/#13-local-test","title":"1.3. Local Test","text":"<p>Run the development server to verify the basic site.</p> <pre><code>npm run docs:dev\n</code></pre> <p>Your site will be running at <code>http://localhost:8080/</code>. Press Ctrl+C to stop the server.</p>"},{"location":"SSGNotes/vuepress/#2-custom-layouts-partials-and-static-assets","title":"2. Custom Layouts, Partials, and Static Assets","text":"<p>VuePress follows a convention-over-configuration approach. Customization is handled through the <code>.vuepress</code> directory.</p>"},{"location":"SSGNotes/vuepress/#21-project-filefolder-structure-tree","title":"2.1. Project File/Folder Structure Tree","text":"<p>Your project structure, after customization, will look like this:</p> <pre><code>my-vuepress-site/\n\u251c\u2500\u2500 node_modules/            # Node.js dependencies\n\u251c\u2500\u2500 src/                     # Source directory for all content and config\n\u2502   \u251c\u2500\u2500 .vuepress/           # VuePress configuration and customization\n\u2502   \u2502   \u251c\u2500\u2500 client.js        # Client-side enhancements (e.g., component registration)\n\u2502   \u2502   \u251c\u2500\u2500 components/      # Reusable Vue components (Partials)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 CustomFooter.vue\n\u2502   \u2502   \u251c\u2500\u2500 config.js        # Main configuration (title, theme, plugins, navbar)\n\u2502   \u2502   \u251c\u2500\u2500 public/          # Static assets copied directly to output root (like favicon)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 logo.png\n\u2502   \u2502   \u2514\u2500\u2500 styles/          # Global styles (CSS/Sass)\n\u2502   \u2502       \u2514\u2500\u2500 index.css    # Global stylesheet\n\u2502   \u251c\u2500\u2500 README.md            # The site homepage (/)\n\u2502   \u2514\u2500\u2500 guide/\n\u2502       \u2514\u2500\u2500 intro.md         # A content page\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 package-lock.json\n</code></pre>"},{"location":"SSGNotes/vuepress/#22-configure-vuepress","title":"2.2. Configure VuePress","text":"<ol> <li> <p>Create the Configuration Directory:</p> <pre><code>mkdir -p src/.vuepress\n</code></pre> </li> <li> <p>Create the Config File:</p> <ul> <li>File: <code>src/.vuepress/config.js</code></li> </ul> <pre><code>import { defaultTheme } from 'vuepress'\n\nexport default {\n  lang: 'en-US',\n  title: 'My VuePress Site',\n  description: 'A static site deployed with Netlify',\n  base: '/', // Important: Use root path for Netlify hosting\n\n  theme: defaultTheme({\n    // Theme configuration options\n    navbar: [\n      { text: 'Home', link: '/' },\n      { text: 'Guide', link: '/guide/intro.html' },\n    ],\n    // Set the public folder for static assets\n    publicDir: 'src/.vuepress/public', \n  }),\n}\n</code></pre> </li> </ol>"},{"location":"SSGNotes/vuepress/#23-create-partials-components","title":"2.3. Create Partials (Components)","text":"<p>Components are reusable Vue files placed in the <code>.vuepress/components/</code> folder and can be used directly in any Markdown file.</p> <ol> <li> <p>Create the Components directory:</p> <pre><code>mkdir src/.vuepress/components\n</code></pre> </li> <li> <p>Create a Custom Footer Component:</p> <ul> <li>File: <code>src/.vuepress/components/CustomFooter.vue</code></li> </ul> <pre><code>&lt;template&gt;\n  &lt;footer style=\"text-align: center; margin-top: 50px; padding-top: 20px; border-top: 1px solid #eee;\"&gt;\n    &lt;p&gt;&amp;copy; {{ new Date().getFullYear() }} {{ $site.title }}&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// Access global site data via $site\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Include the Partial: Edit <code>src/README.md</code> and use the component tag directly:</p> <pre><code># Hello VuePress\n\nThis site is awesome and uses a custom component.\n\n&lt;CustomFooter/&gt;\n</code></pre> </li> </ol>"},{"location":"SSGNotes/vuepress/#24-manage-static-assets","title":"2.4. Manage Static Assets","text":"<ol> <li> <p>Global Styles:</p> <ul> <li>File: <code>src/.vuepress/styles/index.css</code></li> <li>Any styles in this file are injected globally.</li> </ul> </li> <li> <p>Static Assets: Place assets that should be copied directly (e.g., logo, favicon) into the <code>src/.vuepress/public/</code> folder. These assets can be referenced from the root in Markdown or HTML (e.g., <code>&lt;img src=\"/logo.png\"&gt;</code>).</p> </li> </ol>"},{"location":"SSGNotes/vuepress/#25-final-local-check","title":"2.5. Final Local Check","text":"<p>Run the server again:</p> <pre><code>npm run docs:dev\n</code></pre> <p>Verify that the custom component, global styles, and navigation are working.</p>"},{"location":"SSGNotes/vuepress/#3-github-setup","title":"3. GitHub Setup","text":""},{"location":"SSGNotes/vuepress/#31-verify-gitignore","title":"3.1. Verify <code>.gitignore</code>","text":"<p>The starter includes a <code>.gitignore</code> that correctly ignores the built site and cache. Ensure it contains:</p> <pre><code># VuePress build output\n/src/.vuepress/.temp/\n/src/.vuepress/.cache/\n/src/.vuepress/dist/  # The output folder (Default: .vuepress/dist)\n\n# Node dependencies\n/node_modules/\n</code></pre>"},{"location":"SSGNotes/vuepress/#32-commit-and-push-to-github","title":"3.2. Commit and Push to GitHub","text":"<ol> <li>Initialize Git: <pre><code>git init\n</code></pre></li> <li>Add all files and commit: <pre><code>git add .\ngit commit -m \"Initial VuePress site with custom component\"\n</code></pre></li> <li>Create a new repository on GitHub (e.g., named <code>my-vuepress-netlify</code>).</li> <li>Link your local repo and push: (Replace placeholders)     <pre><code>git remote add origin https://github.com/&lt;your_username&gt;/&lt;repo_name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"SSGNotes/vuepress/#4-netlify-setup-for-continuous-deployment","title":"4. Netlify Setup for Continuous Deployment","text":""},{"location":"SSGNotes/vuepress/#41-sign-up-and-import-project","title":"4.1. Sign Up and Import Project","text":"<ol> <li>Go to the Netlify website and log in.</li> <li>In the Netlify dashboard, click \"Add new site\" then \"Import an existing project\".</li> <li>Select \"GitHub\" and choose your repository (<code>my-vuepress-netlify</code>).</li> </ol>"},{"location":"SSGNotes/vuepress/#42-configure-build-settings","title":"4.2. Configure Build Settings","text":"<p>Netlify is optimized for VuePress and Node.js but needs explicit instructions on the build command and output directory.</p> Setting Value Note Base directory (Leave Blank) The repository root is the base. Build command <code>npm run docs:build</code> Runs the script defined in <code>package.json</code> to generate the static site. Publish directory <code>src/.vuepress/dist</code> The default folder VuePress 2 outputs the static files to."},{"location":"SSGNotes/vuepress/#43-deploy-the-site","title":"4.3. Deploy the Site","text":"<p>Click the \"Deploy site\" button. Netlify will:</p> <ol> <li>Fetch your GitHub code and install dependencies.</li> <li>Run the build command (<code>npm run docs:build</code>).</li> <li>Publish the contents of the <code>src/.vuepress/dist</code> directory.</li> </ol> <p>Your VuePress site will be live on a temporary Netlify URL.</p>"},{"location":"SSGNotes/vuepress/#5-ongoing-workflow","title":"5. Ongoing Workflow","text":"<p>The Continuous Deployment (CD) pipeline is now established:</p> <ol> <li>Make changes locally (update Markdown content, edit components, or adjust <code>config.js</code>).</li> <li>Commit your changes:     <pre><code>git commit -am \"Added new guide page and updated navigation.\"\n</code></pre></li> <li>Push to GitHub:     <pre><code>git push origin main\n</code></pre></li> <li>Netlify automatically detects the push, runs the VuePress build, and deploys the new version live.</li> </ol>"},{"location":"TechNotes/GitHub/","title":"GitHub","text":"<p>Initiating a Git repository, adding SSH keys, and managing remote origins are fundamental steps for using Git with platforms like GitHub. Here's a guide covering these actions using the command line.</p>"},{"location":"TechNotes/GitHub/#1-initiate-a-git-repository","title":"1. Initiate a Git Repository","text":"<p>This process starts tracking files in a directory with Git.</p> Command Description <code>cd /path/to/your/project</code> Navigate to your project's root directory. <code>git init</code> Initializes an empty Git repository in the directory. <code>git add .</code> Stages all current files for the first commit. <code>git commit -m \"Initial commit\"</code> Creates the first commit with a descriptive message. <code>git branch -M main</code> Renames the default branch (usually <code>master</code>) to <code>main</code> (a modern convention)."},{"location":"TechNotes/GitHub/#2-generate-and-add-ssh-keys","title":"2. Generate and Add SSH Keys","text":"<p>Using SSH for Git operations is more secure and convenient than HTTPS with a username and password/token, as it doesn't require repeated authentication.</p>"},{"location":"TechNotes/GitHub/#a-generate-an-ssh-key-pair","title":"A. Generate an SSH Key Pair","text":"<ol> <li> <p>Generate the key:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <ul> <li><code>-t ed25519</code>: Specifies the modern, recommended encryption algorithm.</li> <li><code>-C \"...\"</code>: Adds a comment to identify the key.</li> <li>Follow the prompts: You'll be asked where to save the key (default is usually <code>~/.ssh/id_ed25519</code>) and to enter a passphrase (highly recommended for security).</li> </ul> </li> <li> <p>Start the SSH agent and load the key:</p> <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n</code></pre> <p>(If you used a different filename, substitute it.)</p> </li> </ol>"},{"location":"TechNotes/GitHub/#b-add-the-public-key-to-github","title":"B. Add the Public Key to GitHub","text":"<ol> <li> <p>Copy the public key:</p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Copy the entire output, which starts with <code>ssh-ed25519</code> and ends with your email.</p> </li> <li> <p>Go to GitHub:</p> <ul> <li>Navigate to Settings (your profile picture).</li> <li>In the sidebar, click SSH and GPG keys.</li> <li>Click New SSH key or Add SSH key.</li> <li>Give it a descriptive Title (e.g., \"My Laptop Key\").</li> <li>Paste the public key you copied into the Key field.</li> <li>Click Add SSH key.</li> </ul> </li> <li> <p>Test the connection:</p> <pre><code>ssh -T git@github.com\n</code></pre> <ul> <li>You should see a message confirming your authentication, like: \"Hi username! You've successfully authenticated...\"</li> </ul> </li> </ol>"},{"location":"TechNotes/GitHub/#3-push-local-files-to-github-using-ssh","title":"3. Push Local Files to GitHub using SSH","text":"<p>Once your repository is initialized and your SSH key is set up, you can connect your local repo to a remote one on GitHub.</p> <ol> <li> <p>Create a new, empty repository on GitHub:</p> <ul> <li>Do not check the box to initialize it with a README, license, or <code>.gitignore</code>, as you already have local files.</li> <li>GitHub will provide you with the SSH remote URL (it looks like <code>git@github.com:USERNAME/REPOSITORY.git</code>).</li> </ul> </li> <li> <p>Add the remote origin to your local repository:</p> <pre><code>git remote add origin git@github.com:USERNAME/REPOSITORY.git\n</code></pre> <ul> <li><code>git remote add</code>: Command to add a new remote connection.</li> <li><code>origin</code>: The conventional name for the primary remote repository.</li> <li><code>git@...</code>: The SSH URL you got from GitHub.</li> </ul> </li> <li> <p>Push your local branch to the remote:</p> <pre><code>git push -u origin main\n</code></pre> <ul> <li><code>git push</code>: Sends your committed changes to the remote.</li> <li><code>-u origin main</code>: Sets the upstream branch, linking your local <code>main</code> branch to the remote <code>main</code> branch (<code>origin</code>). This allows you to simply use <code>git push</code> and <code>git pull</code> later.</li> </ul> </li> </ol>"},{"location":"TechNotes/GitHub/#4-addingchanging-remote-origin","title":"4. Adding/Changing Remote Origin","text":"<p>If you need to change the repository your local Git points to, or if you made a mistake adding it, here's how to manage the remote origin.</p>"},{"location":"TechNotes/GitHub/#a-check-the-current-remote","title":"A. Check the Current Remote","text":"<pre><code>git remote -v\n</code></pre> <p>This shows the names and URLs for fetching and pushing. You'll typically see entries for <code>origin</code>.</p>"},{"location":"TechNotes/GitHub/#b-change-the-remote-url","title":"B. Change the Remote URL","text":"<p>If you only need to change the URL (e.g., switching from HTTPS to SSH):</p> <pre><code>git remote set-url origin git@github.com:NEW_USERNAME/NEW_REPOSITORY.git\n</code></pre> <p>Replace the URL with your desired SSH URL.</p>"},{"location":"TechNotes/GitHub/#c-remove-and-re-add-the-remote","title":"C. Remove and Re-add the Remote","text":"<p>If you want to completely sever the connection to <code>origin</code> and start fresh:</p> <ol> <li> <p>Remove the existing remote:</p> <pre><code>git remote remove origin\n</code></pre> <p>(This only removes the link; it does not delete the repository on GitHub.)</p> </li> <li> <p>Add the new remote (referencing step 3.2):</p> <pre><code>git remote add origin git@github.com:NEW_USERNAME/NEW_REPOSITORY.git\n</code></pre> <p>Use this if you are pointing your local repo to an entirely different GitHub repository.</p> </li> </ol>"},{"location":"WebNotes/markdown-links/","title":"Markdown Links","text":"<p>There are a couple of straightforward ways to modify your Hugo <code>single.html</code> template to ensure that all markdown links open in a new tab: by using a JavaScript solution or by using Hugo's built-in Markdown Render Hooks.</p>"},{"location":"WebNotes/markdown-links/#1-javascript-solution-recommended-for-simplicity","title":"1. JavaScript Solution (Recommended for simplicity)","text":"<p>The easiest and most common approach is to use a small block of JavaScript in your <code>single.html</code> (or in a partial loaded by it). This script targets all <code>&lt;a&gt;</code> tags within the main content and adds the <code>target=\"_blank\"</code> attribute to them, typically only to external links for better user experience.</p>"},{"location":"WebNotes/markdown-links/#steps-for-javascript","title":"Steps for JavaScript","text":"<ol> <li>Edit <code>layouts/_default/single.html</code>: Open your main single-page template.</li> <li>Insert JavaScript: Add the following script, ideally just before the closing <code>&lt;/body&gt;</code> tag, or after the main content is rendered.</li> </ol> <pre><code>&lt;script&gt;\n  // Get the main content container (adjust selector if needed, e.g., #content, .article-body)\n  const content = document.querySelector('.article-content');\n\n  if (content) {\n    // Select all &lt;a&gt; tags within the content\n    const links = content.querySelectorAll('a');\n\n    links.forEach(link =&gt; {\n      // **Recommended Check:** Only open external links in a new tab\n      // This checks if the link's hostname is different from the current page's hostname.\n      if (link.hostname !== window.location.hostname) {\n        link.setAttribute('target', '_blank');\n        link.setAttribute('rel', 'noopener noreferrer'); // Best practice for security\n      }\n\n      // **Alternative (for ALL links):**\n      /*\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n      */\n    });\n  }\n&lt;/script&gt;\n</code></pre> <ul> <li>\u26a0\ufe0f Crucial: You must replace <code>.article-content</code> with the CSS class or ID that wraps the rendered Markdown content in your specific theme. Common values are <code>main</code>, <code>article-body</code>, or <code>entry-content</code>.</li> <li>The line <code>link.setAttribute('rel', 'noopener noreferrer');</code> is important for security and performance when using <code>target=\"_blank\"</code>.</li> </ul>"},{"location":"WebNotes/markdown-links/#2-hugo-markdown-render-hook-advancedthe-hugo-way","title":"2. Hugo Markdown Render Hook (Advanced/The Hugo Way)","text":"<p>For a more robust, server-side (no JavaScript required) solution that specifically targets Markdown links, use a Markdown Render Hook. This method ensures only links created via Markdown are affected.</p>"},{"location":"WebNotes/markdown-links/#steps-for-render-hook","title":"Steps for Render Hook","text":"<ol> <li> <p>Create the Hook File: In your Hugo project structure, create the directory and file:     <code>layouts/_default/_markup/render-link.html</code></p> </li> <li> <p>Add the Template Code: Add the following Go Template code to this file:</p> </li> </ol> <pre><code>&lt;a href=\"{{ .Destination | safeURL }}\"\n   {{ with .Title }} title=\"{{ . }}\"{{ end }}\n   {{ if strings.HasPrefix .Destination \"http\" }}\n     target=\"_blank\" rel=\"noopener noreferrer\"\n   {{ end }}\n&gt;\n{{ .Text | safeHTML }}&lt;/a&gt;\n</code></pre>"},{"location":"WebNotes/markdown-links/#how-this-works","title":"How this works:","text":"<ul> <li>This hook overrides how Hugo renders a link created in Markdown (e.g., <code>[Link Text](url)</code>).</li> <li><code>strings.HasPrefix .Destination \"http\"</code>: This is a robust check that only applies <code>target=\"_blank\"</code> to external links (those starting with <code>http</code> or <code>https</code>).</li> <li>If you want ALL Markdown links (internal and external) to open in a new tab, you would simplify the hook like this:</li> </ul> <pre><code>&lt;a href=\"{{ .Destination | safeURL }}\"\n   {{ with .Title }} title=\"{{ . }}\"{{ end }}\n   target=\"_blank\" rel=\"noopener noreferrer\"\n&gt;\n{{ .Text | safeHTML }}&lt;/a&gt;\n</code></pre> <p>While Hugo's Markdown Render Hooks (like <code>render-link.html</code>) are specifically designed to override the rendering of Markdown-formatted links (e.g., <code>[text](url)</code>), they do not automatically apply to plain URL text (e.g., <code>https://example.com</code>) that Goldmark autolinks.</p> <p>To apply custom attributes (like <code>target=\"_blank\"</code>) to both explicit Markdown links and autolinked plaintext URLs, you need to use two different techniques in combination.</p>"},{"location":"WebNotes/markdown-links/#1-customizing-explicit-markdown-links-render-hook","title":"1. Customizing Explicit Markdown Links (Render Hook)","text":"<p>This is the method you've already started. It handles links created like <code>[Hugo](https://gohugo.io)</code>.</p> <ol> <li> <p>Create the Hook File: <code>layouts/_default/_markup/render-link.html</code></p> </li> <li> <p>Add the Template Code:     Use this code to ensure Markdown links open in a new tab:</p> <pre><code>&lt;a href=\"{{ .Destination | safeURL }}\"\n   {{ with .Title }} title=\"{{ . }}\"{{ end }}\n   target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n{{ .Text | safeHTML }}&lt;/a&gt;\n</code></pre> <p>If you only want external Markdown links to open in a new tab, use the conditional logic:</p> <pre><code>&lt;a href=\"{{ .Destination | safeURL }}\"\n   {{ with .Title }} title=\"{{ . }}\"{{ end }}\n   {{ if strings.HasPrefix .Destination \"http\" }}\n     target=\"_blank\" rel=\"noopener noreferrer\"\n   {{ end }}\n&gt;\n{{ .Text | safeHTML }}&lt;/a&gt;\n</code></pre> </li> </ol>"},{"location":"WebNotes/markdown-links/#2-customizing-plaintext-autolinks-goldmark-configuration","title":"2. Customizing Plaintext Autolinks (Goldmark Configuration)","text":"<p>Plaintext URLs are handled by Goldmark's Autolink extension. To apply custom attributes to these, you must use a feature in the Goldmark configuration called Attributes.</p> <ol> <li> <p>Enable Goldmark Autolink Attributes:</p> <p>Edit your Hugo configuration file (e.g., <code>config.toml</code> or <code>config.yaml</code>) and add or modify the following block to enable attributes for the autolink extension:</p> <p>In <code>config.toml</code>:</p> <pre><code>[markup.goldmark.extensions.attribute]\n  autolink = true\n</code></pre> <p>In <code>config.yaml</code>:</p> <pre><code>markup:\n  goldmark:\n    extensions:\n      attribute:\n        autolink: true\n</code></pre> </li> <li> <p>Use Markdown Attributes in the Content:</p> <p>Once enabled, you can define a special attribute string that Goldmark will automatically append to all autolinked plaintext URLs in your content.</p> <p>Since you want the attribute to apply globally, the easiest way to inject it is to define a custom template or override the content rendering process (though this is more complex).</p> </li> </ol>"},{"location":"WebNotes/markdown-links/#the-recommended-solution-for-autolinks","title":"The Recommended Solution for Autolinks","text":"<p>The easiest way to apply attributes to autolinks is typically through the same JavaScript solution that was recommended previously, as Goldmark lacks a built-in global way to inject attributes into all autolinks without overriding the renderer itself.</p> <p>Here is the combined, most reliable server-side + client-side approach:</p> Element Method Implementation Explicit Markdown Link (<code>[text](url)</code>) Render Hook <code>layouts/_default/_markup/render-link.html</code> (Server-side) Plaintext Autolink (<code>https://url.com</code>) JavaScript Script in <code>single.html</code> to target all links (Client-side) <p>By keeping the Render Hook for explicit links and using the small JavaScript block for the autolinks, you ensure a complete solution with minimal complexity:</p> <pre><code>&lt;script&gt;\n  // Target all links within the main content\n  const links = document.querySelectorAll('.post-content a'); \n  // (Adjust .post-content to your main wrapper class/ID)\n\n  links.forEach(link =&gt; {\n    // Check if the link has been processed by the render hook (optional check, but good practice)\n    // If you don't use the conditional logic in the render hook, you can skip this check.\n    if (!link.hasAttribute('target')) { \n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"WebNotes/markdown-styling/","title":"Markdown Styling","text":"<p>Customizing the look and feel of your Hugo Markdown content, including adding specific colors, can be achieved through several techniques. The best method depends on whether you want to style an entire element globally, a specific instance, or just inline text.</p> <p>Here are the four primary ways to custom style your Hugo markdown posts.</p>"},{"location":"WebNotes/markdown-styling/#1-using-css-and-global-styling-globalstructural","title":"1. Using CSS and Global Styling (Global/Structural)","text":"<p>This is the standard approach for styling the overall structure of your posts. You write CSS rules that target the standard HTML elements that Markdown renders to (e.g., <code>h1</code>, <code>p</code>, <code>blockquote</code>, <code>pre</code>).</p>"},{"location":"WebNotes/markdown-styling/#how-to-implement","title":"How to Implement:","text":"<ol> <li>Identify the HTML Tag: Look at your rendered Markdown. A paragraph is <code>&lt;p&gt;</code>, a heading is <code>&lt;h1&gt;</code>, a blockquote is <code>&lt;blockquote&gt;</code>, and so on.</li> <li>Add Custom CSS: Add the styling to your main CSS file (usually in <code>assets/css/</code> or <code>static/css/</code>).</li> </ol> <p>Example CSS:</p> <p>To make all blockquotes in your posts have a blue background and a yellow border:</p> <pre><code>/* Target the content wrapper, then the blockquote element */\n.post-content blockquote {\n    background-color: #e6f7ff; /* Light blue background */\n    border-left: 5px solid #007bff; /* Blue left border */\n    color: #333; /* Dark text color */\n    padding: 10px 15px;\n    margin: 20px 0;\n}\n</code></pre> <p>Where to Put the CSS:</p> <p>Ensure your main page template (<code>layouts/_default/single.html</code>) links to this CSS file, often using an approach like this in the <code>&lt;head&gt;</code>:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"{{ \"css/custom.css\" | relURL }}\"&gt;\n</code></pre>"},{"location":"WebNotes/markdown-styling/#2-using-markdown-attributes-block-level-elements","title":"2. Using Markdown Attributes (Block-Level Elements)","text":"<p>Hugo's default Markdown renderer, Goldmark, supports Markdown Attributes. This allows you to add custom <code>class</code> or <code>id</code> attributes (and inline <code>style</code> attributes) to certain block-level elements directly in your Markdown content.</p>"},{"location":"WebNotes/markdown-styling/#a-configuration-one-time-setup","title":"A. Configuration (One-Time Setup)","text":"<p>You must enable block-level attributes in your configuration file (<code>config.toml</code>, <code>config.yaml</code>, or <code>config.json</code>).</p> <p>In <code>config.toml</code>:</p> <pre><code>[markup]\n  [markup.goldmark]\n    [markup.goldmark.parser]\n      [markup.goldmark.parser.attribute]\n        block = true # Crucial for paragraphs, blockquotes, etc.\n</code></pre>"},{"location":"WebNotes/markdown-styling/#b-usage-in-markdown","title":"B. Usage in Markdown","text":"<p>Once enabled, you can add custom styling to the preceding block.</p> Element Markdown Code Output Paragraph <code>This is a styled paragraph.</code> <code>{.red-text}</code> <code>&lt;p class=\"red-text\"&gt;...&lt;/p&gt;</code> Heading <code># My Red Heading</code> <code>{#main-title .red-text}</code> <code>&lt;h1 id=\"main-title\" class=\"red-text\"&gt;...&lt;/h1&gt;</code> Blockquote <code>&gt; This is a colorful alert!</code> <code>{.alert-box style=\"background: yellow;\"}</code> <code>&lt;blockquote class=\"alert-box\" style=\"background: yellow;\"&gt;...&lt;/blockquote&gt;</code> <p>Example:</p> <pre><code>This paragraph will have a red text color.\n{.red-text}\n</code></pre> <p>You still need to define the <code>.red-text</code> class in your main CSS file.</p> <pre><code>/* In your custom CSS file */\n.red-text {\n    color: #FF0000;\n    font-weight: bold;\n}\n</code></pre>"},{"location":"WebNotes/markdown-styling/#3-creating-custom-shortcodes-for-reusable-elements","title":"3. Creating Custom Shortcodes (For Reusable Elements)","text":"<p>Shortcodes are the most powerful and reusable way to insert custom styled HTML. They are ideal for colored text snippets, custom buttons, or info boxes.</p>"},{"location":"WebNotes/markdown-styling/#a-create-the-shortcode-file","title":"A. Create the Shortcode File","text":"<p>Create a file named, for example, <code>layouts/shortcodes/color.html</code>:</p> <pre><code>&lt;span style=\"color: {{ .Get \"color\" }}; background-color: {{ .Get \"bg\" }}; padding: 2px 4px; border-radius: 3px;\"&gt;\n    {{ .Inner }}\n&lt;/span&gt;\n</code></pre>"},{"location":"WebNotes/markdown-styling/#b-use-in-markdown","title":"B. Use in Markdown","text":"<p>You can then wrap text directly in your Markdown file using the shortcode, passing in the desired colors as parameters:</p> <pre><code>This is normal text, but I want to highlight the \n{{&lt; color color=\"#8B0000\" bg=\"#FFFACD\" &gt;}}most important part{{&lt; /color &gt;}} \nof the sentence in a custom color.\n</code></pre> <p>Note: Use the <code>{{&lt; shortcode &gt;}}</code> syntax when the inner content is plain text or HTML. Use <code>{{% shortcode %}}</code> if the inner content itself needs to be processed as Markdown (e.g., if you include bold text or lists inside the shortcode).</p>"},{"location":"WebNotes/markdown-styling/#4-customizing-default-rendering-with-render-hooks","title":"4. Customizing Default Rendering with Render Hooks","text":"<p>If you want to change the HTML structure or add a specific class to every instance of a Markdown element globally (like all tables, all headings, or all images), use a Render Hook.</p> <p>For example, to wrap all Markdown-generated tables in a special <code>div</code> for responsive design:</p> <ol> <li>Create the Hook File: <code>layouts/_default/_markup/render-table.html</code></li> <li>Add the Template:</li> </ol> <pre><code>&lt;div class=\"table-responsive\"&gt;\n    &lt;table&gt;\n        {{ .Inner }}\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>This is how you can achieve sophisticated, content-specific styling without writing custom HTML in every post.</p>"},{"location":"WebNotes/share-button/","title":"Share Button","text":"<p>Adding social share buttons to a Hugo blog post involves either using a built-in feature of your theme, implementing a custom Hugo partial template, or using an external third-party service.</p> <p>The most effective, fast, and privacy-friendly method in Hugo is to create a custom partial that uses standard social media sharing URLs and Hugo's page variables.</p>"},{"location":"WebNotes/share-button/#1-using-a-built-in-theme-feature","title":"1. Using a Built-in Theme Feature","text":"<p>Many popular Hugo themes, like those based on Hugo Blox (formerly Wowchemy), have built-in share button functionality.</p> <ul> <li>Check Theme Documentation: Look in your theme's documentation for \"sharing,\" \"social,\" or \"page sharer.\"</li> <li>Enable in Front Matter: If available, you often only need to set a variable in the post's front matter:     <pre><code>---\ntitle: \"My Blog Post\"\nshare: true  # This enables the built-in share buttons\n---\n</code></pre></li> <li>Configure Globally: The sharing networks and their order are usually configured in a global configuration file (e.g., <code>config/_default/params.yaml</code> or a file in the <code>data/</code> folder like <code>data/page_sharer.yaml</code>).</li> </ul>"},{"location":"WebNotes/share-button/#2-using-a-custom-hugo-partial-recommended-method","title":"2. Using a Custom Hugo Partial (Recommended Method)","text":"<p>This method gives you full control and avoids external scripts. You'll create a reusable piece of code (a partial) and call it in your single post template.</p>"},{"location":"WebNotes/share-button/#step-1-create-the-partial-file","title":"Step 1: Create the Partial File","text":"<p>Create a new file called <code>social-share.html</code> (or similar) in your layouts/partials/ directory.</p>"},{"location":"WebNotes/share-button/#step-2-add-the-sharing-link-logic","title":"Step 2: Add the Sharing Link Logic","text":"<p>Inside <code>social-share.html</code>, use Hugo's variables (<code>.Title</code>, <code>.Permalink</code>) and standard social sharing URL structures.</p> <p>The core concept is to create an $\\text{}$ tag with a specially formatted URL that includes the page's title and link. <pre><code>{{ $title := .Title }}\n{{ $url := .Permalink | absLangURL }}\n\n&lt;div class=\"social-share-buttons\"&gt;\n    &lt;a href=\"https://twitter.com/intent/tweet?text={{ $title }}&amp;url={{ $url }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Share on Twitter\"&gt;\n        Share on Twitter\n    &lt;/a&gt;\n\n    &lt;a href=\"https://www.facebook.com/sharer/sharer.php?u={{ $url }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Share on Facebook\"&gt;\n        Share on Facebook\n    &lt;/a&gt;\n\n    &lt;a href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url={{ $url }}&amp;title={{ $title }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Share on LinkedIn\"&gt;\n        Share on LinkedIn\n    &lt;/a&gt;\n\n    {{ $body := print $title \"\\n\\n\" $url }}\n    &lt;a href=\"mailto:?subject={{ $title }}&amp;body={{ $body }}\" target=\"_blank\" aria-label=\"Share via Email\"&gt;\n        Share via Email\n    &lt;/a&gt;\n&lt;/div&gt;\n</code></pre> <p>Note: You would typically replace the plain text like \"Share on Twitter\" with $\\text{}$ icons for a cleaner look."},{"location":"WebNotes/share-button/#step-3-embed-the-partial","title":"Step 3: Embed the Partial","text":"<p>Find the file that controls the layout of your individual blog posts. This is usually one of the following:</p> <ul> <li><code>layouts/_default/single.html</code></li> <li><code>layouts/posts/single.html</code></li> <li><code>themes/&lt;your-theme&gt;/layouts/_default/single.html</code></li> </ul> <p>Edit this file and insert the partial where you want the buttons to appear (e.g., below the content, or in the footer of the article):</p> <pre><code>{{ .Content }}\n\n&lt;hr&gt;\n\n{{ partial \"social-share.html\" . }}\n</code></pre>"},{"location":"WebNotes/share-button/#3-using-third-party-share-libraries","title":"3. Using Third-Party Share Libraries","text":"<p>You can use third-party libraries that provide the HTML and CSS for clean, ready-to-use buttons, such as sharingbuttons.io or a dedicated Hugo module like hugo-share-buttons.</p> <ol> <li>Install the Partial: Download the required $\\text{.html}$ partial file from the chosen source and place it into your <code>layouts/partials/</code> directory.</li> <li>Configure: Add the necessary configuration variables to your site's main <code>config.toml</code> or <code>config.yaml</code> to specify which networks to show and the size of the buttons.</li> <li>Embed: Call the partial in your <code>single.html</code> template using:     <pre><code>{{ partial \"share-buttons.html\" . }}\n</code></pre></li> </ol> <p>The video \"Social Media Sharing with Twitter, Facebook, Linkedin &amp; Pinterest for HUGO | Static Site\" provides a visual guide on setting up social media sharing features on a Hugo site.</p> <p>Here's how to implement your share button by putting the JavaScript and CSS into your main.js and style.css files.</p>"},{"location":"WebNotes/share-button/#1-the-hugo-partial-textlayoutspartialsshare-buttonhtml","title":"\ud83e\udde9 1. The Hugo Partial ($\\text{layouts/partials/share-button.html}$)","text":"<p>This file contains only the HTML structure and uses Hugo variables (<code>.Permalink</code>, <code>.Title</code>) to pass data to the JavaScript via $\\text{data-attributes}$.</p> <pre><code>&lt;div class=\"share-btn-wrap\" data-url=\"{{ .Permalink }}\" data-title=\"{{ .Title }}\"&gt;\n  &lt;button class=\"share-btn\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"Share this post\"&gt;\n    &lt;svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"&gt;\n      &lt;path d=\"M18 8a3 3 0 1 0-2.83-4H11a1 1 0 0 0 0 2h4.17A3.01 3.01 0 0 0 18 8zM6 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm0 10a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm12 0a3 3 0 1 0 0 6 3 3 0 0 0 0-6z\" fill=\"currentColor\"&gt;&lt;/path&gt;\n    &lt;/svg&gt;\n    &lt;span class=\"share-label\"&gt;Share&lt;/span&gt;\n  &lt;/button&gt;\n\n  &lt;div class=\"share-menu\" role=\"menu\" aria-hidden=\"true\"&gt;\n    &lt;button class=\"share-action share-native\" role=\"menuitem\"&gt;Share (Native)&lt;/button&gt;\n    &lt;button class=\"share-action share-copy\" role=\"menuitem\"&gt;Copy link&lt;/button&gt;\n    &lt;a class=\"share-action share-twitter\" role=\"menuitem\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;Twitter&lt;/a&gt;\n    &lt;a class=\"share-action share-facebook\" role=\"menuitem\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;Facebook&lt;/a&gt;\n    &lt;a class=\"share-action share-linkedin\" role=\"menuitem\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;LinkedIn&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"WebNotes/share-button/#2-the-css-textstaticcssstylecss","title":"\ud83c\udfa8 2. The CSS ($\\text{static/css/style.css}$)","text":"<p>Add these styles to your main stylesheet to handle the layout, appearance, and the initial hidden state of the menu.</p> <pre><code>/* === Share Button Styles === */\n.share-btn-wrap {\n  position: relative;\n  display: inline-block;\n  font-family: system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial;\n}\n\n.share-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.4rem 0.6rem;\n  border: 1px solid rgba(0, 0, 0, 0.08);\n  background: #fff;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 0.95rem;\n  transition: background 0.1s; /* Add transition for hover effect */\n}\n\n.share-btn:hover {\n  background: rgba(0, 0, 0, 0.02);\n}\n\n.share-btn svg {\n  display: block;\n}\n\n.share-label {\n  display: inline-block;\n}\n\n.share-menu {\n  position: absolute;\n  right: 0;\n  top: calc(100% + 0.5rem);\n  min-width: 160px;\n  padding: 0.4rem;\n  border-radius: 8px;\n  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);\n  background: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  display: none; /* Hidden by default */\n  z-index: 60;\n}\n\n/* JavaScript toggles this attribute to show the menu */\n.share-menu[aria-hidden=\"false\"] {\n  display: block;\n}\n\n.share-action {\n  display: block;\n  width: 100%;\n  text-align: left;\n  padding: 0.5rem 0.6rem;\n  border-radius: 6px;\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  font-size: 0.95rem;\n  text-decoration: none; /* Ensure links look like buttons */\n  color: inherit; /* Inherit text color */\n}\n\n.share-action:hover {\n  background: rgba(0, 0, 0, 0.03);\n}\n\n/* Ensure anchor tags and buttons within the menu share the same style */\n.share-action[role=\"menuitem\"]:not(a) {\n  text-decoration: none;\n  color: inherit;\n}\n</code></pre>"},{"location":"WebNotes/share-button/#3-the-javascript-textstaticjsmainjs","title":"\u2699\ufe0f 3. The JavaScript ($\\text{static/js/main.js}$)","text":"<p>This script handles the menu logic, populates the social media links using the data-attributes, and implements the native sharing and copy-to-clipboard functionality.</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", function () {\n  // Select all share button wrappers on the page\n  const wraps = document.querySelectorAll(\".share-btn-wrap\");\n\n  wraps.forEach((wrap) =&gt; {\n    // Get all necessary elements within the current wrapper\n    const btn = wrap.querySelector(\".share-btn\");\n    const menu = wrap.querySelector(\".share-menu\");\n    const nativeBtn = wrap.querySelector(\".share-native\");\n    const copyBtn = wrap.querySelector(\".share-copy\");\n    const twitter = wrap.querySelector(\".share-twitter\");\n    const facebook = wrap.querySelector(\".share-facebook\");\n    const linkedin = wrap.querySelector(\".share-linkedin\");\n\n    // Get page data from HTML data-attributes\n    const pageUrl = wrap.getAttribute(\"data-url\") || window.location.href;\n    const pageTitle = wrap.getAttribute(\"data-title\") || document.title || \"\";\n\n    // Encode URL and Title for safe use in query strings\n    const encodedUrl = encodeURIComponent(pageUrl);\n    const encodedTitle = encodeURIComponent(pageTitle);\n\n    // 1. Populate Social Media Links\n    twitter.href = `https://twitter.com/intent/tweet?url=${encodedUrl}&amp;text=${encodedTitle}`;\n    facebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`;\n    linkedin.href = `https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`;\n\n    // Helper functions for menu state\n    function openMenu() {\n      menu.setAttribute(\"aria-hidden\", \"false\");\n      btn.setAttribute(\"aria-expanded\", \"true\");\n      // Add global listener to close menu when clicking outside\n      document.addEventListener(\"click\", outsideListener);\n    }\n\n    function closeMenu() {\n      menu.setAttribute(\"aria-hidden\", \"true\");\n      btn.setAttribute(\"aria-expanded\", \"false\");\n      // Remove global listener\n      document.removeEventListener(\"click\", outsideListener);\n    }\n\n    function outsideListener(e) {\n      if (!wrap.contains(e.target)) closeMenu();\n    }\n\n    // 2. Button Click Listener (Toggle Menu)\n    btn.addEventListener(\"click\", function () {\n      const expanded = btn.getAttribute(\"aria-expanded\") === \"true\";\n      if (expanded) closeMenu();\n      else openMenu();\n    });\n\n    // 3. Native Share Implementation\n    nativeBtn.addEventListener(\"click\", async function () {\n      if (navigator.share) {\n        try {\n          await navigator.share({ title: pageTitle, url: pageUrl });\n          closeMenu();\n        } catch (err) {\n          // console.debug is often preferred over console.log for non-critical errors\n          console.debug(\"Native share canceled or failed\", err);\n        }\n      } else {\n        alert(\"Native sharing not supported on this device/browser.\");\n      }\n    });\n\n    // 4. Copy Link Implementation\n    copyBtn.addEventListener(\"click\", async function () {\n      try {\n        if (navigator.clipboard &amp;&amp; navigator.clipboard.writeText) {\n          // Modern, preferred way\n          await navigator.clipboard.writeText(pageUrl);\n        } else {\n          // Fallback for older browsers (document.execCommand is deprecated but useful)\n          const t = document.createElement(\"textarea\");\n          t.value = pageUrl;\n          t.style.position = \"absolute\";\n          t.style.left = \"-9999px\";\n          document.body.appendChild(t);\n          t.select();\n          document.execCommand(\"copy\");\n          document.body.removeChild(t);\n        }\n\n        // Visual feedback\n        copyBtn.textContent = \"Link copied \u2713\";\n        setTimeout(() =&gt; (copyBtn.textContent = \"Copy link\"), 1500);\n        closeMenu();\n      } catch (e) {\n        alert(\"Could not copy link. Please try manually.\");\n      }\n    });\n\n    // 5. Accessibility and Keyboard Support (Escape key to close)\n    wrap.addEventListener(\"keydown\", function (e) {\n      if (e.key === \"Escape\") closeMenu();\n      // Optional: Add logic for ArrowDown to focus on the first menu item\n      if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        const first = menu.querySelector('[role=\"menuitem\"]');\n        if (first) first.focus();\n      }\n    });\n\n    // Ensure all menu items are focusable for keyboard navigation\n    menu\n      .querySelectorAll('[role=\"menuitem\"]')\n      .forEach((el) =&gt; (el.tabIndex = 0));\n  });\n});\n</code></pre>"},{"location":"WebNotes/share-button/#4-including-files-in-your-hugo-layout","title":"\u2705 4. Including Files in Your Hugo Layout","text":"<p>Make sure your Hugo templates reference these assets correctly so the HTML structure, styles, and script all work together.</p>"},{"location":"WebNotes/share-button/#in-your-text-for-css","title":"In Your $\\text{}$ (For CSS) <p>Include the stylesheet link in your base template (<code>layouts/_default/baseof.html</code>) or your custom <code>&lt;head&gt;</code> partial:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"{{ \"css/style.css\" | relURL }}\"&gt;\n</code></pre>","text":""},{"location":"WebNotes/share-button/#at-the-end-of-your-text-for-javascript","title":"At the End of Your $\\text{}$ (For JavaScript) <p>Include the script tag, ideally just before the closing $\\text{}$ tag to ensure the DOM is fully loaded before the script tries to access the elements (though wrapping it in <code>DOMContentLoaded</code> handles this too):</p> <pre><code>&lt;script src=\"{{ \"js/main.js\" | relURL }}\"&gt;&lt;/script&gt;\n</code></pre>","text":""},{"location":"WebNotes/site-structure-noted/","title":"Site Structure Noted","text":""},{"location":"WebNotes/site-structure-noted/#static-structure","title":"Static Structure","text":"<ul> <li>index.html (homepage)</li> <li>about.html (about page)</li> <li>contact.html (contact page)</li> <li>portfolio.html (portfolio page)</li> <li>posts.html (posts index page)</li> <li>pages/</li> <li>page1.html (example static page 1)</li> <li>page2.html (example static page 2)</li> <li>page3.html (example static page 3)</li> <li>posts/</li> <li>post1.html (example post 1)</li> <li>post2.html (example post 2)</li> <li>post3.html (example post 3)</li> <li>css/</li> <li>style.css (main stylesheet)</li> <li>responsive.css (responsive/mobile styles)</li> <li>js/</li> <li>main.js (site JavaScript)</li> <li>images/</li> <li>logo.png (site logo)</li> </ul>"},{"location":"WebNotes/site-structure-noted/#dynamic-structure","title":"Dynamic Structure","text":"<ul> <li>index.html (homepage)</li> <li>about.html (about page)</li> <li>contact.html (contact page)</li> <li>portfolio.html (portfolio page)</li> <li>posts.html (posts index page)</li> <li>pages/</li> <li>page1.html (example static page 1)</li> <li>page2.html (example static page 2)</li> <li>page3.html (example static page 3)</li> <li>posts/</li> <li>post1.html (example post 1)</li> <li>post2.html (example post 2)</li> <li>post3.html (example post 3)</li> <li>components/</li> <li>header.html (header partial with logo and navigation)</li> <li>footer.html (footer partial with scripts/copyright)</li> <li>assets/</li> <li>css/<ul> <li>style.css (main stylesheet)</li> <li>responsive.css (responsive/mobile styles)</li> </ul> </li> <li>js/<ul> <li>main.js (site JavaScript)</li> </ul> </li> <li>images/<ul> <li>logo.png (site logo)</li> </ul> </li> <li>data/</li> <li>posts.json (JSON data for blog posts)</li> </ul>"},{"location":"WebNotes/site-structure-noted/#hugo-structure","title":"Hugo Structure","text":"<ul> <li>config.toml (main Hugo configuration: site title, URL, etc.)</li> <li>content/ (all content in Markdown)</li> <li>pages/<ul> <li>about.md (about page)</li> <li>contact.md (contact page)</li> <li>portfolio.md (portfolio page)</li> </ul> </li> <li>posts/<ul> <li>post1.md (example blog post 1)</li> <li>post2.md (example blog post 2)</li> <li>post3.md (example blog post 3)</li> </ul> </li> <li>custom/<ul> <li>custom1.md (example custom post 1)</li> <li>custom2.md (example custom post 2)</li> <li>custom3.md (example custom post 3)  </li> </ul> </li> <li>layouts/ (templates controlling content rendering)</li> <li>_default/<ul> <li>baseof.html (base template with header/footer wrapper)</li> <li>list.html (section/category/tag list template)</li> <li>page.html (static page template)</li> <li>single.html (single blog post template)</li> </ul> </li> <li>posts/<ul> <li>list.html (custom posts list template)</li> </ul> </li> <li>partials/<ul> <li>header.html (header partial)</li> <li>footer.html (footer partial)</li> </ul> </li> <li>index.html (homepage layout)</li> <li>static/ (public static assets)</li> <li>css/<ul> <li>style.css (main stylesheet)</li> <li>responsive.css (responsive/mobile styles)</li> </ul> </li> <li>js/<ul> <li>theme.js (site JavaScript for UI interactions)</li> </ul> </li> <li>images/<ul> <li>logo.png (site logo)</li> </ul> </li> </ul>"},{"location":"WebNotes/site-structure-noted/#jekyll-structure","title":"Jekyll Structure","text":"<ul> <li>_config.yml (main Jekyll configuration: site title, URL, plugins)</li> <li>index.md (homepage content, layout: home)</li> <li>404.html (custom 404 page, layout: page)</li> <li>pages/ (custom static pages)</li> <li>about.md (about page, layout: page)</li> <li>contact.md (contact page, layout: page)</li> <li>portfolio.md (portfolio page, layout: page)</li> <li>posts.md (blog index, layout: list)</li> <li>custom.md (custom collection, layout: list)</li> <li>_posts/ (blog posts in YYYY-MM-DD-title.md format)</li> <li>2025-09-22-post-001.md (example post 1)</li> <li>2025-09-23-post-002.md (example post 2)</li> <li>2025-09-23-post-003.md (example post 3)</li> <li>_custom/ (custom collection posts in any-title.md format)</li> <li>post-001.md (custom post 1)</li> <li>post-002.md (custom post 2)</li> <li>post-003.md (custom post 3)</li> <li>_includes/ (reusable template snippets)</li> <li>header.html (header with logo, nav, topbar)</li> <li>footer.html (footer with scripts/copyright)</li> <li>head.html (optional  partial: meta tags, CSS/JS links) <li>_layouts/ (templates controlling content rendering)</li> <li>default.html (base wrapper)</li> <li>home.html (homepage layout)</li> <li>post.html (layout for single blog post)</li> <li>list.html (layout for posts index)</li> <li>page.html (layout for static pages)</li> <li>assets/ (custom assets: CSS/JS/images)</li> <li>css/<ul> <li>style.css (main stylesheet)</li> <li>responsive.css (responsive/mobile styles)</li> </ul> </li> <li>js/<ul> <li>main.js (custom JavaScript)</li> </ul> </li> <li>images/<ul> <li>logo.png (site logo)</li> </ul> </li>"},{"location":"WebNotes/site-structure-noted/#eleventy-structure","title":"Eleventy Structure","text":"<ul> <li>.eleventy.js (Eleventy config file)</li> <li>package.json (Project metadata &amp; npm scripts)</li> <li>index.md (homepage content, layout: home)</li> <li>404.html (custom 404 page, layout: page)</li> <li>pages/ (custom static pages)</li> <li>about.md (about page, layout: page)</li> <li>contact.md (contact page, layout: page)</li> <li>portfolio.md (portfolio page, layout: page)</li> <li>posts.md (blog index, layout: list)</li> <li>custom.md (custom collection, layout: list)</li> <li>posts/ (blog posts in markdown format)</li> <li>2025-09-22-post-001.md (example post 1)</li> <li>2025-09-23-post-002.md (example post 2)</li> <li>2025-09-23-post-003.md (example post 3)</li> <li>custom/ (custom collection posts in any-title.md format)</li> <li>post-001.md (custom post 1)</li> <li>post-002.md (custom post 2)</li> <li>post-003.md (custom post 3)</li> <li>_includes/ (reusable template snippets)</li> <li>header.html (header with logo, nav, topbar)</li> <li>footer.html (footer with scripts/copyright)</li> <li>head.html (optional  partial: meta tags, CSS/JS links) <li>layouts/ (templates controlling content rendering)<ul> <li>base.html (base wrapper)</li> <li>home.html (homepage layout)</li> <li>post.html (layout for single blog post)</li> <li>list.html (layout for posts index)</li> <li>page.html (layout for static pages)</li> </ul> </li> <li>assets/ (custom assets: CSS/JS/images)</li> <li>css/<ul> <li>style.css (main stylesheet)</li> <li>responsive.css (responsive/mobile styles)</li> </ul> </li> <li>js/<ul> <li>main.js (custom JavaScript)</li> </ul> </li> <li>images/<ul> <li>logo.png (site logo)</li> </ul> </li> <li>_data/ (Global data files. JSON, JS, or YAML)</li> <li>site.json (Example: site-wide metadata)</li>"},{"location":"WebNotes/site-structure/","title":"Site Structure","text":""},{"location":"WebNotes/site-structure/#static-structure","title":"Static Structure","text":"<ul> <li>index.html</li> <li>about.html</li> <li>contact.html</li> <li>portfolio.html</li> <li>posts.html</li> <li>pages/</li> <li>page1.html</li> <li>page2.html</li> <li>page3.html</li> <li>posts/</li> <li>post1.html</li> <li>post2.html</li> <li>post3.html</li> <li>css/</li> <li>style.css</li> <li>responsive.css</li> <li>js/</li> <li>main.js</li> <li>images/</li> <li>logo.png</li> </ul>"},{"location":"WebNotes/site-structure/#dynamic-structure","title":"Dynamic Structure","text":"<ul> <li>index.html</li> <li>about.html</li> <li>contact.html</li> <li>portfolio.html</li> <li>posts.html</li> <li>pages/</li> <li>page1.html</li> <li>page2.html</li> <li>page3.html</li> <li>posts/</li> <li>post1.html</li> <li>post2.html</li> <li>post3.html</li> <li>components/</li> <li>header.html</li> <li>footer.html</li> <li>assets/</li> <li>css/<ul> <li>style.css</li> <li>responsive.css</li> </ul> </li> <li>js/<ul> <li>main.js</li> </ul> </li> <li>images/<ul> <li>logo.png</li> </ul> </li> <li>data/</li> <li>posts.json</li> </ul>"},{"location":"WebNotes/site-structure/#hugo-structure","title":"Hugo Structure","text":"<ul> <li>config.toml</li> <li>content/</li> <li>pages/<ul> <li>about.md</li> <li>contact.md</li> <li>portfolio.md</li> </ul> </li> <li>posts/<ul> <li>post1.md</li> <li>post2.md</li> <li>post3.md</li> </ul> </li> <li>layouts/</li> <li>_default/<ul> <li>baseof.html</li> <li>list.html</li> <li>page.html</li> <li>single.html</li> </ul> </li> <li>posts/<ul> <li>list.html</li> </ul> </li> <li>partials/<ul> <li>header.html</li> <li>footer.html</li> </ul> </li> <li>index.html</li> <li>static/</li> <li>css/<ul> <li>style.css</li> <li>responsive.css</li> </ul> </li> <li>js/<ul> <li>theme.js</li> </ul> </li> <li>images/<ul> <li>logo.png</li> </ul> </li> </ul>"},{"location":"WebNotes/site-structure/#jekyll-structure","title":"Jekyll Structure","text":"<ul> <li>_config.yml</li> <li>index.md</li> <li>404.html</li> <li>pages/</li> <li>about.md</li> <li>contact.md</li> <li>portfolio.md</li> <li>posts.md</li> <li>_posts/</li> <li>2025-09-22-post-001.md</li> <li>2025-09-23-post-002.md</li> <li>2025-09-23-post-003.md</li> <li>_includes/</li> <li>header.html</li> <li>footer.html</li> <li>head.html</li> <li>_layouts/</li> <li>default.html</li> <li>home.html</li> <li>post.html</li> <li>list.html</li> <li>page.html</li> <li>assets/</li> <li>css/<ul> <li>style.css</li> <li>responsive.css</li> </ul> </li> <li>js/<ul> <li>main.js</li> </ul> </li> <li>images/<ul> <li>logo.png</li> </ul> </li> </ul>"},{"location":"WebNotes/site-structure/#eleventy-project-structure","title":"Eleventy Project Structure","text":"<ul> <li>.eleventy.js  </li> <li>package.json</li> <li>index.md</li> <li>404.md</li> <li>pages/</li> <li>about.md</li> <li>contact.md</li> <li>portfolio.md</li> <li>posts.md</li> <li>posts/</li> <li>hello-world.md</li> <li>example-post.md</li> <li>another-post.md</li> <li>_includes/</li> <li>header.html</li> <li>footer.html</li> <li>head.html</li> <li>layouts/<ul> <li>base.html</li> <li>home.html</li> <li>post.html</li> <li>list.html</li> <li>page.html</li> </ul> </li> <li>assets/</li> <li>css/<ul> <li>style.css</li> <li>responsive.css</li> </ul> </li> <li>js/<ul> <li>main.js</li> </ul> </li> <li>images/<ul> <li>logo.png</li> </ul> </li> <li>_data/</li> <li>site.json</li> </ul>"}]}